da718477c9a6110ca2a5eb4414f5668b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var Platform = require('Platform');

var React = require('React');

var StyleSheet = require('StyleSheet');

var View = require('View');

var requireNativeComponent = require('requireNativeComponent');

var RCTActivityIndicator = Platform.OS === 'android' ? require('ProgressBarAndroid') : requireNativeComponent('RCTActivityIndicatorView');
var GRAY = '#999999';

var ActivityIndicator = function ActivityIndicator(props, forwardedRef) {
  var onLayout = props.onLayout,
      style = props.style,
      restProps = (0, _objectWithoutProperties2.default)(props, ["onLayout", "style"]);
  var sizeStyle;

  switch (props.size) {
    case 'small':
      sizeStyle = styles.sizeSmall;
      break;

    case 'large':
      sizeStyle = styles.sizeLarge;
      break;

    default:
      sizeStyle = {
        height: props.size,
        width: props.size
      };
      break;
  }

  var nativeProps = (0, _objectSpread2.default)({}, restProps, {
    ref: forwardedRef,
    style: sizeStyle,
    styleAttr: 'Normal',
    indeterminate: true
  });
  return React.createElement(View, {
    onLayout: onLayout,
    style: StyleSheet.compose(styles.container, style)
  }, React.createElement(RCTActivityIndicator, nativeProps));
};

var ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
ActivityIndicatorWithRef.defaultProps = {
  animating: true,
  color: Platform.OS === 'ios' ? GRAY : null,
  hidesWhenStopped: true,
  size: 'small'
};
var styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  sizeSmall: {
    width: 20,
    height: 20
  },
  sizeLarge: {
    width: 36,
    height: 36
  }
});
module.exports = ActivityIndicatorWithRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFjdGl2aXR5SW5kaWNhdG9yLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlJlYWN0IiwiU3R5bGVTaGVldCIsIlZpZXciLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwiUkNUQWN0aXZpdHlJbmRpY2F0b3IiLCJPUyIsIkdSQVkiLCJBY3Rpdml0eUluZGljYXRvciIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwib25MYXlvdXQiLCJzdHlsZSIsInJlc3RQcm9wcyIsInNpemVTdHlsZSIsInNpemUiLCJzdHlsZXMiLCJzaXplU21hbGwiLCJzaXplTGFyZ2UiLCJoZWlnaHQiLCJ3aWR0aCIsIm5hdGl2ZVByb3BzIiwicmVmIiwic3R5bGVBdHRyIiwiaW5kZXRlcm1pbmF0ZSIsImNvbXBvc2UiLCJjb250YWluZXIiLCJBY3Rpdml0eUluZGljYXRvcldpdGhSZWYiLCJmb3J3YXJkUmVmIiwiZGlzcGxheU5hbWUiLCJkZWZhdWx0UHJvcHMiLCJhbmltYXRpbmciLCJjb2xvciIsImhpZGVzV2hlblN0b3BwZWQiLCJjcmVhdGUiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXhCOztBQUNBLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUMsWUFBRCxDQUExQjs7QUFDQSxJQUFNRyxJQUFJLEdBQUdILE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUVBLElBQU1JLHNCQUFzQixHQUFHSixPQUFPLENBQUMsd0JBQUQsQ0FBdEM7O0FBS0EsSUFBTUssb0JBQW9CLEdBQ3hCTixRQUFRLENBQUNPLEVBQVQsS0FBZ0IsU0FBaEIsR0FDSU4sT0FBTyxDQUFDLG9CQUFELENBRFgsR0FFSUksc0JBQXNCLENBQUMsMEJBQUQsQ0FINUI7QUFLQSxJQUFNRyxJQUFJLEdBQUcsU0FBYjs7QUE0Q0EsSUFBTUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUN4QkMsS0FEd0IsRUFFeEJDLFlBRndCLEVBR3JCO0FBQUEsTUFDSUMsUUFESixHQUNxQ0YsS0FEckMsQ0FDSUUsUUFESjtBQUFBLE1BQ2NDLEtBRGQsR0FDcUNILEtBRHJDLENBQ2NHLEtBRGQ7QUFBQSxNQUN3QkMsU0FEeEIsMENBQ3FDSixLQURyQztBQUVILE1BQUlLLFNBQUo7O0FBRUEsVUFBUUwsS0FBSyxDQUFDTSxJQUFkO0FBQ0UsU0FBSyxPQUFMO0FBQ0VELE1BQUFBLFNBQVMsR0FBR0UsTUFBTSxDQUFDQyxTQUFuQjtBQUNBOztBQUNGLFNBQUssT0FBTDtBQUNFSCxNQUFBQSxTQUFTLEdBQUdFLE1BQU0sQ0FBQ0UsU0FBbkI7QUFDQTs7QUFDRjtBQUNFSixNQUFBQSxTQUFTLEdBQUc7QUFBQ0ssUUFBQUEsTUFBTSxFQUFFVixLQUFLLENBQUNNLElBQWY7QUFBcUJLLFFBQUFBLEtBQUssRUFBRVgsS0FBSyxDQUFDTTtBQUFsQyxPQUFaO0FBQ0E7QUFUSjs7QUFZQSxNQUFNTSxXQUFXLG1DQUNaUixTQURZO0FBRWZTLElBQUFBLEdBQUcsRUFBRVosWUFGVTtBQUdmRSxJQUFBQSxLQUFLLEVBQUVFLFNBSFE7QUFJZlMsSUFBQUEsU0FBUyxFQUFFLFFBSkk7QUFLZkMsSUFBQUEsYUFBYSxFQUFFO0FBTEEsSUFBakI7QUFRQSxTQUNFLG9CQUFDLElBQUQ7QUFDRSxJQUFBLFFBQVEsRUFBRWIsUUFEWjtBQUVFLElBQUEsS0FBSyxFQUFFVCxVQUFVLENBQUN1QixPQUFYLENBQ0xULE1BQU0sQ0FBQ1UsU0FERixFQUVMZCxLQUZLO0FBRlQsS0FRRSxvQkFBQyxvQkFBRCxFQUEwQlMsV0FBMUIsQ0FSRixDQURGO0FBWUQsQ0F2Q0Q7O0FBMENBLElBQU1NLHdCQUF3QixHQUFHMUIsS0FBSyxDQUFDMkIsVUFBTixDQUFpQnBCLGlCQUFqQixDQUFqQztBQUNBbUIsd0JBQXdCLENBQUNFLFdBQXpCLEdBQXVDLG1CQUF2QztBQUVBRix3QkFBd0IsQ0FBQ0csWUFBekIsR0FBd0M7QUFDdENDLEVBQUFBLFNBQVMsRUFBRSxJQUQyQjtBQUV0Q0MsRUFBQUEsS0FBSyxFQUFFakMsUUFBUSxDQUFDTyxFQUFULEtBQWdCLEtBQWhCLEdBQXdCQyxJQUF4QixHQUErQixJQUZBO0FBR3RDMEIsRUFBQUEsZ0JBQWdCLEVBQUUsSUFIb0I7QUFJdENsQixFQUFBQSxJQUFJLEVBQUU7QUFKZ0MsQ0FBeEM7QUFPQSxJQUFNQyxNQUFNLEdBQUdkLFVBQVUsQ0FBQ2dDLE1BQVgsQ0FBa0I7QUFDL0JSLEVBQUFBLFNBQVMsRUFBRTtBQUNUUyxJQUFBQSxVQUFVLEVBQUUsUUFESDtBQUVUQyxJQUFBQSxjQUFjLEVBQUU7QUFGUCxHQURvQjtBQUsvQm5CLEVBQUFBLFNBQVMsRUFBRTtBQUNURyxJQUFBQSxLQUFLLEVBQUUsRUFERTtBQUVURCxJQUFBQSxNQUFNLEVBQUU7QUFGQyxHQUxvQjtBQVMvQkQsRUFBQUEsU0FBUyxFQUFFO0FBQ1RFLElBQUFBLEtBQUssRUFBRSxFQURFO0FBRVRELElBQUFBLE1BQU0sRUFBRTtBQUZDO0FBVG9CLENBQWxCLENBQWY7QUFlQWtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFrQlgsd0JBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCdQbGF0Zm9ybScpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdSZWFjdCcpO1xuY29uc3QgU3R5bGVTaGVldCA9IHJlcXVpcmUoJ1N0eWxlU2hlZXQnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCdWaWV3Jyk7XG5cbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKCdyZXF1aXJlTmF0aXZlQ29tcG9uZW50Jyk7XG5cbmltcG9ydCB0eXBlIHtOYXRpdmVDb21wb25lbnR9IGZyb20gJ1JlYWN0TmF0aXZlJztcbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJ1ZpZXdQcm9wVHlwZXMnO1xuXG5jb25zdCBSQ1RBY3Rpdml0eUluZGljYXRvciA9XG4gIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCdcbiAgICA/IHJlcXVpcmUoJ1Byb2dyZXNzQmFyQW5kcm9pZCcpXG4gICAgOiByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCdSQ1RBY3Rpdml0eUluZGljYXRvclZpZXcnKTtcblxuY29uc3QgR1JBWSA9ICcjOTk5OTk5JztcblxudHlwZSBJbmRpY2F0b3JTaXplID0gbnVtYmVyIHwgJ3NtYWxsJyB8ICdsYXJnZSc7XG5cbnR5cGUgSU9TUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGluZGljYXRvciBzaG91bGQgaGlkZSB3aGVuIG5vdCBhbmltYXRpbmcgKHRydWUgYnkgZGVmYXVsdCkuXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL2FjdGl2aXR5aW5kaWNhdG9yLmh0bWwjaGlkZXN3aGVuc3RvcHBlZFxuICAgKi9cbiAgaGlkZXNXaGVuU3RvcHBlZD86ID9ib29sZWFuLFxufH0+O1xudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5WaWV3UHJvcHMsXG4gIC4uLklPU1Byb3BzLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHNob3cgdGhlIGluZGljYXRvciAodHJ1ZSwgdGhlIGRlZmF1bHQpIG9yIGhpZGUgaXQgKGZhbHNlKS5cbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvYWN0aXZpdHlpbmRpY2F0b3IuaHRtbCNhbmltYXRpbmdcbiAgICovXG4gIGFuaW1hdGluZz86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgKiBUaGUgZm9yZWdyb3VuZCBjb2xvciBvZiB0aGUgc3Bpbm5lciAoZGVmYXVsdCBpcyBncmF5KS5cbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvYWN0aXZpdHlpbmRpY2F0b3IuaHRtbCNjb2xvclxuICAgKi9cbiAgY29sb3I/OiA/c3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBpbmRpY2F0b3IgKGRlZmF1bHQgaXMgJ3NtYWxsJykuXG4gICAqIFBhc3NpbmcgYSBudW1iZXIgdG8gdGhlIHNpemUgcHJvcCBpcyBvbmx5IHN1cHBvcnRlZCBvbiBBbmRyb2lkLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy9hY3Rpdml0eWluZGljYXRvci5odG1sI3NpemVcbiAgICovXG4gIHNpemU/OiA/SW5kaWNhdG9yU2l6ZSxcbnx9PjtcblxuLyoqXG4gKiBEaXNwbGF5cyBhIGNpcmN1bGFyIGxvYWRpbmcgaW5kaWNhdG9yLlxuICpcbiAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL2FjdGl2aXR5aW5kaWNhdG9yLmh0bWxcbiAqL1xuY29uc3QgQWN0aXZpdHlJbmRpY2F0b3IgPSAoXG4gIHByb3BzOiBQcm9wcyxcbiAgZm9yd2FyZGVkUmVmPzogP1JlYWN0LlJlZjwnUkNUQWN0aXZpdHlJbmRpY2F0b3JWaWV3Jz4sXG4pID0+IHtcbiAgY29uc3Qge29uTGF5b3V0LCBzdHlsZSwgLi4ucmVzdFByb3BzfSA9IHByb3BzO1xuICBsZXQgc2l6ZVN0eWxlO1xuXG4gIHN3aXRjaCAocHJvcHMuc2l6ZSkge1xuICAgIGNhc2UgJ3NtYWxsJzpcbiAgICAgIHNpemVTdHlsZSA9IHN0eWxlcy5zaXplU21hbGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsYXJnZSc6XG4gICAgICBzaXplU3R5bGUgPSBzdHlsZXMuc2l6ZUxhcmdlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHNpemVTdHlsZSA9IHtoZWlnaHQ6IHByb3BzLnNpemUsIHdpZHRoOiBwcm9wcy5zaXplfTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgY29uc3QgbmF0aXZlUHJvcHMgPSB7XG4gICAgLi4ucmVzdFByb3BzLFxuICAgIHJlZjogZm9yd2FyZGVkUmVmLFxuICAgIHN0eWxlOiBzaXplU3R5bGUsXG4gICAgc3R5bGVBdHRyOiAnTm9ybWFsJyxcbiAgICBpbmRldGVybWluYXRlOiB0cnVlLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXdcbiAgICAgIG9uTGF5b3V0PXtvbkxheW91dH1cbiAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNvbXBvc2UoXG4gICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgIHN0eWxlLFxuICAgICAgKX0+XG4gICAgICB7LyogJEZsb3dGaXhNZSg+PTAuNzguMCBzaXRlPXJlYWN0X25hdGl2ZV9hbmRyb2lkX2ZiKSBUaGlzIGlzc3VlIHdhc1xuICAgICAgICAqIGZvdW5kIHdoZW4gbWFraW5nIEZsb3cgY2hlY2sgLmFuZHJvaWQuanMgZmlsZXMuICovfVxuICAgICAgPFJDVEFjdGl2aXR5SW5kaWNhdG9yIHsuLi5uYXRpdmVQcm9wc30gLz5cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG4vLyAkRmxvd0ZpeE1lIC0gVE9ETyBUMjkxNTY3MjEgYFJlYWN0LmZvcndhcmRSZWZgIGlzIG5vdCBkZWZpbmVkIGluIEZsb3csIHlldC5cbmNvbnN0IEFjdGl2aXR5SW5kaWNhdG9yV2l0aFJlZiA9IFJlYWN0LmZvcndhcmRSZWYoQWN0aXZpdHlJbmRpY2F0b3IpO1xuQWN0aXZpdHlJbmRpY2F0b3JXaXRoUmVmLmRpc3BsYXlOYW1lID0gJ0FjdGl2aXR5SW5kaWNhdG9yJztcblxuQWN0aXZpdHlJbmRpY2F0b3JXaXRoUmVmLmRlZmF1bHRQcm9wcyA9IHtcbiAgYW5pbWF0aW5nOiB0cnVlLFxuICBjb2xvcjogUGxhdGZvcm0uT1MgPT09ICdpb3MnID8gR1JBWSA6IG51bGwsXG4gIGhpZGVzV2hlblN0b3BwZWQ6IHRydWUsXG4gIHNpemU6ICdzbWFsbCcsXG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgfSxcbiAgc2l6ZVNtYWxsOiB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGhlaWdodDogMjAsXG4gIH0sXG4gIHNpemVMYXJnZToge1xuICAgIHdpZHRoOiAzNixcbiAgICBoZWlnaHQ6IDM2LFxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gKEFjdGl2aXR5SW5kaWNhdG9yV2l0aFJlZjogQ2xhc3M8TmF0aXZlQ29tcG9uZW50PFByb3BzPj4pO1xuIl19