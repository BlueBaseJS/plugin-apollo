d7f38e06e18c5f9a34e33f9390243afe
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Dimensions = require('Dimensions');

var PixelRatio = function () {
  function PixelRatio() {
    (0, _classCallCheck2.default)(this, PixelRatio);
  }

  (0, _createClass2.default)(PixelRatio, null, [{
    key: "get",
    value: function get() {
      return Dimensions.get('window').scale;
    }
  }, {
    key: "getFontScale",
    value: function getFontScale() {
      return Dimensions.get('window').fontScale || PixelRatio.get();
    }
  }, {
    key: "getPixelSizeForLayoutSize",
    value: function getPixelSizeForLayoutSize(layoutSize) {
      return Math.round(layoutSize * PixelRatio.get());
    }
  }, {
    key: "roundToNearestPixel",
    value: function roundToNearestPixel(layoutSize) {
      var ratio = PixelRatio.get();
      return Math.round(layoutSize * ratio) / ratio;
    }
  }, {
    key: "startDetecting",
    value: function startDetecting() {}
  }]);
  return PixelRatio;
}();

module.exports = PixelRatio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBpeGVsUmF0aW8uanMiXSwibmFtZXMiOlsiRGltZW5zaW9ucyIsInJlcXVpcmUiLCJQaXhlbFJhdGlvIiwiZ2V0Iiwic2NhbGUiLCJmb250U2NhbGUiLCJsYXlvdXRTaXplIiwiTWF0aCIsInJvdW5kIiwicmF0aW8iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7QUFFQSxJQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQTFCOztJQThDTUMsVTs7Ozs7OzswQkFtQmlCO0FBQ25CLGFBQU9GLFVBQVUsQ0FBQ0csR0FBWCxDQUFlLFFBQWYsRUFBeUJDLEtBQWhDO0FBQ0Q7OzttQ0FhNkI7QUFDNUIsYUFBT0osVUFBVSxDQUFDRyxHQUFYLENBQWUsUUFBZixFQUF5QkUsU0FBekIsSUFBc0NILFVBQVUsQ0FBQ0MsR0FBWCxFQUE3QztBQUNEOzs7OENBT2dDRyxVLEVBQTRCO0FBQzNELGFBQU9DLElBQUksQ0FBQ0MsS0FBTCxDQUFXRixVQUFVLEdBQUdKLFVBQVUsQ0FBQ0MsR0FBWCxFQUF4QixDQUFQO0FBQ0Q7Ozt3Q0FRMEJHLFUsRUFBNEI7QUFDckQsVUFBTUcsS0FBSyxHQUFHUCxVQUFVLENBQUNDLEdBQVgsRUFBZDtBQUNBLGFBQU9JLElBQUksQ0FBQ0MsS0FBTCxDQUFXRixVQUFVLEdBQUdHLEtBQXhCLElBQWlDQSxLQUF4QztBQUNEOzs7cUNBR3VCLENBQUU7Ozs7O0FBRzVCQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJULFVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERpbWVuc2lvbnMgPSByZXF1aXJlKCdEaW1lbnNpb25zJyk7XG5cbi8qKlxuICogUGl4ZWxSYXRpbyBjbGFzcyBnaXZlcyBhY2Nlc3MgdG8gdGhlIGRldmljZSBwaXhlbCBkZW5zaXR5LlxuICpcbiAqICMjIEZldGNoaW5nIGEgY29ycmVjdGx5IHNpemVkIGltYWdlXG4gKlxuICogWW91IHNob3VsZCBnZXQgYSBoaWdoZXIgcmVzb2x1dGlvbiBpbWFnZSBpZiB5b3UgYXJlIG9uIGEgaGlnaCBwaXhlbCBkZW5zaXR5XG4gKiBkZXZpY2UuIEEgZ29vZCBydWxlIG9mIHRodW1iIGlzIHRvIG11bHRpcGx5IHRoZSBzaXplIG9mIHRoZSBpbWFnZSB5b3UgZGlzcGxheVxuICogYnkgdGhlIHBpeGVsIHJhdGlvLlxuICpcbiAqIGBgYFxuICogdmFyIGltYWdlID0gZ2V0SW1hZ2Uoe1xuICogICB3aWR0aDogUGl4ZWxSYXRpby5nZXRQaXhlbFNpemVGb3JMYXlvdXRTaXplKDIwMCksXG4gKiAgIGhlaWdodDogUGl4ZWxSYXRpby5nZXRQaXhlbFNpemVGb3JMYXlvdXRTaXplKDEwMCksXG4gKiB9KTtcbiAqIDxJbWFnZSBzb3VyY2U9e2ltYWdlfSBzdHlsZT17e3dpZHRoOiAyMDAsIGhlaWdodDogMTAwfX0gLz5cbiAqIGBgYFxuICpcbiAqICMjIFBpeGVsIGdyaWQgc25hcHBpbmdcbiAqXG4gKiBJbiBpT1MsIHlvdSBjYW4gc3BlY2lmeSBwb3NpdGlvbnMgYW5kIGRpbWVuc2lvbnMgZm9yIGVsZW1lbnRzIHdpdGggYXJiaXRyYXJ5XG4gKiBwcmVjaXNpb24sIGZvciBleGFtcGxlIDI5LjY3NDgyNS4gQnV0LCB1bHRpbWF0ZWx5IHRoZSBwaHlzaWNhbCBkaXNwbGF5IG9ubHlcbiAqIGhhdmUgYSBmaXhlZCBudW1iZXIgb2YgcGl4ZWxzLCBmb3IgZXhhbXBsZSA2NDDDlzk2MCBmb3IgaVBob25lIDQgb3IgNzUww5cxMzM0XG4gKiBmb3IgaVBob25lIDYuIGlPUyB0cmllcyB0byBiZSBhcyBmYWl0aGZ1bCBhcyBwb3NzaWJsZSB0byB0aGUgdXNlciB2YWx1ZSBieVxuICogc3ByZWFkaW5nIG9uZSBvcmlnaW5hbCBwaXhlbCBpbnRvIG11bHRpcGxlIG9uZXMgdG8gdHJpY2sgdGhlIGV5ZS4gVGhlXG4gKiBkb3duc2lkZSBvZiB0aGlzIHRlY2huaXF1ZSBpcyB0aGF0IGl0IG1ha2VzIHRoZSByZXN1bHRpbmcgZWxlbWVudCBsb29rXG4gKiBibHVycnkuXG4gKlxuICogSW4gcHJhY3RpY2UsIHdlIGZvdW5kIG91dCB0aGF0IGRldmVsb3BlcnMgZG8gbm90IHdhbnQgdGhpcyBmZWF0dXJlIGFuZCB0aGV5XG4gKiBoYXZlIHRvIHdvcmsgYXJvdW5kIGl0IGJ5IGRvaW5nIG1hbnVhbCByb3VuZGluZyBpbiBvcmRlciB0byBhdm9pZCBoYXZpbmdcbiAqIGJsdXJyeSBlbGVtZW50cy4gSW4gUmVhY3QgTmF0aXZlLCB3ZSBhcmUgcm91bmRpbmcgYWxsIHRoZSBwaXhlbHNcbiAqIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogV2UgaGF2ZSB0byBiZSBjYXJlZnVsIHdoZW4gdG8gZG8gdGhpcyByb3VuZGluZy4gWW91IG5ldmVyIHdhbnQgdG8gd29yayB3aXRoXG4gKiByb3VuZGVkIGFuZCB1bnJvdW5kZWQgdmFsdWVzIGF0IHRoZSBzYW1lIHRpbWUgYXMgeW91J3JlIGdvaW5nIHRvIGFjY3VtdWxhdGVcbiAqIHJvdW5kaW5nIGVycm9ycy4gSGF2aW5nIGV2ZW4gb25lIHJvdW5kaW5nIGVycm9yIGlzIGRlYWRseSBiZWNhdXNlIGEgb25lXG4gKiBwaXhlbCBib3JkZXIgbWF5IHZhbmlzaCBvciBiZSB0d2ljZSBhcyBiaWcuXG4gKlxuICogSW4gUmVhY3QgTmF0aXZlLCBldmVyeXRoaW5nIGluIEphdmFTY3JpcHQgYW5kIHdpdGhpbiB0aGUgbGF5b3V0IGVuZ2luZSB3b3Jrc1xuICogd2l0aCBhcmJpdHJhcnkgcHJlY2lzaW9uIG51bWJlcnMuIEl0J3Mgb25seSB3aGVuIHdlIHNldCB0aGUgcG9zaXRpb24gYW5kXG4gKiBkaW1lbnNpb25zIG9mIHRoZSBuYXRpdmUgZWxlbWVudCBvbiB0aGUgbWFpbiB0aHJlYWQgdGhhdCB3ZSByb3VuZC4gQWxzbyxcbiAqIHJvdW5kaW5nIGlzIGRvbmUgcmVsYXRpdmUgdG8gdGhlIHJvb3QgcmF0aGVyIHRoYW4gdGhlIHBhcmVudCwgYWdhaW4gdG8gYXZvaWRcbiAqIGFjY3VtdWxhdGluZyByb3VuZGluZyBlcnJvcnMuXG4gKlxuICovXG5jbGFzcyBQaXhlbFJhdGlvIHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRldmljZSBwaXhlbCBkZW5zaXR5LiBTb21lIGV4YW1wbGVzOlxuICAgKlxuICAgKiAgIC0gUGl4ZWxSYXRpby5nZXQoKSA9PT0gMVxuICAgKiAgICAgLSBtZHBpIEFuZHJvaWQgZGV2aWNlcyAoMTYwIGRwaSlcbiAgICogICAtIFBpeGVsUmF0aW8uZ2V0KCkgPT09IDEuNVxuICAgKiAgICAgLSBoZHBpIEFuZHJvaWQgZGV2aWNlcyAoMjQwIGRwaSlcbiAgICogICAtIFBpeGVsUmF0aW8uZ2V0KCkgPT09IDJcbiAgICogICAgIC0gaVBob25lIDQsIDRTXG4gICAqICAgICAtIGlQaG9uZSA1LCA1YywgNXNcbiAgICogICAgIC0gaVBob25lIDZcbiAgICogICAgIC0geGhkcGkgQW5kcm9pZCBkZXZpY2VzICgzMjAgZHBpKVxuICAgKiAgIC0gUGl4ZWxSYXRpby5nZXQoKSA9PT0gM1xuICAgKiAgICAgLSBpUGhvbmUgNiBwbHVzXG4gICAqICAgICAtIHh4aGRwaSBBbmRyb2lkIGRldmljZXMgKDQ4MCBkcGkpXG4gICAqICAgLSBQaXhlbFJhdGlvLmdldCgpID09PSAzLjVcbiAgICogICAgIC0gTmV4dXMgNlxuICAgKi9cbiAgc3RhdGljIGdldCgpOiBudW1iZXIge1xuICAgIHJldHVybiBEaW1lbnNpb25zLmdldCgnd2luZG93Jykuc2NhbGU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2NhbGluZyBmYWN0b3IgZm9yIGZvbnQgc2l6ZXMuIFRoaXMgaXMgdGhlIHJhdGlvIHRoYXQgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlXG4gICAqIGFic29sdXRlIGZvbnQgc2l6ZSwgc28gYW55IGVsZW1lbnRzIHRoYXQgaGVhdmlseSBkZXBlbmQgb24gdGhhdCBzaG91bGQgdXNlIHRoaXMgdG8gZG9cbiAgICogY2FsY3VsYXRpb25zLlxuICAgKlxuICAgKiBJZiBhIGZvbnQgc2NhbGUgaXMgbm90IHNldCwgdGhpcyByZXR1cm5zIHRoZSBkZXZpY2UgcGl4ZWwgcmF0aW8uXG4gICAqXG4gICAqIEN1cnJlbnRseSB0aGlzIGlzIG9ubHkgaW1wbGVtZW50ZWQgb24gQW5kcm9pZCBhbmQgcmVmbGVjdHMgdGhlIHVzZXIgcHJlZmVyZW5jZSBzZXQgaW5cbiAgICogU2V0dGluZ3MgPiBEaXNwbGF5ID4gRm9udCBzaXplLCBvbiBpT1MgaXQgd2lsbCBhbHdheXMgcmV0dXJuIHRoZSBkZWZhdWx0IHBpeGVsIHJhdGlvLlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgc3RhdGljIGdldEZvbnRTY2FsZSgpOiBudW1iZXIge1xuICAgIHJldHVybiBEaW1lbnNpb25zLmdldCgnd2luZG93JykuZm9udFNjYWxlIHx8IFBpeGVsUmF0aW8uZ2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBsYXlvdXQgc2l6ZSAoZHApIHRvIHBpeGVsIHNpemUgKHB4KS5cbiAgICpcbiAgICogR3VhcmFudGVlZCB0byByZXR1cm4gYW4gaW50ZWdlciBudW1iZXIuXG4gICAqL1xuICBzdGF0aWMgZ2V0UGl4ZWxTaXplRm9yTGF5b3V0U2l6ZShsYXlvdXRTaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGxheW91dFNpemUgKiBQaXhlbFJhdGlvLmdldCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSb3VuZHMgYSBsYXlvdXQgc2l6ZSAoZHApIHRvIHRoZSBuZWFyZXN0IGxheW91dCBzaXplIHRoYXQgY29ycmVzcG9uZHMgdG9cbiAgICogYW4gaW50ZWdlciBudW1iZXIgb2YgcGl4ZWxzLiBGb3IgZXhhbXBsZSwgb24gYSBkZXZpY2Ugd2l0aCBhIFBpeGVsUmF0aW9cbiAgICogb2YgMywgYFBpeGVsUmF0aW8ucm91bmRUb05lYXJlc3RQaXhlbCg4LjQpID0gOC4zM2AsIHdoaWNoIGNvcnJlc3BvbmRzIHRvXG4gICAqIGV4YWN0bHkgKDguMzMgKiAzKSA9IDI1IHBpeGVscy5cbiAgICovXG4gIHN0YXRpYyByb3VuZFRvTmVhcmVzdFBpeGVsKGxheW91dFNpemU6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgcmF0aW8gPSBQaXhlbFJhdGlvLmdldCgpO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGxheW91dFNpemUgKiByYXRpbykgLyByYXRpbztcbiAgfVxuXG4gIC8vIE5vLW9wIGZvciBpT1MsIGJ1dCB1c2VkIG9uIHRoZSB3ZWIuIFNob3VsZCBub3QgYmUgZG9jdW1lbnRlZC5cbiAgc3RhdGljIHN0YXJ0RGV0ZWN0aW5nKCkge31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQaXhlbFJhdGlvO1xuIl19