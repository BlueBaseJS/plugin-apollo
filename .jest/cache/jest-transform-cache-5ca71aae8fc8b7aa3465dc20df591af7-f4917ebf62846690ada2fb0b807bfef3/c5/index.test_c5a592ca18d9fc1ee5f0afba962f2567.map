{"version":3,"sources":["/home/muzzamil/Documents/apollo/plugin-apollo/src/__tests__/index.test.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAGA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAEA,IAAA,oBAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AAWA,IAAI,CAAC,6BAAD,EAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7B,UAAA,EAF6B,GAExB,IAAI,MAAA,CAAA,QAAJ,EAFwB;AAAA;AAAA,4CAG7B,EAAE,CAAC,OAAH,CAAW,QAAX,CAAoB,OAAA,CAAA,OAApB,CAH6B;;AAAA;AAQnC,UAAA,MAAM,CAAC,EAAE,CAAC,OAAH,CAAW,GAAX,CAAe,eAAf,CAAD,CAAN,CAAwC,UAAxC;;AARmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC,CAAJ;AAWA,IAAI,MAAJ;AACA,IAAI,CAAC,+BAAD,EAAkC;AAAA;AAAA;AAAA;AAAA;AAEnC,UAAA,oBAAA,CAAA,OAAA,CAAmB,MAAnB;;AAFmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlC,CAAJ;AAMC,IAAI,CAAC,yBAAD,EAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzB,UAAA,EAFyB,GAEpB,IAAI,MAAA,CAAA,QAAJ,EAFoB;AAAA;AAAA,4CAGzB,EAAE,CAAC,OAAH,CAAW,QAAX,CAAoB,OAAA,CAAA,OAApB,CAHyB;;AAAA;AAAA;AAAA,4CAIzB,EAAE,CAAC,OAAH,CAAW,QAAX,CAAoB,gCAApB,EAAsD;AAAE,YAAA,GAAG,EAAE;AAAP,WAAtD,CAJyB;;AAAA;AAM/B,UAAA,EAAE,CAAC,IAAH;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,EAAE,CAAC,OAAH,CAAW,QAAX,CAAoB,gCAApB,CAA5B;AACM,UAAA,eARyB,GAQP,EAAE,CAAC,OAAH,CAAW,QAAX,CAAoB,gCAApB,CARO;AAS/B,UAAA,MAAM,CAAC,eAAD,CAAN,CAAwB,OAAxB,CAAgC;AAAC,YAAA,GAAG,EAAE;AAAN,WAAhC;;AAT+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B,CAAJ;AAcD,IAAI,CAAC,kEAAD,EAAqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAElE,UAAA,EAFkE,GAE7D,IAAI,MAAA,CAAA,QAAJ,EAF6D;AAAA;AAAA,4CAIlE,EAAE,CAAC,OAAH,CAAW,QAAX,CAAoB,OAAA,CAAA,OAApB,CAJkE;;AAAA;AAAA;AAAA;AAAA,4CAOjE,EAAE,CAAC,IAAH,EAPiE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUvE,UAAA,OAAO,GAAG,aAAM,OAAhB;;AAVuE;AAYxE,UAAA,MAAM,CAAC,OAAD,CAAN,CAAgB,IAAhB,CAAqB,sCAArB;;AAZwE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArE,CAAJ;AAiBA,IAAI,CAAC,0BAAD,EAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B,CAAJ","sourcesContent":["import { BlueBase, \n\t// BlueBaseApp \n} from '@bluebase/core';\nimport Plugin from '../index';\n// import { Text } from 'react-native';\nimport WithApolloProvider from '../withApolloProvider';\n// import React from 'react';\n// import { mount } from 'enzyme';\n// import { waitForElement } from 'enzyme-async-helpers';\n// import { sample } from '../__mocks__/index'\n// import { waitForElement } from 'enzyme-async-helpers';\n// const CustomText = () => <Text>Everything is ok!</Text>;\n//  import {HttpLink} from 'apollo-link-http';\n\n\n//working and tested\ntest('Plugin correctly registered', async () => {\n\t\n\tconst BB = new BlueBase();\n\tawait BB.Plugins.register(Plugin);\n\t\n\t// console.log('imported{}===>',{HttpLink})\n\t// console.log('imported===>',HttpLink)\n\n\texpect(BB.Plugins.has('plugin-apollo')).toBeTruthy();\n});\n\nlet client:any;\ntest('Plugin apolloProvider working', async () => {\n\n\t\t WithApolloProvider(client as any);\n});\n\n//working httplink options\n\ttest('Test with Apollo Config', async () => {\n\n\t\tconst BB = new BlueBase();\n\t\tawait BB.Plugins.register(Plugin);\n\t\tawait BB.Configs.setValue('plugins.apollo.httpLinkOptions', { uri: 'http://graphql' });\n\n\t\tBB.boot();\n\t\tconsole.log('Plugins====>', BB.Configs.getValue('plugins.apollo.httpLinkOptions'));\n\t\tconst httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');\n\t\texpect(httpLinkOptions).toEqual({uri: 'http://graphql'});\n\n\t});\n\n//working and tested\ntest('Plugin should throw error if httpLinkOptions config is not given', async () => {\n\n\tconst BB = new BlueBase();\n\t\n\tawait BB.Plugins.register(Plugin);\n\tlet message;\n\ttry {\n\t\tawait BB.boot();\n\n\t} catch (error) {\n\t\tmessage = error.message;\n\t}\n\texpect(message).toBe('HTTP Link URI not provided to Apollo');\n\n});\n\n//mocking + apollo links   //not working\ntest('Mocking and apollo links', async () => {\n\t// const BB = new BlueBase();\n\t// const {HttpLink}  = jest.mock('apollo-link-http');\n\n\t// const MockHttpLink=new HttpLink(\"\");\n\t\n\t// await BB.Filters.run(\"bluebase.boot.end\",[MockHttpLink]);\n\t\n\t//  await BB.Filters.run(\"plugin.apollo.links\",{HttpLink});\n\n\t//expect(HttpLink).toBeCalled();\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// //checking apollo cache\n// test('Mocking and apollo cache', async () => {\n// \tconst BB = new BlueBase();\n// \tconst {HttpLink}:any  = jest.mock('apollo-link-http');\n\n// \t// console.log('original===>',HttpLink)\n\t\n// \t//await BB.Filters.run(\"bluebase.boot.end\",{HttpLink});\n\n// \t  await BB.Filters.run(\"plugin.apollo.cache\",{HttpLink});\n\n\n// \texpect(HttpLink).toBeCalled();\n\n// });\n\n\n\n\n\n\n\n\n\n\n\n\n\n// class MockClass {\n// \tconstructor(public input) {\n\n// \t}\n// }\n\n// instanceof.input === \n\n// mise(resolve => resolve()));\n\n// \tconst wrapper = mount(\n// \t\t<BlueBaseApp plugins={[Plugin]} configs={{ 'plugins.apollo.httpLinkOptions': { uri: 'www.g\n\n\n\n"]}