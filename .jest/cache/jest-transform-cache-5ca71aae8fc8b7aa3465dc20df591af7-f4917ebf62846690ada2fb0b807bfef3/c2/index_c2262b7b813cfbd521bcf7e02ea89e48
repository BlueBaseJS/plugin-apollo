40e4eb534966f9ddf789468061423d6f
"use strict";

/* istanbul ignore next */
var cov_1s7u9hnj30 = function () {
  var path = "/home/muzzamil/Documents/apollo/plugin-apollo/src/index.ts";
  var hash = "4400c4c2c454df79f12f04df3f4fe846e749a7cd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/muzzamil/Documents/apollo/plugin-apollo/src/index.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 80
        }
      },
      "2": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 81
        }
      },
      "3": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 30
        }
      },
      "5": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "6": {
        start: {
          line: 17,
          column: 13
        },
        end: {
          line: 17,
          column: 38
        }
      },
      "7": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 46
        }
      },
      "8": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "9": {
        start: {
          line: 23,
          column: 25
        },
        end: {
          line: 23,
          column: 52
        }
      },
      "10": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "11": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 27,
          column: 83
        }
      },
      "12": {
        start: {
          line: 29,
          column: 14
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "13": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 91,
          column: 3
        }
      },
      "14": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "15": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "16": {
        start: {
          line: 51,
          column: 10
        },
        end: {
          line: 86,
          column: 11
        }
      },
      "17": {
        start: {
          line: 53,
          column: 14
        },
        end: {
          line: 53,
          column: 86
        }
      },
      "18": {
        start: {
          line: 54,
          column: 14
        },
        end: {
          line: 54,
          column: 82
        }
      },
      "19": {
        start: {
          line: 56,
          column: 14
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "20": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 34
        }
      },
      "21": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 22
        }
      },
      "22": {
        start: {
          line: 61,
          column: 14
        },
        end: {
          line: 61,
          column: 70
        }
      },
      "23": {
        start: {
          line: 64,
          column: 14
        },
        end: {
          line: 64,
          column: 63
        }
      },
      "24": {
        start: {
          line: 65,
          column: 14
        },
        end: {
          line: 65,
          column: 74
        }
      },
      "25": {
        start: {
          line: 66,
          column: 14
        },
        end: {
          line: 66,
          column: 32
        }
      },
      "26": {
        start: {
          line: 67,
          column: 14
        },
        end: {
          line: 67,
          column: 99
        }
      },
      "27": {
        start: {
          line: 70,
          column: 14
        },
        end: {
          line: 70,
          column: 36
        }
      },
      "28": {
        start: {
          line: 71,
          column: 14
        },
        end: {
          line: 71,
          column: 33
        }
      },
      "29": {
        start: {
          line: 72,
          column: 14
        },
        end: {
          line: 72,
          column: 132
        }
      },
      "30": {
        start: {
          line: 75,
          column: 14
        },
        end: {
          line: 75,
          column: 36
        }
      },
      "31": {
        start: {
          line: 76,
          column: 14
        },
        end: {
          line: 79,
          column: 33
        }
      },
      "32": {
        start: {
          line: 80,
          column: 14
        },
        end: {
          line: 80,
          column: 93
        }
      },
      "33": {
        start: {
          line: 81,
          column: 14
        },
        end: {
          line: 81,
          column: 60
        }
      },
      "34": {
        start: {
          line: 85,
          column: 14
        },
        end: {
          line: 85,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "bluebaseBootEnd",
        decl: {
          start: {
            line: 47,
            column: 34
          },
          end: {
            line: 47,
            column: 49
          }
        },
        loc: {
          start: {
            line: 47,
            column: 73
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 47
      },
      "1": {
        name: "bluebaseBootEnd$",
        decl: {
          start: {
            line: 49,
            column: 49
          },
          end: {
            line: 49,
            column: 65
          }
        },
        loc: {
          start: {
            line: 49,
            column: 76
          },
          end: {
            line: 88,
            column: 7
          }
        },
        line: 49
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 10
          },
          end: {
            line: 86,
            column: 11
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 61,
            column: 70
          }
        }, {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 67,
            column: 99
          }
        }, {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 72,
            column: 132
          }
        }, {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 81,
            column: 60
          }
        }, {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 20
          }
        }, {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 85,
            column: 37
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 14
          },
          end: {
            line: 59,
            column: 15
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 14
          },
          end: {
            line: 59,
            column: 15
          }
        }, {
          start: {
            line: 56,
            column: 14
          },
          end: {
            line: 59,
            column: 15
          }
        }],
        line: 56
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0, 0, 0, 0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "4400c4c2c454df79f12f04df3f4fe846e749a7cd"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

var _regenerator =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[1]++, _interopRequireDefault(require("@babel/runtime/regenerator")));

var _extends2 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[2]++, _interopRequireDefault(require("@babel/runtime/helpers/extends")));

/* istanbul ignore next */
cov_1s7u9hnj30.s[3]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
var tslib_1 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[4]++, require("tslib"));
var react_apollo_1 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[5]++, require("react-apollo"));
var core_1 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[6]++, require("@bluebase/core"));
var apollo_client_1 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[7]++, require("apollo-client"));
var apollo_link_1 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[8]++, require("apollo-link"));
var apollo_link_http_1 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[9]++, require("apollo-link-http"));
var apollo_cache_inmemory_1 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[10]++, require("apollo-cache-inmemory"));
var withApolloProvider_1 =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[11]++, tslib_1.__importDefault(require("./withApolloProvider")));
var console =
/* istanbul ignore next */
(cov_1s7u9hnj30.s[12]++, require("console"));

/* istanbul ignore next */
cov_1s7u9hnj30.s[13]++;
exports.default = core_1.createPlugin({
  description: '🌍 A BlueBase Plugin that integrates Apollo GraphQL Client',
  key: 'plugin-apollo',
  name: 'Apollo Plugin',
  version: '1.0.0',
  components: {
    ApolloConsumer: react_apollo_1.ApolloConsumer,
    GraphqlMutation: react_apollo_1.Mutation,
    GraphqlQuery: react_apollo_1.Query,
    GraphqlSubscription: react_apollo_1.Subscription
  },
  defaultConfigs: {
    'plugin.apollo.clientOptions': {},
    'plugin.apollo.httpLinkOptions': {}
  },
  filters: {
    'bluebase.boot.end': function bluebaseBootEnd(bootOptions, _ctx, BB) {
      /* istanbul ignore next */
      cov_1s7u9hnj30.f[0]++;
      var httpLinkOptions, clientOptions, httpLink, links, cache, client;

      /* istanbul ignore next */
      cov_1s7u9hnj30.s[14]++;
      return _regenerator.default.async(function bluebaseBootEnd$(_context) {
        /* istanbul ignore next */
        cov_1s7u9hnj30.f[1]++;
        cov_1s7u9hnj30.s[15]++;

        while (1) {
          /* istanbul ignore next */
          cov_1s7u9hnj30.s[16]++;

          switch (_context.prev = _context.next) {
            case 0:
              /* istanbul ignore next */
              cov_1s7u9hnj30.b[0][0]++;
              cov_1s7u9hnj30.s[17]++;
              httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[18]++;
              clientOptions = BB.Configs.getValue('plugins.apollo.clientOptions');

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[19]++;

              if (httpLinkOptions) {
                /* istanbul ignore next */
                cov_1s7u9hnj30.b[1][0]++;
                cov_1s7u9hnj30.s[20]++;
                _context.next = 4;

                /* istanbul ignore next */
                cov_1s7u9hnj30.s[21]++;
                break;
              } else
              /* istanbul ignore next */
              {
                cov_1s7u9hnj30.b[1][1]++;
              }

              cov_1s7u9hnj30.s[22]++;
              throw new Error('HTTP Link URI not provided to Apollo');

            case 4:
              /* istanbul ignore next */
              cov_1s7u9hnj30.b[0][1]++;
              cov_1s7u9hnj30.s[23]++;
              console.log("clientoptionssss", httpLinkOptions);

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[24]++;
              httpLink = new apollo_link_http_1.HttpLink(httpLinkOptions);

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[25]++;
              _context.next = 8;

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[26]++;
              return _regenerator.default.awrap(BB.Filters.run('plugin.apollo.links', [httpLink]));

            case 8:
              /* istanbul ignore next */
              cov_1s7u9hnj30.b[0][2]++;
              cov_1s7u9hnj30.s[27]++;
              links = _context.sent;

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[28]++;
              _context.next = 11;

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[29]++;
              return _regenerator.default.awrap(BB.Filters.run('plugin.apollo.cache', new apollo_cache_inmemory_1.InMemoryCache()));

            case 11:
              /* istanbul ignore next */
              cov_1s7u9hnj30.b[0][3]++;
              cov_1s7u9hnj30.s[30]++;
              cache = _context.sent;

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[31]++;
              client = new apollo_client_1.ApolloClient((0, _extends2.default)({
                cache: cache,
                link: apollo_link_1.ApolloLink.from(links)
              }, clientOptions));

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[32]++;
              BB.Components.addHocs('BlueBaseContent', withApolloProvider_1.default(client));

              /* istanbul ignore next */
              cov_1s7u9hnj30.s[33]++;
              return _context.abrupt("return", bootOptions);

            case 15:
              /* istanbul ignore next */
              cov_1s7u9hnj30.b[0][4]++;

            case "end":
              /* istanbul ignore next */
              cov_1s7u9hnj30.b[0][5]++;
              cov_1s7u9hnj30.s[34]++;
              return _context.stop();
          }
        }
      });
    }
  }
});