a5ef5d139ae7ee9522c7151a3e493d86
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../index"));

var react_native_1 = require("react-native");

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var CustomText = function CustomText() {
  return react_1.default.createElement(react_native_1.Text, null, "Everything is ok!");
};

test('Plugin correctly registered', function _callee() {
  var BB;
  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          expect(BB.Plugins.has('plugin-apollo')).toBeTruthy();

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('Plugin should throw error if httpLinkOptions config is not given', function _callee2() {
  var BB, message, _jest$mock, HttpLink;

  return _regenerator.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context2.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          try {} catch (error) {
            message = error.message;
          }

          _jest$mock = jest.mock('apollo-link-http'), HttpLink = _jest$mock.HttpLink;
          BB.Filters.run("bluebase.boot.end", HttpLink);
          expect(message).toBe('HTTP Link URI not provided to Apollo');

        case 7:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('Plugin correctly registered', function _callee3() {
  var wrapper;
  return _regenerator.default.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          global.fetch = jest.fn(function () {
            return new Promise(function (resolve) {
              return resolve();
            });
          });
          wrapper = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
            plugins: [index_1.default],
            configs: {
              'plugins.apollo.httpLinkOptions': {
                uri: 'www.google.com'
              }
            }
          }, react_1.default.createElement(CustomText, null)));
          _context3.next = 4;
          return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(wrapper, CustomText));

        case 4:
          expect(wrapper.find('ApolloProvider').getElements().length).toBe(1);

        case 5:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('Plugin correctly registered', function _callee4() {
  var BB;
  return _regenerator.default.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context4.next = 3;
          return _regenerator.default.awrap(BB.Filters.register({
            event: 'bluebase-boot-end',
            value: function value() {}
          }));

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvX190ZXN0c19fL2luZGV4LnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUNBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUE7O0FBRUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7QUFDQSxJQUFBLHNCQUFBLEdBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBS0EsSUFBTSxVQUFVLEdBQUcsU0FBYixVQUFhO0FBQUEsU0FBTSxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxjQUFBLENBQUEsSUFBRCxFQUFLLElBQUwsRUFBSyxtQkFBTCxDQUFOO0FBQUEsQ0FBbkI7O0FBRUEsSUFBSSxDQUFDLDZCQUFELEVBQWdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUM3QixVQUFBLEVBRDZCLEdBQ3hCLElBQUksTUFBQSxDQUFBLFFBQUosRUFEd0I7QUFBQTtBQUFBLDRDQUU3QixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBQSxDQUFBLE9BQXBCLENBRjZCOztBQUFBO0FBSW5DLFVBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLGVBQWYsQ0FBRCxDQUFOLENBQXdDLFVBQXhDOztBQUptQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFoQyxDQUFKO0FBT0EsSUFBSSxDQUFDLGtFQUFELEVBQXFFO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFbEUsVUFBQSxFQUZrRSxHQUU3RCxJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRjZEO0FBQUE7QUFBQSw0Q0FJbEUsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUprRTs7QUFBQTtBQU94RSxjQUFJLENBR0gsQ0FIRCxDQUdFLE9BQU8sS0FBUCxFQUFjO0FBQ2YsWUFBQSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQWhCO0FBQ0E7O0FBWnVFLHVCQWFqRCxJQUFJLENBQUMsSUFBTCxDQUFVLGtCQUFWLENBYmlELEVBYWpFLFFBYmlFLGNBYWpFLFFBYmlFO0FBY3hFLFVBQUEsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsbUJBQWYsRUFBbUMsUUFBbkM7QUFHQSxVQUFBLE1BQU0sQ0FBQyxPQUFELENBQU4sQ0FBZ0IsSUFBaEIsQ0FBcUIsc0NBQXJCOztBQWpCd0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBckUsQ0FBSjtBQW9CQSxJQUFJLENBQUMsNkJBQUQsRUFBZ0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWxDLFVBQUEsTUFBYyxDQUFDLEtBQWYsR0FBdUIsSUFBSSxDQUFDLEVBQUwsQ0FBUTtBQUFBLG1CQUFNLElBQUksT0FBSixDQUFZLFVBQUEsT0FBTztBQUFBLHFCQUFJLE9BQU8sRUFBWDtBQUFBLGFBQW5CLENBQU47QUFBQSxXQUFSLENBQXZCO0FBRUssVUFBQSxPQUo2QixHQUluQixRQUFBLENBQUEsS0FBQSxDQUNmLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLE1BQUEsQ0FBQSxXQUFELEVBQVk7QUFBQyxZQUFBLE9BQU8sRUFBRSxDQUFDLE9BQUEsQ0FBQSxPQUFELENBQVY7QUFBb0IsWUFBQSxPQUFPLEVBQUU7QUFBRSxnREFBa0M7QUFBRSxnQkFBQSxHQUFHLEVBQUU7QUFBUDtBQUFwQztBQUE3QixXQUFaLEVBQ0MsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsVUFBRCxFQUFXLElBQVgsQ0FERCxDQURlLENBSm1CO0FBQUE7QUFBQSw0Q0FTN0Isc0JBQUEsQ0FBQSxjQUFBLENBQWUsT0FBZixFQUF3QixVQUF4QixDQVQ2Qjs7QUFBQTtBQVVuQyxVQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBUixDQUFhLGdCQUFiLEVBQStCLFdBQS9CLEdBQTZDLE1BQTlDLENBQU4sQ0FBNEQsSUFBNUQsQ0FBaUUsQ0FBakU7O0FBVm1DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQWhDLENBQUo7QUFjQSxJQUFJLENBQUMsNkJBQUQsRUFBZ0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzdCLFVBQUEsRUFENkIsR0FDeEIsSUFBSSxNQUFBLENBQUEsUUFBSixFQUR3QjtBQUFBO0FBQUEsNENBRTdCLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQjtBQUN6QixZQUFBLEtBQUssRUFBRSxtQkFEa0I7QUFFekIsWUFBQSxLQUFLLEVBQUUsaUJBQUssQ0FFWDtBQUp3QixXQUFwQixDQUY2Qjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFoQyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmx1ZUJhc2UsIEJsdWVCYXNlQXBwIH0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuaW1wb3J0IFBsdWdpbiBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbi8vIGltcG9ydCBXaXRoQXBvbGxvUHJvdmlkZXIgZnJvbSAnLi4vd2l0aEFwb2xsb1Byb3ZpZGVyJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtb3VudCB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgeyB3YWl0Rm9yRWxlbWVudCB9IGZyb20gJ2VuenltZS1hc3luYy1oZWxwZXJzJztcbi8vIGltcG9ydCB7IEh0dHBMaW5rIH0gZnJvbSAnYXBvbGxvLWxpbmstaHR0cCc7XG4vLyBpbXBvcnQgeyBzYW1wbGUgfSBmcm9tICcuLi9fX21vY2tzX18vaW5kZXgnXG5cblxuY29uc3QgQ3VzdG9tVGV4dCA9ICgpID0+IDxUZXh0PkV2ZXJ5dGhpbmcgaXMgb2shPC9UZXh0PjtcblxudGVzdCgnUGx1Z2luIGNvcnJlY3RseSByZWdpc3RlcmVkJywgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG5cblx0ZXhwZWN0KEJCLlBsdWdpbnMuaGFzKCdwbHVnaW4tYXBvbGxvJykpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG50ZXN0KCdQbHVnaW4gc2hvdWxkIHRocm93IGVycm9yIGlmIGh0dHBMaW5rT3B0aW9ucyBjb25maWcgaXMgbm90IGdpdmVuJywgYXN5bmMgKCkgPT4ge1xuXG5cdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdFxuXHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG5cdGxldCBtZXNzYWdlO1xuXG5cdHRyeSB7XG5cdFx0Ly9hd2FpdCBCQi5ib290KCk7XG5cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcblx0fVxuXHRjb25zdCB7SHR0cExpbmt9OmFueSA9IGplc3QubW9jaygnYXBvbGxvLWxpbmstaHR0cCcpO1xuXHRCQi5GaWx0ZXJzLnJ1bihcImJsdWViYXNlLmJvb3QuZW5kXCIsSHR0cExpbmspO1xuXG5cblx0ZXhwZWN0KG1lc3NhZ2UpLnRvQmUoJ0hUVFAgTGluayBVUkkgbm90IHByb3ZpZGVkIHRvIEFwb2xsbycpO1xufSk7XG5cbnRlc3QoJ1BsdWdpbiBjb3JyZWN0bHkgcmVnaXN0ZXJlZCcsIGFzeW5jICgpID0+IHtcblxuXHQoZ2xvYmFsIGFzIGFueSkuZmV0Y2ggPSBqZXN0LmZuKCgpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZSgpKSk7XG5cblx0Y29uc3Qgd3JhcHBlciA9IG1vdW50KFxuXHRcdDxCbHVlQmFzZUFwcCBwbHVnaW5zPXtbUGx1Z2luXX0gY29uZmlncz17eyAncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJzogeyB1cmk6ICd3d3cuZ29vZ2xlLmNvbScgfSB9fT5cblx0XHRcdDxDdXN0b21UZXh0IC8+XG5cdFx0PC9CbHVlQmFzZUFwcD5cblx0KTtcblx0YXdhaXQgd2FpdEZvckVsZW1lbnQod3JhcHBlciwgQ3VzdG9tVGV4dCk7XG5cdGV4cGVjdCh3cmFwcGVyLmZpbmQoJ0Fwb2xsb1Byb3ZpZGVyJykuZ2V0RWxlbWVudHMoKS5sZW5ndGgpLnRvQmUoMSk7XG5cbn0pO1xuXG50ZXN0KCdQbHVnaW4gY29ycmVjdGx5IHJlZ2lzdGVyZWQnLCBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdGF3YWl0IEJCLkZpbHRlcnMucmVnaXN0ZXIoe1xuXHRcdGV2ZW50OiAnYmx1ZWJhc2UtYm9vdC1lbmQnLFxuXHRcdHZhbHVlOiAoKSA9PiB7XG5cblx0XHR9XG5cdH0pO1xuXG59KTtcblxuXG5cblxuXG5cblxuLy8gY2xhc3MgTW9ja0NsYXNzIHtcbi8vIFx0Y29uc3RydWN0b3IocHVibGljIGlucHV0KSB7XG5cbi8vIFx0fVxuLy8gfVxuXG4vLyBpbnN0YW5jZW9mLmlucHV0ID09PSBcblxuXG5cbi8vIC8vIGxldCBjbGllbnQ6YW55O1xuLy8gLy8gdGVzdCgnUGx1Z2luIHNob3VsZCBiZSBjb3JyZWN0bHkgcmVnaXN0ZXJlZCcsIGFzeW5jICgpID0+IHtcblxuLy8gLy8gXHRcdCBXaXRoQXBvbGxvUHJvdmlkZXIoY2xpZW50IGFzIGFueSk7XG4vLyAvLyB9KTtcblxuLy8gbWlzZShyZXNvbHZlID0+IHJlc29sdmUoKSkpO1xuXG4vLyBcdGNvbnN0IHdyYXBwZXIgPSBtb3VudChcbi8vIFx0XHQ8Qmx1ZUJhc2VBcHAgcGx1Z2lucz17W1BsdWdpbl19IGNvbmZpZ3M9e3sgJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucyc6IHsgdXJpOiAnd3d3LmdcblxuXG5cbi8vIGRlc2NyaWJlKCdBcG9sbG8gUGx1Z2luIHRlc3QnLCAoKSA9PiB7XG4vLyBcdGl0KCdUZXN0IHdpdGggQXBvbGxvIENvbmZpZycsIGFzeW5jICgpID0+IHtcblxuLy8gXHRcdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG4vLyBcdFx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuLy8gXHRcdC8vIEFwb2xsb1BsdWdpbi5nZXRDbGllbnQoKTtcbi8vIFx0XHRjb25zdCBQbHVnaW5zID0gYXdhaXQgQkIuUGx1Z2lucy5oYXMoUGx1Z2luKTtcbi8vIFx0XHRhd2FpdCBCQi5Db25maWdzLnNldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnLCB7IHVyaTogJ2h0dHA6Ly9ncmFwaHFsJyB9KTtcblxuLy8gXHRcdC8vIHJlbmRlcmVyLmNyZWF0ZSAoXG4vLyBcdFx0Ly8gXHQ8QkIuQ29tcG9uZW50cy5RdWVyeT4pXG4vLyBcdFx0Ly8gPC9CQi5Db21wb25lbnRzLlF1ZXJ5PlxuXG4vLyBcdFx0QkIuYm9vdCgpO1xuLy8gXHRcdGNvbnNvbGUubG9nKCdQbHVnaW5zPT09PT4nLCBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnKSk7XG4vLyBcdFx0Y29uc3QgaHR0cExpbmtPcHRpb25zID0gQkIuQ29uZmlncy5nZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJyk7XG4vLyBcdFx0ZXhwZWN0KGh0dHBMaW5rT3B0aW9ucykudG9FcXVhbCh7dXJpOiAnaHR0cDovL2dyYXBocWwnfSk7XG5cbi8vIFx0fSk7XG4vLyB9KTtcblxuIl19