4f74939ab6a46c75a58f353b48c3e776
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../index"));

var withApolloProvider_1 = tslib_1.__importDefault(require("../withApolloProvider"));

test('Plugin correctly registered', function _callee() {
  var BB;
  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          expect(BB.Plugins.has('plugin-apollo')).toBeTruthy();

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('Plugin should throw error if httpLinkOptions config is not given', function _callee2() {
  var BB, message, _jest$mock, HttpLink;

  return _regenerator.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context2.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          _context2.prev = 3;
          _context2.next = 6;
          return _regenerator.default.awrap(BB.boot());

        case 6:
          _context2.next = 11;
          break;

        case 8:
          _context2.prev = 8;
          _context2.t0 = _context2["catch"](3);
          message = _context2.t0.message;

        case 11:
          _jest$mock = jest.mock('apollo-link-http'), HttpLink = _jest$mock.HttpLink;
          BB.Filters.run("bluebase.boot.end", HttpLink);
          expect(message).toBe('HTTP Link URI not provided to Apollo');

        case 14:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[3, 8]]);
});
test('Mocking', function _callee3() {
  var BB, _jest$mock2, HttpLink;

  return _regenerator.default.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          BB = new core_1.BlueBase();
          _jest$mock2 = jest.mock('apollo-link-http'), HttpLink = _jest$mock2.HttpLink;
          console.log("mocked httplink ", HttpLink);
          _context3.next = 5;
          return _regenerator.default.awrap(BB.Filters.run("bluebase.boot.end", {
            HttpLink: HttpLink
          }));

        case 5:
          expect(HttpLink).toHaveBeenCalled();

        case 6:
        case "end":
          return _context3.stop();
      }
    }
  });
});
var client;
test('Plugin apolloProvider working', function _callee4() {
  return _regenerator.default.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          withApolloProvider_1.default(client);

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  });
});
describe('Apollo Plugin test', function () {
  it('Test with Apollo Config', function _callee5() {
    var BB, httpLinkOptions;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            BB = new core_1.BlueBase();
            _context5.next = 3;
            return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

          case 3:
            _context5.next = 5;
            return _regenerator.default.awrap(BB.Configs.setValue('plugins.apollo.httpLinkOptions', {
              uri: 'http://graphql'
            }));

          case 5:
            BB.boot();
            console.log('Plugins====>', BB.Configs.getValue('plugins.apollo.httpLinkOptions'));
            httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');
            expect(httpLinkOptions).toEqual({
              uri: 'http://graphql'
            });

          case 9:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvX190ZXN0c19fL2luZGV4LnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBLENBQUE7O0FBY0MsSUFBSSxDQUFDLDZCQUFELEVBQWdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUMvQixVQUFBLEVBRCtCLEdBQzFCLElBQUksTUFBQSxDQUFBLFFBQUosRUFEMEI7QUFBQTtBQUFBLDRDQUUvQixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBQSxDQUFBLE9BQXBCLENBRitCOztBQUFBO0FBSXBDLFVBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLGVBQWYsQ0FBRCxDQUFOLENBQXdDLFVBQXhDOztBQUpvQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFoQyxDQUFKO0FBUUQsSUFBSSxDQUFDLGtFQUFELEVBQXFFO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFbEUsVUFBQSxFQUZrRSxHQUU3RCxJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRjZEO0FBQUE7QUFBQSw0Q0FJbEUsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUprRTs7QUFBQTtBQUFBO0FBQUE7QUFBQSw0Q0FRakUsRUFBRSxDQUFDLElBQUgsRUFSaUU7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQVd2RSxVQUFBLE9BQU8sR0FBRyxhQUFNLE9BQWhCOztBQVh1RTtBQUFBLHVCQWNoRCxJQUFJLENBQUMsSUFBTCxDQUFVLGtCQUFWLENBZGdELEVBY2pFLFFBZGlFLGNBY2pFLFFBZGlFO0FBZXZFLFVBQUEsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsbUJBQWYsRUFBbUMsUUFBbkM7QUFFRCxVQUFBLE1BQU0sQ0FBQyxPQUFELENBQU4sQ0FBZ0IsSUFBaEIsQ0FBcUIsc0NBQXJCOztBQWpCd0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBckUsQ0FBSjtBQXNCQSxJQUFJLENBQUMsU0FBRCxFQUFZO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDVCxVQUFBLEVBRFMsR0FDSixJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBREk7QUFBQSx3QkFFUyxJQUFJLENBQUMsSUFBTCxDQUFVLGtCQUFWLENBRlQsRUFFUixRQUZRLGVBRVIsUUFGUTtBQUdmLFVBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxrQkFBWixFQUErQixRQUEvQjtBQUhlO0FBQUEsNENBSVQsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsbUJBQWYsRUFBbUM7QUFBQyxZQUFBLFFBQVEsRUFBUjtBQUFELFdBQW5DLENBSlM7O0FBQUE7QUFNZixVQUFBLE1BQU0sQ0FBQyxRQUFELENBQU4sQ0FBaUIsZ0JBQWpCOztBQU5lO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQVosQ0FBSjtBQVdBLElBQUksTUFBSjtBQUNBLElBQUksQ0FBQywrQkFBRCxFQUFrQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRW5DLFVBQUEsb0JBQUEsQ0FBQSxPQUFBLENBQW1CLE1BQW5COztBQUZtQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFsQyxDQUFKO0FBbUJBLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFLO0FBRW5DLEVBQUEsRUFBRSxDQUFDLHlCQUFELEVBQTRCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUV2QixZQUFBLEVBRnVCLEdBRWxCLElBQUksTUFBQSxDQUFBLFFBQUosRUFGa0I7QUFBQTtBQUFBLDhDQUd2QixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBQSxDQUFBLE9BQXBCLENBSHVCOztBQUFBO0FBQUE7QUFBQSw4Q0FNdkIsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLGdDQUFwQixFQUFzRDtBQUFFLGNBQUEsR0FBRyxFQUFFO0FBQVAsYUFBdEQsQ0FOdUI7O0FBQUE7QUFRN0IsWUFBQSxFQUFFLENBQUMsSUFBSDtBQUNBLFlBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxjQUFaLEVBQTRCLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixnQ0FBcEIsQ0FBNUI7QUFDTSxZQUFBLGVBVnVCLEdBVUwsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLGdDQUFwQixDQVZLO0FBVzdCLFlBQUEsTUFBTSxDQUFDLGVBQUQsQ0FBTixDQUF3QixPQUF4QixDQUFnQztBQUFDLGNBQUEsR0FBRyxFQUFFO0FBQU4sYUFBaEM7O0FBWDZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQTVCLENBQUY7QUFjQSxDQWhCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmx1ZUJhc2UsIFxuXHQvLyBCbHVlQmFzZUFwcCBcbn0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuaW1wb3J0IFBsdWdpbiBmcm9tICcuLi9pbmRleCc7XG4vLyBpbXBvcnQgeyBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBXaXRoQXBvbGxvUHJvdmlkZXIgZnJvbSAnLi4vd2l0aEFwb2xsb1Byb3ZpZGVyJztcbi8vIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBtb3VudCB9IGZyb20gJ2VuenltZSc7XG4vLyBpbXBvcnQgeyB3YWl0Rm9yRWxlbWVudCB9IGZyb20gJ2VuenltZS1hc3luYy1oZWxwZXJzJztcbi8vICBpbXBvcnQgeyBIdHRwTGluayB9IGZyb20gJ2Fwb2xsby1saW5rLWh0dHAnO1xuLy8gaW1wb3J0IHsgc2FtcGxlIH0gZnJvbSAnLi4vX19tb2Nrc19fL2luZGV4J1xuLy8gaW1wb3J0IHsgd2FpdEZvckVsZW1lbnQgfSBmcm9tICdlbnp5bWUtYXN5bmMtaGVscGVycyc7XG5cblxuXG4vLyBjb25zdCBDdXN0b21UZXh0ID0gKCkgPT4gPFRleHQ+RXZlcnl0aGluZyBpcyBvayE8L1RleHQ+O1xuXG5cbi8vd29ya2luZyBhbmQgdGVzdGluZ1xuXHR0ZXN0KCdQbHVnaW4gY29ycmVjdGx5IHJlZ2lzdGVyZWQnLCBhc3luYyAoKSA9PiB7XG5jb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuYXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXG5cdGV4cGVjdChCQi5QbHVnaW5zLmhhcygncGx1Z2luLWFwb2xsbycpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuLy93b3JraW5nIGFuZCB0ZXN0aW5nXG50ZXN0KCdQbHVnaW4gc2hvdWxkIHRocm93IGVycm9yIGlmIGh0dHBMaW5rT3B0aW9ucyBjb25maWcgaXMgbm90IGdpdmVuJywgYXN5bmMgKCkgPT4ge1xuXG5cdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdFxuXHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG5cdGxldCBtZXNzYWdlO1xuXG5cdHRyeSB7XG5cdFx0YXdhaXQgQkIuYm9vdCgpO1xuXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0bWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG5cdH1cblxuXHRjb25zdCB7SHR0cExpbmt9IDphbnkgPSBqZXN0Lm1vY2soJ2Fwb2xsby1saW5rLWh0dHAnKTtcblx0XHRCQi5GaWx0ZXJzLnJ1bihcImJsdWViYXNlLmJvb3QuZW5kXCIsSHR0cExpbmspO1xuXG5cdGV4cGVjdChtZXNzYWdlKS50b0JlKCdIVFRQIExpbmsgVVJJIG5vdCBwcm92aWRlZCB0byBBcG9sbG8nKTtcblxufSk7XG5cblxudGVzdCgnTW9ja2luZycsIGFzeW5jICgpID0+IHtcblx0Y29uc3QgQkIgPSBuZXcgQmx1ZUJhc2UoKTtcblx0Y29uc3Qge0h0dHBMaW5rfTphbnkgID0gamVzdC5tb2NrKCdhcG9sbG8tbGluay1odHRwJyk7XG5cdGNvbnNvbGUubG9nKFwibW9ja2VkIGh0dHBsaW5rIFwiLEh0dHBMaW5rKVxuXHRhd2FpdCBCQi5GaWx0ZXJzLnJ1bihcImJsdWViYXNlLmJvb3QuZW5kXCIse0h0dHBMaW5rfSk7XG5cblx0ZXhwZWN0KEh0dHBMaW5rKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbn0pO1xuXG5cbmxldCBjbGllbnQ6YW55O1xudGVzdCgnUGx1Z2luIGFwb2xsb1Byb3ZpZGVyIHdvcmtpbmcnLCBhc3luYyAoKSA9PiB7XG5cblx0XHQgV2l0aEFwb2xsb1Byb3ZpZGVyKGNsaWVudCBhcyBhbnkpO1xufSk7XG5cblxuLy8gY2xhc3MgTW9ja0NsYXNzIHtcbi8vIFx0Y29uc3RydWN0b3IocHVibGljIGlucHV0KSB7XG5cbi8vIFx0fVxuLy8gfVxuXG4vLyBpbnN0YW5jZW9mLmlucHV0ID09PSBcblxuLy8gbWlzZShyZXNvbHZlID0+IHJlc29sdmUoKSkpO1xuXG4vLyBcdGNvbnN0IHdyYXBwZXIgPSBtb3VudChcbi8vIFx0XHQ8Qmx1ZUJhc2VBcHAgcGx1Z2lucz17W1BsdWdpbl19IGNvbmZpZ3M9e3sgJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucyc6IHsgdXJpOiAnd3d3LmdcblxuZGVzY3JpYmUoJ0Fwb2xsbyBQbHVnaW4gdGVzdCcsICgpID0+IHtcblxuXHRpdCgnVGVzdCB3aXRoIEFwb2xsbyBDb25maWcnLCBhc3luYyAoKSA9PiB7XG5cblx0XHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRcdGF3YWl0IEJCLlBsdWdpbnMucmVnaXN0ZXIoUGx1Z2luKTtcblx0XHQvLyBBcG9sbG9QbHVnaW4uZ2V0Q2xpZW50KCk7XG5cdFx0Ly9jb25zdCBQbHVnaW5zID0gYXdhaXQgQkIuUGx1Z2lucy5oYXMoUGx1Z2luKTtcblx0XHRhd2FpdCBCQi5Db25maWdzLnNldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnLCB7IHVyaTogJ2h0dHA6Ly9ncmFwaHFsJyB9KTtcblxuXHRcdEJCLmJvb3QoKTtcblx0XHRjb25zb2xlLmxvZygnUGx1Z2lucz09PT0+JywgQkIuQ29uZmlncy5nZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJykpO1xuXHRcdGNvbnN0IGh0dHBMaW5rT3B0aW9ucyA9IEJCLkNvbmZpZ3MuZ2V0VmFsdWUoJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucycpO1xuXHRcdGV4cGVjdChodHRwTGlua09wdGlvbnMpLnRvRXF1YWwoe3VyaTogJ2h0dHA6Ly9ncmFwaHFsJ30pO1xuXG5cdH0pO1xufSk7XG5cbiJdfQ==