{"version":3,"sources":["Picker.js"],"names":["ColorPropType","require","PickerIOS","PickerAndroid","Platform","React","PropTypes","StyleSheetPropType","TextStylePropTypes","UnimplementedView","ViewPropTypes","ViewStylePropTypes","itemStylePropType","pickerStyleType","color","MODE_DIALOG","MODE_DROPDOWN","PickerItem","Component","label","string","isRequired","value","any","testID","Picker","OS","props","children","mode","style","selectedValue","onValueChange","func","enabled","bool","oneOf","itemStyle","prompt","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,eAAD,CAA7B;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,aAAa,GAAGF,OAAO,CAAC,eAAD,CAA7B;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMK,SAAS,GAAGL,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAMM,kBAAkB,GAAGN,OAAO,CAAC,oBAAD,CAAlC;;AACA,IAAMO,kBAAkB,GAAGP,OAAO,CAAC,oBAAD,CAAlC;;AACA,IAAMQ,iBAAiB,GAAGR,OAAO,CAAC,mBAAD,CAAjC;;AACA,IAAMS,aAAa,GAAGT,OAAO,CAAC,eAAD,CAA7B;;AACA,IAAMU,kBAAkB,GAAGV,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAMW,iBAAiB,GAAGL,kBAAkB,CAACC,kBAAD,CAA5C;AAEA,IAAMK,eAAe,GAAGN,kBAAkB,iCACrCI,kBADqC;AAExCG,EAAAA,KAAK,EAAEd;AAFiC,GAA1C;AAKA,IAAMe,WAAW,GAAG,QAApB;AACA,IAAMC,aAAa,GAAG,UAAtB;;IAKMC,U;;;;;;;;;;6BA2BK;AAEP,YAAM,IAAN;AACD;;;EA9BsBZ,KAAK,CAACa,S;;8BAAzBD,U,eAMe;AAIjBE,EAAAA,KAAK,EAAEb,SAAS,CAACc,MAAV,CAAiBC,UAJP;AASjBC,EAAAA,KAAK,EAAEhB,SAAS,CAACiB,GATA;AAcjBT,EAAAA,KAAK,EAAEd,aAdU;AAkBjBwB,EAAAA,MAAM,EAAElB,SAAS,CAACc;AAlBD,C;;IAqCfK,M;;;;;;;;;;6BAuEK;AACP,UAAIrB,QAAQ,CAACsB,EAAT,KAAgB,KAApB,EAA2B;AAEzB,eAAO,oBAAC,SAAD,EAAe,KAAKC,KAApB,EAA4B,KAAKA,KAAL,CAAWC,QAAvC,CAAP;AACD,OAHD,MAGO,IAAIxB,QAAQ,CAACsB,EAAT,KAAgB,SAApB,EAA+B;AACpC,eAEE,oBAAC,aAAD,EAAmB,KAAKC,KAAxB,EAAgC,KAAKA,KAAL,CAAWC,QAA3C,CAFF;AAID,OALM,MAKA;AACL,eAAO,oBAAC,iBAAD,OAAP;AACD;AACF;;;EAnFkBvB,KAAK,CAACa,S;;8BAArBO,M,iBAaiBV,W;8BAbjBU,M,mBAkBmBT,a;8BAlBnBS,M,UAoBUR,U;8BApBVQ,M,kBAsBkB;AACpBI,EAAAA,IAAI,EAAEd;AADc,C;8BAtBlBU,M,+CA4BCf,a;AACHoB,EAAAA,KAAK,EAAEjB,e;AAIPkB,EAAAA,aAAa,EAAEzB,SAAS,CAACiB,G;AAMzBS,EAAAA,aAAa,EAAE1B,SAAS,CAAC2B,I;AAMzBC,EAAAA,OAAO,EAAE5B,SAAS,CAAC6B,I;AASnBN,EAAAA,IAAI,EAAEvB,SAAS,CAAC8B,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,CAAhB,C;AAKNC,EAAAA,SAAS,EAAEzB,iB;AAKX0B,EAAAA,MAAM,EAAEhC,SAAS,CAACc,M;AAIlBI,EAAAA,MAAM,EAAElB,SAAS,CAACc;;AAkBtBmB,MAAM,CAACC,OAAP,GAAiBf,MAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst PickerIOS = require('PickerIOS');\nconst PickerAndroid = require('PickerAndroid');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst TextStylePropTypes = require('TextStylePropTypes');\nconst UnimplementedView = require('UnimplementedView');\nconst ViewPropTypes = require('ViewPropTypes');\nconst ViewStylePropTypes = require('ViewStylePropTypes');\n\nconst itemStylePropType = StyleSheetPropType(TextStylePropTypes);\n\nconst pickerStyleType = StyleSheetPropType({\n  ...ViewStylePropTypes,\n  color: ColorPropType,\n});\n\nconst MODE_DIALOG = 'dialog';\nconst MODE_DROPDOWN = 'dropdown';\n\n/**\n * Individual selectable item in a Picker.\n */\nclass PickerItem extends React.Component<{\n  label: string,\n  value?: any,\n  color?: ColorPropType,\n  testID?: string,\n}> {\n  static propTypes = {\n    /**\n     * Text to display for this item.\n     */\n    label: PropTypes.string.isRequired,\n    /**\n     * The value to be passed to picker's `onValueChange` callback when\n     * this item is selected. Can be a string or an integer.\n     */\n    value: PropTypes.any,\n    /**\n     * Color of this item's text.\n     * @platform android\n     */\n    color: ColorPropType,\n    /**\n     * Used to locate the item in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    // The items are not rendered directly\n    throw null;\n  }\n}\n\n/**\n * Renders the native picker component on iOS and Android. Example:\n *\n *     <Picker\n *       selectedValue={this.state.language}\n *       onValueChange={(itemValue, itemIndex) => this.setState({language: itemValue})}>\n *       <Picker.Item label=\"Java\" value=\"java\" />\n *       <Picker.Item label=\"JavaScript\" value=\"js\" />\n *     </Picker>\n */\nclass Picker extends React.Component<{\n  style?: $FlowFixMe,\n  selectedValue?: any,\n  onValueChange?: Function,\n  enabled?: boolean,\n  mode?: 'dialog' | 'dropdown',\n  itemStyle?: $FlowFixMe,\n  prompt?: string,\n  testID?: string,\n}> {\n  /**\n   * On Android, display the options in a dialog.\n   */\n  static MODE_DIALOG = MODE_DIALOG;\n\n  /**\n   * On Android, display the options in a dropdown (this is the default).\n   */\n  static MODE_DROPDOWN = MODE_DROPDOWN;\n\n  static Item = PickerItem;\n\n  static defaultProps = {\n    mode: MODE_DIALOG,\n  };\n\n  // $FlowFixMe(>=0.41.0)\n  static propTypes = {\n    ...ViewPropTypes,\n    style: pickerStyleType,\n    /**\n     * Value matching value of one of the items. Can be a string or an integer.\n     */\n    selectedValue: PropTypes.any,\n    /**\n     * Callback for when an item is selected. This is called with the following parameters:\n     *   - `itemValue`: the `value` prop of the item that was selected\n     *   - `itemPosition`: the index of the selected item in this picker\n     */\n    onValueChange: PropTypes.func,\n    /**\n     * If set to false, the picker will be disabled, i.e. the user will not be able to make a\n     * selection.\n     * @platform android\n     */\n    enabled: PropTypes.bool,\n    /**\n     * On Android, specifies how to display the selection items when the user taps on the picker:\n     *\n     *   - 'dialog': Show a modal dialog. This is the default.\n     *   - 'dropdown': Shows a dropdown anchored to the picker view\n     *\n     * @platform android\n     */\n    mode: PropTypes.oneOf(['dialog', 'dropdown']),\n    /**\n     * Style to apply to each of the item labels.\n     * @platform ios\n     */\n    itemStyle: itemStylePropType,\n    /**\n     * Prompt string for this picker, used on Android in dialog mode as the title of the dialog.\n     * @platform android\n     */\n    prompt: PropTypes.string,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    if (Platform.OS === 'ios') {\n      // $FlowFixMe found when converting React.createClass to ES6\n      return <PickerIOS {...this.props}>{this.props.children}</PickerIOS>;\n    } else if (Platform.OS === 'android') {\n      return (\n        // $FlowFixMe found when converting React.createClass to ES6\n        <PickerAndroid {...this.props}>{this.props.children}</PickerAndroid>\n      );\n    } else {\n      return <UnimplementedView />;\n    }\n  }\n}\n\nmodule.exports = Picker;\n"]}