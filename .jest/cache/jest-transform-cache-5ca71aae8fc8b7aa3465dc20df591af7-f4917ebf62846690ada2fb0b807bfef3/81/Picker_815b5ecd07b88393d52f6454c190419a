f196a2b80f62ba384ed575e4c81c86a8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var ColorPropType = require('ColorPropType');

var PickerIOS = require('PickerIOS');

var PickerAndroid = require('PickerAndroid');

var Platform = require('Platform');

var React = require('React');

var PropTypes = require('prop-types');

var StyleSheetPropType = require('StyleSheetPropType');

var TextStylePropTypes = require('TextStylePropTypes');

var UnimplementedView = require('UnimplementedView');

var ViewPropTypes = require('ViewPropTypes');

var ViewStylePropTypes = require('ViewStylePropTypes');

var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
var pickerStyleType = StyleSheetPropType((0, _objectSpread2.default)({}, ViewStylePropTypes, {
  color: ColorPropType
}));
var MODE_DIALOG = 'dialog';
var MODE_DROPDOWN = 'dropdown';

var PickerItem = function (_React$Component) {
  (0, _inherits2.default)(PickerItem, _React$Component);

  function PickerItem() {
    (0, _classCallCheck2.default)(this, PickerItem);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PickerItem).apply(this, arguments));
  }

  (0, _createClass2.default)(PickerItem, [{
    key: "render",
    value: function render() {
      throw null;
    }
  }]);
  return PickerItem;
}(React.Component);

(0, _defineProperty2.default)(PickerItem, "propTypes", {
  label: PropTypes.string.isRequired,
  value: PropTypes.any,
  color: ColorPropType,
  testID: PropTypes.string
});

var Picker = function (_React$Component2) {
  (0, _inherits2.default)(Picker, _React$Component2);

  function Picker() {
    (0, _classCallCheck2.default)(this, Picker);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Picker).apply(this, arguments));
  }

  (0, _createClass2.default)(Picker, [{
    key: "render",
    value: function render() {
      if (Platform.OS === 'ios') {
        return React.createElement(PickerIOS, this.props, this.props.children);
      } else if (Platform.OS === 'android') {
        return React.createElement(PickerAndroid, this.props, this.props.children);
      } else {
        return React.createElement(UnimplementedView, null);
      }
    }
  }]);
  return Picker;
}(React.Component);

(0, _defineProperty2.default)(Picker, "MODE_DIALOG", MODE_DIALOG);
(0, _defineProperty2.default)(Picker, "MODE_DROPDOWN", MODE_DROPDOWN);
(0, _defineProperty2.default)(Picker, "Item", PickerItem);
(0, _defineProperty2.default)(Picker, "defaultProps", {
  mode: MODE_DIALOG
});
(0, _defineProperty2.default)(Picker, "propTypes", (0, _objectSpread2.default)({}, ViewPropTypes, {
  style: pickerStyleType,
  selectedValue: PropTypes.any,
  onValueChange: PropTypes.func,
  enabled: PropTypes.bool,
  mode: PropTypes.oneOf(['dialog', 'dropdown']),
  itemStyle: itemStylePropType,
  prompt: PropTypes.string,
  testID: PropTypes.string
}));
module.exports = Picker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,