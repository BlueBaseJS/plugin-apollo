{"version":3,"sources":["ImageProps.js"],"names":["EdgeInsetsPropType","require","ImageSourcePropType","ImageStylePropTypes","PropTypes","StyleSheetPropType","module","exports","style","source","defaultSource","oneOfType","shape","uri","string","width","number","height","scale","accessible","bool","accessibilityLabel","node","blurRadius","capInsets","resizeMethod","oneOf","resizeMode","testID","onLayout","func","onLoadStart","onProgress","onError","onPartialLoad","onLoad","onLoadEnd"],"mappings":"AAUA;;AAEA,IAAMA,kBAAkB,GAAGC,OAAO,CAAC,oBAAD,CAAlC;;AACA,IAAMC,mBAAmB,GAAGD,OAAO,CAAC,qBAAD,CAAnC;;AACA,IAAME,mBAAmB,GAAGF,OAAO,CAAC,qBAAD,CAAnC;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAMI,kBAAkB,GAAGJ,OAAO,CAAC,oBAAD,CAAlC;;AA4DAK,MAAM,CAACC,OAAP,GAAiB;AAIfC,EAAAA,KAAK,EAAEH,kBAAkB,CAACF,mBAAD,CAJV;AAUfM,EAAAA,MAAM,EAAEP,mBAVO;AAgBfQ,EAAAA,aAAa,EAAEN,SAAS,CAACO,SAAV,CAAoB,CACjCP,SAAS,CAACQ,KAAV,CAAgB;AACdC,IAAAA,GAAG,EAAET,SAAS,CAACU,MADD;AAEdC,IAAAA,KAAK,EAAEX,SAAS,CAACY,MAFH;AAGdC,IAAAA,MAAM,EAAEb,SAAS,CAACY,MAHJ;AAIdE,IAAAA,KAAK,EAAEd,SAAS,CAACY;AAJH,GAAhB,CADiC,EAOjCZ,SAAS,CAACY,MAPuB,CAApB,CAhBA;AA8BfG,EAAAA,UAAU,EAAEf,SAAS,CAACgB,IA9BP;AAqCfC,EAAAA,kBAAkB,EAAEjB,SAAS,CAACkB,IArCf;AA2CfC,EAAAA,UAAU,EAAEnB,SAAS,CAACY,MA3CP;AA+CfQ,EAAAA,SAAS,EAAExB,kBA/CI;AAmDfyB,EAAAA,YAAY,EAAErB,SAAS,CAACsB,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAAhB,CAnDC;AA0DfC,EAAAA,UAAU,EAAEvB,SAAS,CAACsB,KAAV,CAAgB,CAC1B,OAD0B,EAE1B,SAF0B,EAG1B,SAH0B,EAI1B,QAJ0B,EAK1B,QAL0B,CAAhB,CA1DG;AAuEfE,EAAAA,MAAM,EAAExB,SAAS,CAACU,MAvEH;AA8Efe,EAAAA,QAAQ,EAAEzB,SAAS,CAAC0B,IA9EL;AAoFfC,EAAAA,WAAW,EAAE3B,SAAS,CAAC0B,IApFR;AA0FfE,EAAAA,UAAU,EAAE5B,SAAS,CAAC0B,IA1FP;AAgGfG,EAAAA,OAAO,EAAE7B,SAAS,CAAC0B,IAhGJ;AAsGfI,EAAAA,aAAa,EAAE9B,SAAS,CAAC0B,IAtGV;AA4GfK,EAAAA,MAAM,EAAE/B,SAAS,CAAC0B,IA5GH;AAkHfM,EAAAA,SAAS,EAAEhC,SAAS,CAAC0B;AAlHN,CAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst ImageSourcePropType = require('ImageSourcePropType');\nconst ImageStylePropTypes = require('ImageStylePropTypes');\nconst PropTypes = require('prop-types');\nconst StyleSheetPropType = require('StyleSheetPropType');\n\nimport type {DimensionValue} from 'StyleSheetTypes';\nimport type {ViewProps} from 'ViewPropTypes';\nimport type {ImageSource} from 'ImageSource';\nimport type {EdgeInsetsProp} from 'EdgeInsetsPropType';\nimport type {SyntheticEvent} from 'CoreEventTypes';\nimport type {ImageStyleProp} from 'StyleSheet';\n\ntype OnLoadEvent = SyntheticEvent<\n  $ReadOnly<{|\n    // Only on Android\n    uri?: string,\n\n    source: $ReadOnly<{|\n      width: number,\n      height: number,\n      url: string,\n    |}>,\n  |}>,\n>;\n\ntype IOSImageProps = $ReadOnly<{|\n  defaultSource?: ?ImageSource,\n  onPartialLoad?: ?() => void,\n  onProgress?: ?(\n    event: SyntheticEvent<$ReadOnly<{|loaded: number, total: number|}>>,\n  ) => void,\n|}>;\n\ntype AndroidImageProps = $ReadOnly<{|\n  loadingIndicatorSource?: ?(number | $ReadOnly<{|uri: string|}>),\n  progressiveRenderingEnabled?: ?boolean,\n  fadeDuration?: ?number,\n|}>;\n\nexport type ImageProps = {|\n  ...ViewProps,\n  ...IOSImageProps,\n  ...AndroidImageProps,\n  blurRadius?: number,\n  capInsets?: ?EdgeInsetsProp,\n\n  onError?: ?(event: SyntheticEvent<$ReadOnly<{||}>>) => void,\n  onLoad?: ?(event: OnLoadEvent) => void,\n  onLoadEnd?: ?() => void,\n  onLoadStart?: ?() => void,\n  resizeMethod?: ?('auto' | 'resize' | 'scale'),\n  source?: ?ImageSource,\n  style?: ImageStyleProp,\n\n  // Can be set via props or style, for now\n  height?: DimensionValue,\n  width?: DimensionValue,\n  resizeMode?: ?('cover' | 'contain' | 'stretch' | 'repeat' | 'center'),\n\n  src?: empty,\n  children?: empty,\n|};\n\nmodule.exports = {\n  /**\n   * See https://facebook.github.io/react-native/docs/image.html#style\n   */\n  style: StyleSheetPropType(ImageStylePropTypes),\n  /**\n   * The image source (either a remote URL or a local file resource).\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#source\n   */\n  source: ImageSourcePropType,\n  /**\n   * A static image to display while loading the image source.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#defaultsource\n   */\n  defaultSource: PropTypes.oneOfType([\n    PropTypes.shape({\n      uri: PropTypes.string,\n      width: PropTypes.number,\n      height: PropTypes.number,\n      scale: PropTypes.number,\n    }),\n    PropTypes.number,\n  ]),\n  /**\n   * When true, indicates the image is an accessibility element.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#accessible\n   */\n  accessible: PropTypes.bool,\n  /**\n   * The text that's read by the screen reader when the user interacts with\n   * the image.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#accessibilitylabel\n   */\n  accessibilityLabel: PropTypes.node,\n  /**\n   * blurRadius: the blur radius of the blur filter added to the image\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#blurradius\n   */\n  blurRadius: PropTypes.number,\n  /**\n   * See https://facebook.github.io/react-native/docs/image.html#capinsets\n   */\n  capInsets: EdgeInsetsPropType,\n  /**\n   * See https://facebook.github.io/react-native/docs/image.html#resizemethod\n   */\n  resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),\n  /**\n   * Determines how to resize the image when the frame doesn't match the raw\n   * image dimensions.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#resizemode\n   */\n  resizeMode: PropTypes.oneOf([\n    'cover',\n    'contain',\n    'stretch',\n    'repeat',\n    'center',\n  ]),\n  /**\n   * A unique identifier for this element to be used in UI Automation\n   * testing scripts.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#testid\n   */\n  testID: PropTypes.string,\n  /**\n   * Invoked on mount and layout changes with\n   * `{nativeEvent: {layout: {x, y, width, height}}}`.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#onlayout\n   */\n  onLayout: PropTypes.func,\n  /**\n   * Invoked on load start.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#onloadstart\n   */\n  onLoadStart: PropTypes.func,\n  /**\n   * Invoked on download progress with `{nativeEvent: {loaded, total}}`.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#onprogress\n   */\n  onProgress: PropTypes.func,\n  /**\n   * Invoked on load error with `{nativeEvent: {error}}`.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#onerror\n   */\n  onError: PropTypes.func,\n  /**\n   * Invoked when a partial load of the image is complete.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#onpartialload\n   */\n  onPartialLoad: PropTypes.func,\n  /**\n   * Invoked when load completes successfully.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#onload\n   */\n  onLoad: PropTypes.func,\n  /**\n   * Invoked when load either succeeds or fails.\n   *\n   * See https://facebook.github.io/react-native/docs/image.html#onloadend\n   */\n  onLoadEnd: PropTypes.func,\n};\n"]}