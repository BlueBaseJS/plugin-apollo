f996dced41192990dfcf5f3b874dd3c4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var react_apollo_1 = require("react-apollo");

var core_1 = require("@bluebase/core");

var apollo_client_1 = require("apollo-client");

var apollo_link_1 = require("apollo-link");

var apollo_link_http_1 = require("apollo-link-http");

var apollo_cache_inmemory_1 = require("apollo-cache-inmemory");

var withApolloProvider_1 = tslib_1.__importDefault(require("./withApolloProvider"));

exports.default = core_1.createPlugin({
  description: 'üåç A BlueBase Plugin that integrates Apollo GraphQL Client',
  key: '@bluebase/plugin-apollo',
  name: 'Apollo Plugin',
  version: '1.0.0',
  components: {
    ApolloConsumer: react_apollo_1.ApolloConsumer,
    GraphqlMutation: react_apollo_1.Mutation,
    GraphqlQuery: react_apollo_1.Query,
    GraphqlSubscription: react_apollo_1.Subscription
  },
  defaultConfigs: {
    'plugin.apollo.clientOptions': {},
    'plugin.apollo.httpLinkOptions': {}
  },
  filters: {
    'bluebase.boot.end': function bluebaseBootEnd(bootOptions, _ctx, BB) {
      var httpLinkOptions, clientOptions, httpLink, links, cache, client;
      return _regenerator.default.async(function bluebaseBootEnd$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');
              clientOptions = BB.Configs.getValue('plugins.apollo.clientOptions');

              if (httpLinkOptions) {
                _context.next = 4;
                break;
              }

              throw new Error('HTTP Link URI not provided to Apollo');

            case 4:
              httpLink = new apollo_link_http_1.HttpLink(httpLinkOptions);
              _context.next = 7;
              return _regenerator.default.awrap(BB.Filters.run('plugin.apollo.links', [httpLink]));

            case 7:
              links = _context.sent;
              _context.next = 10;
              return _regenerator.default.awrap(BB.Filters.run('plugin.apollo.cache', new apollo_cache_inmemory_1.InMemoryCache()));

            case 10:
              cache = _context.sent;
              client = new apollo_client_1.ApolloClient((0, _extends2.default)({
                cache: cache,
                link: apollo_link_1.ApolloLink.from(links)
              }, clientOptions));
              BB.Components.addHocs('BlueBaseContent', withApolloProvider_1.default(client));
              return _context.abrupt("return", bootOptions);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLGNBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUVBLElBQUEsZUFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUE7O0FBQ0EsSUFBQSxhQUFBLEdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQTs7QUFDQSxJQUFBLGtCQUFBLEdBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUE7O0FBQ0EsSUFBQSx1QkFBQSxHQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBOztBQUNBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBLENBQUE7O0FBRUEsT0FBQSxDQUFBLE9BQUEsR0FBZSxNQUFBLENBQUEsWUFBQSxDQUFhO0FBQzNCLEVBQUEsV0FBVyxFQUFFLDREQURjO0FBRTNCLEVBQUEsR0FBRyxFQUFFLHlCQUZzQjtBQUczQixFQUFBLElBQUksRUFBRSxlQUhxQjtBQUkzQixFQUFBLE9BQU8sRUFBRSxPQUprQjtBQU0zQixFQUFBLFVBQVUsRUFBRTtBQUNYLElBQUEsY0FBYyxFQUFkLGNBQUEsQ0FBQSxjQURXO0FBRVgsSUFBQSxlQUFlLEVBQUUsY0FBQSxDQUFBLFFBRk47QUFHWCxJQUFBLFlBQVksRUFBRSxjQUFBLENBQUEsS0FISDtBQUlYLElBQUEsbUJBQW1CLEVBQUUsY0FBQSxDQUFBO0FBSlYsR0FOZTtBQVkzQixFQUFBLGNBQWMsRUFBRTtBQUNmLG1DQUErQixFQURoQjtBQUVmLHFDQUFpQztBQUZsQixHQVpXO0FBZ0IzQixFQUFBLE9BQU8sRUFBRTtBQUNSLHlCQUFxQix5QkFBTyxXQUFQLEVBQWlDLElBQWpDLEVBQTRDLEVBQTVDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNkLGNBQUEsZUFEYyxHQUNJLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixnQ0FBcEIsQ0FESjtBQUVkLGNBQUEsYUFGYyxHQUVFLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQiw4QkFBcEIsQ0FGRjs7QUFBQSxrQkFHZixlQUhlO0FBQUE7QUFBQTtBQUFBOztBQUFBLG9CQUliLElBQUksS0FBSixDQUFVLHNDQUFWLENBSmE7O0FBQUE7QUFPZCxjQUFBLFFBUGMsR0FPSCxJQUFJLGtCQUFBLENBQUEsUUFBSixDQUFhLGVBQWIsQ0FQRztBQUFBO0FBQUEsZ0RBUUEsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUscUJBQWYsRUFBc0MsQ0FBQyxRQUFELENBQXRDLENBUkE7O0FBQUE7QUFRZCxjQUFBLEtBUmM7QUFBQTtBQUFBLGdEQVNBLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLHFCQUFmLEVBQXNDLElBQUksdUJBQUEsQ0FBQSxhQUFKLEVBQXRDLENBVEE7O0FBQUE7QUFTZCxjQUFBLEtBVGM7QUFXZCxjQUFBLE1BWGMsR0FXYSxJQUFJLGVBQUEsQ0FBQSxZQUFKLENBQWdCLHVCQUFBO0FBQ2hELGdCQUFBLEtBQUssRUFBTCxLQURnRDtBQUVoRCxnQkFBQSxJQUFJLEVBQUUsYUFBQSxDQUFBLFVBQUEsQ0FBVyxJQUFYLENBQWdCLEtBQWhCO0FBRjBDLGVBQUEsRUFHN0MsYUFINkMsQ0FBaEIsQ0FYYjtBQWlCcEIsY0FBQSxFQUFFLENBQUMsVUFBSCxDQUFjLE9BQWQsQ0FBc0IsaUJBQXRCLEVBQXlDLG9CQUFBLENBQUEsT0FBQSxDQUFtQixNQUFuQixDQUF6QztBQWpCb0IsK0NBa0JiLFdBbEJhOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRGI7QUFoQmtCLENBQWIsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwb2xsb0NvbnN1bWVyLCBNdXRhdGlvbiwgUXVlcnksIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3JlYWN0LWFwb2xsbyc7XG5pbXBvcnQgeyBCbHVlQmFzZSwgQm9vdE9wdGlvbnMsIGNyZWF0ZVBsdWdpbiB9IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcblxuaW1wb3J0IHsgQXBvbGxvQ2xpZW50IH0gZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5pbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSAnYXBvbGxvLWxpbmsnO1xuaW1wb3J0IHsgSHR0cExpbmsgfSBmcm9tICdhcG9sbG8tbGluay1odHRwJztcbmltcG9ydCB7IEluTWVtb3J5Q2FjaGUgfSBmcm9tICdhcG9sbG8tY2FjaGUtaW5tZW1vcnknO1xuaW1wb3J0IHdpdGhBcG9sbG9Qcm92aWRlciBmcm9tICcuL3dpdGhBcG9sbG9Qcm92aWRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVBsdWdpbih7XG5cdGRlc2NyaXB0aW9uOiAn8J+MjSBBIEJsdWVCYXNlIFBsdWdpbiB0aGF0IGludGVncmF0ZXMgQXBvbGxvIEdyYXBoUUwgQ2xpZW50Jyxcblx0a2V5OiAnQGJsdWViYXNlL3BsdWdpbi1hcG9sbG8nLFxuXHRuYW1lOiAnQXBvbGxvIFBsdWdpbicsXG5cdHZlcnNpb246ICcxLjAuMCcsXG5cblx0Y29tcG9uZW50czoge1xuXHRcdEFwb2xsb0NvbnN1bWVyLFxuXHRcdEdyYXBocWxNdXRhdGlvbjogTXV0YXRpb24sXG5cdFx0R3JhcGhxbFF1ZXJ5OiBRdWVyeSxcblx0XHRHcmFwaHFsU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25cblx0fSxcblx0ZGVmYXVsdENvbmZpZ3M6IHtcblx0XHQncGx1Z2luLmFwb2xsby5jbGllbnRPcHRpb25zJzoge30sXG5cdFx0J3BsdWdpbi5hcG9sbG8uaHR0cExpbmtPcHRpb25zJzoge31cblx0fSxcblx0ZmlsdGVyczoge1xuXHRcdCdibHVlYmFzZS5ib290LmVuZCc6IGFzeW5jIChib290T3B0aW9uczogQm9vdE9wdGlvbnMsIF9jdHg6IGFueSwgQkI6IEJsdWVCYXNlKSA9PiB7XG5cdFx0XHRjb25zdCBodHRwTGlua09wdGlvbnMgPSBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnKTtcblx0XHRcdGNvbnN0IGNsaWVudE9wdGlvbnMgPSBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5jbGllbnRPcHRpb25zJyk7XG5cdFx0XHRpZiAoIWh0dHBMaW5rT3B0aW9ucykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0hUVFAgTGluayBVUkkgbm90IHByb3ZpZGVkIHRvIEFwb2xsbycpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBodHRwTGluayA9IG5ldyBIdHRwTGluayhodHRwTGlua09wdGlvbnMpO1xuXHRcdFx0Y29uc3QgbGlua3MgPSBhd2FpdCBCQi5GaWx0ZXJzLnJ1bigncGx1Z2luLmFwb2xsby5saW5rcycsIFtodHRwTGlua10pO1xuXHRcdFx0Y29uc3QgY2FjaGUgPSBhd2FpdCBCQi5GaWx0ZXJzLnJ1bigncGx1Z2luLmFwb2xsby5jYWNoZScsIG5ldyBJbk1lbW9yeUNhY2hlKCkpO1xuXG5cdFx0XHRjb25zdCBjbGllbnQ6IEFwb2xsb0NsaWVudDx7fT4gPSBuZXcgQXBvbGxvQ2xpZW50KHtcblx0XHRcdFx0Y2FjaGUsXG5cdFx0XHRcdGxpbms6IEFwb2xsb0xpbmsuZnJvbShsaW5rcyksXG5cdFx0XHRcdC4uLmNsaWVudE9wdGlvbnNcblx0XHRcdH0pO1xuXG5cdFx0XHRCQi5Db21wb25lbnRzLmFkZEhvY3MoJ0JsdWVCYXNlQ29udGVudCcsIHdpdGhBcG9sbG9Qcm92aWRlcihjbGllbnQpKTtcblx0XHRcdHJldHVybiBib290T3B0aW9ucztcblx0XHR9LFxuXHR9XG59KTtcbiJdfQ==