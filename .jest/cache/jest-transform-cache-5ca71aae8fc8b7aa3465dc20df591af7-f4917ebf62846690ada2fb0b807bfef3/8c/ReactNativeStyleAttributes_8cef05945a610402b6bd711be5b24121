df77131515d284e3148741a73bbebeb2
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var ImageStylePropTypes = require('ImageStylePropTypes');

var TextStylePropTypes = require('TextStylePropTypes');

var ViewStylePropTypes = require('ViewStylePropTypes');

var processColor = require('processColor');

var processTransform = require('processTransform');

var sizesDiffer = require('sizesDiffer');

var ReactNativeStyleAttributes = {};

for (var _i = 0, _Object$keys = Object.keys((0, _objectSpread2.default)({}, ViewStylePropTypes, TextStylePropTypes, ImageStylePropTypes)); _i < _Object$keys.length; _i++) {
  var attributeName = _Object$keys[_i];
  ReactNativeStyleAttributes[attributeName] = true;
}

ReactNativeStyleAttributes.transform = {
  process: processTransform
};
ReactNativeStyleAttributes.shadowOffset = {
  diff: sizesDiffer
};
var colorAttributes = {
  process: processColor
};
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.borderStartColor = colorAttributes;
ReactNativeStyleAttributes.borderEndColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;
module.exports = ReactNativeStyleAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmpzIl0sIm5hbWVzIjpbIkltYWdlU3R5bGVQcm9wVHlwZXMiLCJyZXF1aXJlIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwicHJvY2Vzc0NvbG9yIiwicHJvY2Vzc1RyYW5zZm9ybSIsInNpemVzRGlmZmVyIiwiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJPYmplY3QiLCJrZXlzIiwiYXR0cmlidXRlTmFtZSIsInRyYW5zZm9ybSIsInByb2Nlc3MiLCJzaGFkb3dPZmZzZXQiLCJkaWZmIiwiY29sb3JBdHRyaWJ1dGVzIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJDb2xvciIsImJvcmRlckxlZnRDb2xvciIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlclN0YXJ0Q29sb3IiLCJib3JkZXJFbmRDb2xvciIsImNvbG9yIiwic2hhZG93Q29sb3IiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwidGludENvbG9yIiwidGV4dFNoYWRvd0NvbG9yIiwib3ZlcmxheUNvbG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7OztBQUVBLElBQU1BLG1CQUFtQixHQUFHQyxPQUFPLENBQUMscUJBQUQsQ0FBbkM7O0FBQ0EsSUFBTUMsa0JBQWtCLEdBQUdELE9BQU8sQ0FBQyxvQkFBRCxDQUFsQzs7QUFDQSxJQUFNRSxrQkFBa0IsR0FBR0YsT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUVBLElBQU1HLFlBQVksR0FBR0gsT0FBTyxDQUFDLGNBQUQsQ0FBNUI7O0FBQ0EsSUFBTUksZ0JBQWdCLEdBQUdKLE9BQU8sQ0FBQyxrQkFBRCxDQUFoQzs7QUFDQSxJQUFNSyxXQUFXLEdBQUdMLE9BQU8sQ0FBQyxhQUFELENBQTNCOztBQUVBLElBQU1NLDBCQUEwQixHQUFHLEVBQW5DOztBQUVBLGdDQUE0QkMsTUFBTSxDQUFDQyxJQUFQLGlDQUN2Qk4sa0JBRHVCLEVBRXZCRCxrQkFGdUIsRUFHdkJGLG1CQUh1QixFQUE1QixrQ0FJSTtBQUpDLE1BQU1VLGFBQWEsbUJBQW5CO0FBS0hILEVBQUFBLDBCQUEwQixDQUFDRyxhQUFELENBQTFCLEdBQTRDLElBQTVDO0FBQ0Q7O0FBRURILDBCQUEwQixDQUFDSSxTQUEzQixHQUF1QztBQUFDQyxFQUFBQSxPQUFPLEVBQUVQO0FBQVYsQ0FBdkM7QUFDQUUsMEJBQTBCLENBQUNNLFlBQTNCLEdBQTBDO0FBQUNDLEVBQUFBLElBQUksRUFBRVI7QUFBUCxDQUExQztBQUVBLElBQU1TLGVBQWUsR0FBRztBQUFDSCxFQUFBQSxPQUFPLEVBQUVSO0FBQVYsQ0FBeEI7QUFDQUcsMEJBQTBCLENBQUNTLGVBQTNCLEdBQTZDRCxlQUE3QztBQUNBUiwwQkFBMEIsQ0FBQ1UsaUJBQTNCLEdBQStDRixlQUEvQztBQUNBUiwwQkFBMEIsQ0FBQ1csV0FBM0IsR0FBeUNILGVBQXpDO0FBQ0FSLDBCQUEwQixDQUFDWSxlQUEzQixHQUE2Q0osZUFBN0M7QUFDQVIsMEJBQTBCLENBQUNhLGdCQUEzQixHQUE4Q0wsZUFBOUM7QUFDQVIsMEJBQTBCLENBQUNjLGNBQTNCLEdBQTRDTixlQUE1QztBQUNBUiwwQkFBMEIsQ0FBQ2UsZ0JBQTNCLEdBQThDUCxlQUE5QztBQUNBUiwwQkFBMEIsQ0FBQ2dCLGNBQTNCLEdBQTRDUixlQUE1QztBQUNBUiwwQkFBMEIsQ0FBQ2lCLEtBQTNCLEdBQW1DVCxlQUFuQztBQUNBUiwwQkFBMEIsQ0FBQ2tCLFdBQTNCLEdBQXlDVixlQUF6QztBQUNBUiwwQkFBMEIsQ0FBQ21CLG1CQUEzQixHQUFpRFgsZUFBakQ7QUFDQVIsMEJBQTBCLENBQUNvQixTQUEzQixHQUF1Q1osZUFBdkM7QUFDQVIsMEJBQTBCLENBQUNxQixlQUEzQixHQUE2Q2IsZUFBN0M7QUFDQVIsMEJBQTBCLENBQUNzQixZQUEzQixHQUEwQ2QsZUFBMUM7QUFFQWUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsMEJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0IHN0cmljdC1sb2NhbFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEltYWdlU3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdJbWFnZVN0eWxlUHJvcFR5cGVzJyk7XG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdUZXh0U3R5bGVQcm9wVHlwZXMnKTtcbmNvbnN0IFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJ1ZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBwcm9jZXNzQ29sb3IgPSByZXF1aXJlKCdwcm9jZXNzQ29sb3InKTtcbmNvbnN0IHByb2Nlc3NUcmFuc2Zvcm0gPSByZXF1aXJlKCdwcm9jZXNzVHJhbnNmb3JtJyk7XG5jb25zdCBzaXplc0RpZmZlciA9IHJlcXVpcmUoJ3NpemVzRGlmZmVyJyk7XG5cbmNvbnN0IFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzID0ge307XG5cbmZvciAoY29uc3QgYXR0cmlidXRlTmFtZSBvZiBPYmplY3Qua2V5cyh7XG4gIC4uLlZpZXdTdHlsZVByb3BUeXBlcyxcbiAgLi4uVGV4dFN0eWxlUHJvcFR5cGVzLFxuICAuLi5JbWFnZVN0eWxlUHJvcFR5cGVzLFxufSkpIHtcbiAgUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xufVxuXG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy50cmFuc2Zvcm0gPSB7cHJvY2VzczogcHJvY2Vzc1RyYW5zZm9ybX07XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5zaGFkb3dPZmZzZXQgPSB7ZGlmZjogc2l6ZXNEaWZmZXJ9O1xuXG5jb25zdCBjb2xvckF0dHJpYnV0ZXMgPSB7cHJvY2VzczogcHJvY2Vzc0NvbG9yfTtcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJhY2tncm91bmRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLmJvcmRlckJvdHRvbUNvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJMZWZ0Q29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJSaWdodENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyVG9wQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5ib3JkZXJTdGFydENvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMuYm9yZGVyRW5kQ29sb3IgPSBjb2xvckF0dHJpYnV0ZXM7XG5SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcy5jb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnNoYWRvd0NvbG9yID0gY29sb3JBdHRyaWJ1dGVzO1xuUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMudGV4dERlY29yYXRpb25Db2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnRpbnRDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLnRleHRTaGFkb3dDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLm92ZXJsYXlDb2xvciA9IGNvbG9yQXR0cmlidXRlcztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcztcbiJdfQ==