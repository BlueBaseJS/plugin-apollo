2a2bac08235fc3d11c7c26339c83c542
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../index"));

var withApolloProvider_1 = tslib_1.__importDefault(require("../withApolloProvider"));

test('Plugin correctly registered', function _callee() {
  var BB;
  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          expect(BB.Plugins.has('plugin-apollo')).toBeTruthy();

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('Plugin should throw error if httpLinkOptions config is not given', function _callee2() {
  var BB, message, _jest$mock, HttpLink;

  return _regenerator.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context2.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          _context2.prev = 3;
          _context2.next = 6;
          return _regenerator.default.awrap(BB.boot());

        case 6:
          _context2.next = 11;
          break;

        case 8:
          _context2.prev = 8;
          _context2.t0 = _context2["catch"](3);
          message = _context2.t0.message;

        case 11:
          _jest$mock = jest.mock('apollo-link-http'), HttpLink = _jest$mock.HttpLink;
          BB.Filters.run("bluebase.boot.end", HttpLink);
          expect(message).toBe('HTTP Link URI not provided to Apollo');

        case 14:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[3, 8]]);
});
test('Plugin correctly registered', function _callee3() {
  var BB, _jest$mock2, HttpLink;

  return _regenerator.default.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          BB = new core_1.BlueBase();
          _jest$mock2 = jest.mock('apollo-link-http'), HttpLink = _jest$mock2.HttpLink;
          _context3.next = 4;
          return _regenerator.default.awrap(BB.Filters.run("bluebase.boot.end", HttpLink));

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  });
});
var client;
test('Plugin should be correctly registered', function _callee4() {
  return _regenerator.default.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          withApolloProvider_1.default(client);

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  });
});
describe('Apollo Plugin test', function () {
  it('Test with Apollo Config', function _callee5() {
    var BB, httpLinkOptions;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            BB = new core_1.BlueBase();
            _context5.next = 3;
            return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

          case 3:
            _context5.next = 5;
            return _regenerator.default.awrap(BB.Configs.setValue('plugins.apollo.httpLinkOptions', {
              uri: 'http://graphql'
            }));

          case 5:
            BB.boot();
            console.log('Plugins====>', BB.Configs.getValue('plugins.apollo.httpLinkOptions'));
            httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');
            expect(httpLinkOptions).toEqual({
              uri: 'http://graphql'
            });

          case 9:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvX190ZXN0c19fL2luZGV4LnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBLENBQUE7O0FBVUEsSUFBSSxDQUFDLDZCQUFELEVBQWdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUM3QixVQUFBLEVBRDZCLEdBQ3hCLElBQUksTUFBQSxDQUFBLFFBQUosRUFEd0I7QUFBQTtBQUFBLDRDQUU3QixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBQSxDQUFBLE9BQXBCLENBRjZCOztBQUFBO0FBS25DLFVBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLGVBQWYsQ0FBRCxDQUFOLENBQXdDLFVBQXhDOztBQUxtQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFoQyxDQUFKO0FBUUEsSUFBSSxDQUFDLGtFQUFELEVBQXFFO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFbEUsVUFBQSxFQUZrRSxHQUU3RCxJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRjZEO0FBQUE7QUFBQSw0Q0FJbEUsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUprRTs7QUFBQTtBQUFBO0FBQUE7QUFBQSw0Q0FRakUsRUFBRSxDQUFDLElBQUgsRUFSaUU7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQVd2RSxVQUFBLE9BQU8sR0FBRyxhQUFNLE9BQWhCOztBQVh1RTtBQUFBLHVCQWFoRCxJQUFJLENBQUMsSUFBTCxDQUFVLGtCQUFWLENBYmdELEVBYWpFLFFBYmlFLGNBYWpFLFFBYmlFO0FBY3hFLFVBQUEsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsbUJBQWYsRUFBbUMsUUFBbkM7QUFFQSxVQUFBLE1BQU0sQ0FBQyxPQUFELENBQU4sQ0FBZ0IsSUFBaEIsQ0FBcUIsc0NBQXJCOztBQWhCd0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBckUsQ0FBSjtBQW1CQSxJQUFJLENBQUMsNkJBQUQsRUFBZ0M7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUM3QixVQUFBLEVBRDZCLEdBQ3hCLElBQUksTUFBQSxDQUFBLFFBQUosRUFEd0I7QUFBQSx3QkFFWCxJQUFJLENBQUMsSUFBTCxDQUFVLGtCQUFWLENBRlcsRUFFNUIsUUFGNEIsZUFFNUIsUUFGNEI7QUFBQTtBQUFBLDRDQUc3QixFQUFFLENBQUMsT0FBSCxDQUFXLEdBQVgsQ0FBZSxtQkFBZixFQUFtQyxRQUFuQyxDQUg2Qjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFoQyxDQUFKO0FBaUJBLElBQUksTUFBSjtBQUNBLElBQUksQ0FBQyx1Q0FBRCxFQUEwQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRTNDLFVBQUEsb0JBQUEsQ0FBQSxPQUFBLENBQW1CLE1BQW5COztBQUYyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUExQyxDQUFKO0FBVUEsUUFBUSxDQUFDLG9CQUFELEVBQXVCLFlBQUs7QUFDbkMsRUFBQSxFQUFFLENBQUMseUJBQUQsRUFBNEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRXZCLFlBQUEsRUFGdUIsR0FFbEIsSUFBSSxNQUFBLENBQUEsUUFBSixFQUZrQjtBQUFBO0FBQUEsOENBR3ZCLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixPQUFBLENBQUEsT0FBcEIsQ0FIdUI7O0FBQUE7QUFBQTtBQUFBLDhDQU12QixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsZ0NBQXBCLEVBQXNEO0FBQUUsY0FBQSxHQUFHLEVBQUU7QUFBUCxhQUF0RCxDQU51Qjs7QUFBQTtBQVE3QixZQUFBLEVBQUUsQ0FBQyxJQUFIO0FBQ0EsWUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLGNBQVosRUFBNEIsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLGdDQUFwQixDQUE1QjtBQUNNLFlBQUEsZUFWdUIsR0FVTCxFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsZ0NBQXBCLENBVks7QUFXN0IsWUFBQSxNQUFNLENBQUMsZUFBRCxDQUFOLENBQXdCLE9BQXhCLENBQWdDO0FBQUMsY0FBQSxHQUFHLEVBQUU7QUFBTixhQUFoQzs7QUFYNkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBNUIsQ0FBRjtBQWNBLENBZk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsdWVCYXNlLCBcblx0Ly8gQmx1ZUJhc2VBcHAgXG59IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCBQbHVnaW4gZnJvbSAnLi4vaW5kZXgnO1xuLy8gaW1wb3J0IHsgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgV2l0aEFwb2xsb1Byb3ZpZGVyIGZyb20gJy4uL3dpdGhBcG9sbG9Qcm92aWRlcic7XG4vLyBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuLy8gaW1wb3J0IHsgd2FpdEZvckVsZW1lbnQgfSBmcm9tICdlbnp5bWUtYXN5bmMtaGVscGVycyc7XG4vLyBpbXBvcnQgeyBIdHRwTGluayB9IGZyb20gJ2Fwb2xsby1saW5rLWh0dHAnO1xuLy8gaW1wb3J0IHsgc2FtcGxlIH0gZnJvbSAnLi4vX19tb2Nrc19fL2luZGV4J1xuXG5cbi8vIGNvbnN0IEN1c3RvbVRleHQgPSAoKSA9PiA8VGV4dD5FdmVyeXRoaW5nIGlzIG9rITwvVGV4dD47XG5cbnRlc3QoJ1BsdWdpbiBjb3JyZWN0bHkgcmVnaXN0ZXJlZCcsIGFzeW5jICgpID0+IHtcblx0Y29uc3QgQkIgPSBuZXcgQmx1ZUJhc2UoKTtcblx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXG4vLyBpbXBvcnQgeyB3YWl0Rm9yRWxlbWVudCB9IGZyb20gJ2VuenltZS1hc3luYy1oZWxwZXJzJztcblx0ZXhwZWN0KEJCLlBsdWdpbnMuaGFzKCdwbHVnaW4tYXBvbGxvJykpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG50ZXN0KCdQbHVnaW4gc2hvdWxkIHRocm93IGVycm9yIGlmIGh0dHBMaW5rT3B0aW9ucyBjb25maWcgaXMgbm90IGdpdmVuJywgYXN5bmMgKCkgPT4ge1xuXG5cdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdFxuXHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG5cdGxldCBtZXNzYWdlO1xuXG5cdHRyeSB7XG5cdFx0YXdhaXQgQkIuYm9vdCgpO1xuXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0bWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG5cdH1cblx0Y29uc3Qge0h0dHBMaW5rfSA6YW55ID0gamVzdC5tb2NrKCdhcG9sbG8tbGluay1odHRwJyk7XG5cdEJCLkZpbHRlcnMucnVuKFwiYmx1ZWJhc2UuYm9vdC5lbmRcIixIdHRwTGluayk7XG5cblx0ZXhwZWN0KG1lc3NhZ2UpLnRvQmUoJ0hUVFAgTGluayBVUkkgbm90IHByb3ZpZGVkIHRvIEFwb2xsbycpO1xufSk7XG5cbnRlc3QoJ1BsdWdpbiBjb3JyZWN0bHkgcmVnaXN0ZXJlZCcsIGFzeW5jICgpID0+IHtcblx0Y29uc3QgQkIgPSBuZXcgQmx1ZUJhc2UoKTtcblx0Y29uc3Qge0h0dHBMaW5rfSA6YW55ID0gamVzdC5tb2NrKCdhcG9sbG8tbGluay1odHRwJyk7XG5cdGF3YWl0IEJCLkZpbHRlcnMucnVuKFwiYmx1ZWJhc2UuYm9vdC5lbmRcIixIdHRwTGluayk7XG5cblx0Ly8gZXhwZWN0KCkudG9CZVRydXRoeSgpO1xuXG59KTtcblxuLy8gY2xhc3MgTW9ja0NsYXNzIHtcbi8vIFx0Y29uc3RydWN0b3IocHVibGljIGlucHV0KSB7XG5cbi8vIFx0fVxuLy8gfVxuXG4vLyBpbnN0YW5jZW9mLmlucHV0ID09PSBcblxubGV0IGNsaWVudDphbnk7XG50ZXN0KCdQbHVnaW4gc2hvdWxkIGJlIGNvcnJlY3RseSByZWdpc3RlcmVkJywgYXN5bmMgKCkgPT4ge1xuXG5cdFx0IFdpdGhBcG9sbG9Qcm92aWRlcihjbGllbnQgYXMgYW55KTtcbn0pO1xuXG4vLyBtaXNlKHJlc29sdmUgPT4gcmVzb2x2ZSgpKSk7XG5cbi8vIFx0Y29uc3Qgd3JhcHBlciA9IG1vdW50KFxuLy8gXHRcdDxCbHVlQmFzZUFwcCBwbHVnaW5zPXtbUGx1Z2luXX0gY29uZmlncz17eyAncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJzogeyB1cmk6ICd3d3cuZ1xuXG5kZXNjcmliZSgnQXBvbGxvIFBsdWdpbiB0ZXN0JywgKCkgPT4ge1xuXHRpdCgnVGVzdCB3aXRoIEFwb2xsbyBDb25maWcnLCBhc3luYyAoKSA9PiB7XG5cblx0XHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRcdGF3YWl0IEJCLlBsdWdpbnMucmVnaXN0ZXIoUGx1Z2luKTtcblx0XHQvLyBBcG9sbG9QbHVnaW4uZ2V0Q2xpZW50KCk7XG5cdFx0Ly9jb25zdCBQbHVnaW5zID0gYXdhaXQgQkIuUGx1Z2lucy5oYXMoUGx1Z2luKTtcblx0XHRhd2FpdCBCQi5Db25maWdzLnNldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnLCB7IHVyaTogJ2h0dHA6Ly9ncmFwaHFsJyB9KTtcblxuXHRcdEJCLmJvb3QoKTtcblx0XHRjb25zb2xlLmxvZygnUGx1Z2lucz09PT0+JywgQkIuQ29uZmlncy5nZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJykpO1xuXHRcdGNvbnN0IGh0dHBMaW5rT3B0aW9ucyA9IEJCLkNvbmZpZ3MuZ2V0VmFsdWUoJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucycpO1xuXHRcdGV4cGVjdChodHRwTGlua09wdGlvbnMpLnRvRXF1YWwoe3VyaTogJ2h0dHA6Ly9ncmFwaHFsJ30pO1xuXG5cdH0pO1xufSk7XG5cbiJdfQ==