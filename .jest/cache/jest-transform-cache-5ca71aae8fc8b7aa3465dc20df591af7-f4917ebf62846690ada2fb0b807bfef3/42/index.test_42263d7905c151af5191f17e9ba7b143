1c478a2eb711026a653db6c9fae6ab99
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../index"));

var withApolloProvider_1 = tslib_1.__importDefault(require("../withApolloProvider"));

var apollo_link_http_1 = require("apollo-link-http");

test('Plugin correctly registered', function _callee() {
  var BB;
  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          console.log('imported{}===>', {
            HttpLink: apollo_link_http_1.HttpLink
          });
          console.log('imported===>', apollo_link_http_1.HttpLink);
          expect(BB.Plugins.has('plugin-apollo')).toBeTruthy();

        case 6:
        case "end":
          return _context.stop();
      }
    }
  });
});
describe('Apollo Plugin test', function () {
  it('Test with Apollo Config', function _callee2() {
    var BB, httpLinkOptions;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            BB = new core_1.BlueBase();
            _context2.next = 3;
            return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

          case 3:
            _context2.next = 5;
            return _regenerator.default.awrap(BB.Configs.setValue('plugins.apollo.httpLinkOptions', {
              uri: 'http://graphql'
            }));

          case 5:
            BB.boot();
            console.log('Plugins====>', BB.Configs.getValue('plugins.apollo.httpLinkOptions'));
            httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');
            expect(httpLinkOptions).toEqual({
              uri: 'http://graphql'
            });

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  test('Plugin should throw error if httpLinkOptions config is not given', function _callee3() {
    var BB, message;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            BB = new core_1.BlueBase();
            _context3.next = 3;
            return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

          case 3:
            _context3.prev = 3;
            _context3.next = 6;
            return _regenerator.default.awrap(BB.boot());

          case 6:
            _context3.next = 11;
            break;

          case 8:
            _context3.prev = 8;
            _context3.t0 = _context3["catch"](3);
            message = _context3.t0.message;

          case 11:
            expect(message).toBe('HTTP Link URI not provided to Apollo');

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, [[3, 8]]);
  });
  test('Mocking', function _callee4() {
    var BB, _jest$mock, HttpLink;

    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            BB = new core_1.BlueBase();
            _jest$mock = jest.mock('apollo-link-http'), HttpLink = _jest$mock.HttpLink;
            console.log("mocked httplink====> ", {
              HttpLink: HttpLink
            });
            _context4.next = 5;
            return _regenerator.default.awrap(BB.Filters.run("bluebase.boot.end", {
              HttpLink: HttpLink
            }));

          case 5:
            _context4.next = 7;
            return _regenerator.default.awrap(BB.Filters.run("plugin.apollo.cache", {
              HttpLink: HttpLink
            }));

          case 7:
            expect(HttpLink).toBeCalled();

          case 8:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  var client;
  test('Plugin apolloProvider working', function _callee5() {
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            withApolloProvider_1.default(client);

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvX190ZXN0c19fL2luZGV4LnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBLENBQUE7O0FBSUUsSUFBQSxrQkFBQSxHQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBOztBQVFGLElBQUksQ0FBQyw2QkFBRCxFQUFnQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDN0IsVUFBQSxFQUQ2QixHQUN4QixJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRHdCO0FBQUE7QUFBQSw0Q0FFN0IsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUY2Qjs7QUFBQTtBQUluQyxVQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksZ0JBQVosRUFBNkI7QUFBQyxZQUFBLFFBQVEsRUFBUixrQkFBQSxDQUFBO0FBQUQsV0FBN0I7QUFDQSxVQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksY0FBWixFQUEyQixrQkFBQSxDQUFBLFFBQTNCO0FBRUEsVUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsZUFBZixDQUFELENBQU4sQ0FBd0MsVUFBeEM7O0FBUG1DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQWhDLENBQUo7QUFXQSxRQUFRLENBQUMsb0JBQUQsRUFBdUIsWUFBSztBQUVuQyxFQUFBLEVBQUUsQ0FBQyx5QkFBRCxFQUE0QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFdkIsWUFBQSxFQUZ1QixHQUVsQixJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRmtCO0FBQUE7QUFBQSw4Q0FHdkIsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUh1Qjs7QUFBQTtBQUFBO0FBQUEsOENBSXZCLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixnQ0FBcEIsRUFBc0Q7QUFBRSxjQUFBLEdBQUcsRUFBRTtBQUFQLGFBQXRELENBSnVCOztBQUFBO0FBTTdCLFlBQUEsRUFBRSxDQUFDLElBQUg7QUFDQSxZQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksY0FBWixFQUE0QixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsZ0NBQXBCLENBQTVCO0FBQ00sWUFBQSxlQVJ1QixHQVFMLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixnQ0FBcEIsQ0FSSztBQVM3QixZQUFBLE1BQU0sQ0FBQyxlQUFELENBQU4sQ0FBd0IsT0FBeEIsQ0FBZ0M7QUFBQyxjQUFBLEdBQUcsRUFBRTtBQUFOLGFBQWhDOztBQVQ2QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUE1QixDQUFGO0FBY0QsRUFBQSxJQUFJLENBQUMsa0VBQUQsRUFBcUU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWxFLFlBQUEsRUFGa0UsR0FFN0QsSUFBSSxNQUFBLENBQUEsUUFBSixFQUY2RDtBQUFBO0FBQUEsOENBSWxFLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixPQUFBLENBQUEsT0FBcEIsQ0FKa0U7O0FBQUE7QUFBQTtBQUFBO0FBQUEsOENBT2pFLEVBQUUsQ0FBQyxJQUFILEVBUGlFOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFVdkUsWUFBQSxPQUFPLEdBQUcsYUFBTSxPQUFoQjs7QUFWdUU7QUFZeEUsWUFBQSxNQUFNLENBQUMsT0FBRCxDQUFOLENBQWdCLElBQWhCLENBQXFCLHNDQUFyQjs7QUFad0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBckUsQ0FBSjtBQWlCQSxFQUFBLElBQUksQ0FBQyxTQUFELEVBQVk7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNULFlBQUEsRUFEUyxHQUNKLElBQUksTUFBQSxDQUFBLFFBQUosRUFESTtBQUFBLHlCQUVTLElBQUksQ0FBQyxJQUFMLENBQVUsa0JBQVYsQ0FGVCxFQUVSLFFBRlEsY0FFUixRQUZRO0FBSWYsWUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLHVCQUFaLEVBQW9DO0FBQUMsY0FBQSxRQUFRLEVBQVI7QUFBRCxhQUFwQztBQUplO0FBQUEsOENBTVQsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsbUJBQWYsRUFBbUM7QUFBQyxjQUFBLFFBQVEsRUFBUjtBQUFELGFBQW5DLENBTlM7O0FBQUE7QUFBQTtBQUFBLDhDQU9SLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLHFCQUFmLEVBQXFDO0FBQUMsY0FBQSxRQUFRLEVBQVI7QUFBRCxhQUFyQyxDQVBROztBQUFBO0FBU2YsWUFBQSxNQUFNLENBQUMsUUFBRCxDQUFOLENBQWlCLFVBQWpCOztBQVRlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQVosQ0FBSjtBQWNBLE1BQUksTUFBSjtBQUNBLEVBQUEsSUFBSSxDQUFDLCtCQUFELEVBQWtDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFbkMsWUFBQSxvQkFBQSxDQUFBLE9BQUEsQ0FBbUIsTUFBbkI7O0FBRm1DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQWxDLENBQUo7QUE4QkMsQ0E5RU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsdWVCYXNlLCBcblx0Ly8gQmx1ZUJhc2VBcHAgXG59IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCBQbHVnaW4gZnJvbSAnLi4vaW5kZXgnO1xuLy8gaW1wb3J0IHsgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgV2l0aEFwb2xsb1Byb3ZpZGVyIGZyb20gJy4uL3dpdGhBcG9sbG9Qcm92aWRlcic7XG4vLyBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuLy8gaW1wb3J0IHsgd2FpdEZvckVsZW1lbnQgfSBmcm9tICdlbnp5bWUtYXN5bmMtaGVscGVycyc7XG4gIGltcG9ydCB7IEh0dHBMaW5rIH0gZnJvbSAnYXBvbGxvLWxpbmstaHR0cCc7XG4vLyBpbXBvcnQgeyBzYW1wbGUgfSBmcm9tICcuLi9fX21vY2tzX18vaW5kZXgnXG4vLyBpbXBvcnQgeyB3YWl0Rm9yRWxlbWVudCB9IGZyb20gJ2VuenltZS1hc3luYy1oZWxwZXJzJztcbi8vIGNvbnN0IEN1c3RvbVRleHQgPSAoKSA9PiA8VGV4dD5FdmVyeXRoaW5nIGlzIG9rITwvVGV4dD47XG5cblxuXG4vL3dvcmtpbmcgYW5kIHRlc3RpbmdcbnRlc3QoJ1BsdWdpbiBjb3JyZWN0bHkgcmVnaXN0ZXJlZCcsIGFzeW5jICgpID0+IHtcblx0Y29uc3QgQkIgPSBuZXcgQmx1ZUJhc2UoKTtcblx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXHRcblx0Y29uc29sZS5sb2coJ2ltcG9ydGVke309PT0+Jyx7SHR0cExpbmt9KVxuXHRjb25zb2xlLmxvZygnaW1wb3J0ZWQ9PT0+JyxIdHRwTGluaylcblxuXHRleHBlY3QoQkIuUGx1Z2lucy5oYXMoJ3BsdWdpbi1hcG9sbG8nKSkudG9CZVRydXRoeSgpO1xufSk7XG5cbi8vd29ya2luZyBodHRwbGluayBvcHRpb25zXG5kZXNjcmliZSgnQXBvbGxvIFBsdWdpbiB0ZXN0JywgKCkgPT4ge1xuXG5cdGl0KCdUZXN0IHdpdGggQXBvbGxvIENvbmZpZycsIGFzeW5jICgpID0+IHtcblxuXHRcdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdFx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXHRcdGF3YWl0IEJCLkNvbmZpZ3Muc2V0VmFsdWUoJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucycsIHsgdXJpOiAnaHR0cDovL2dyYXBocWwnIH0pO1xuXG5cdFx0QkIuYm9vdCgpO1xuXHRcdGNvbnNvbGUubG9nKCdQbHVnaW5zPT09PT4nLCBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnKSk7XG5cdFx0Y29uc3QgaHR0cExpbmtPcHRpb25zID0gQkIuQ29uZmlncy5nZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJyk7XG5cdFx0ZXhwZWN0KGh0dHBMaW5rT3B0aW9ucykudG9FcXVhbCh7dXJpOiAnaHR0cDovL2dyYXBocWwnfSk7XG5cblx0fSk7XG5cbi8vd29ya2luZyBhbmQgdGVzdGluZ1xudGVzdCgnUGx1Z2luIHNob3VsZCB0aHJvdyBlcnJvciBpZiBodHRwTGlua09wdGlvbnMgY29uZmlnIGlzIG5vdCBnaXZlbicsIGFzeW5jICgpID0+IHtcblxuXHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRcblx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXHRsZXQgbWVzc2FnZTtcblx0dHJ5IHtcblx0XHRhd2FpdCBCQi5ib290KCk7XG5cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcblx0fVxuXHRleHBlY3QobWVzc2FnZSkudG9CZSgnSFRUUCBMaW5rIFVSSSBub3QgcHJvdmlkZWQgdG8gQXBvbGxvJyk7XG5cbn0pO1xuXG5cbnRlc3QoJ01vY2tpbmcnLCBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdGNvbnN0IHtIdHRwTGlua306YW55ICA9IGplc3QubW9jaygnYXBvbGxvLWxpbmstaHR0cCcpO1xuXG5cdGNvbnNvbGUubG9nKFwibW9ja2VkIGh0dHBsaW5rPT09PT4gXCIse0h0dHBMaW5rfSlcblx0XG5cdGF3YWl0IEJCLkZpbHRlcnMucnVuKFwiYmx1ZWJhc2UuYm9vdC5lbmRcIix7SHR0cExpbmt9KTtcblx0IGF3YWl0IEJCLkZpbHRlcnMucnVuKFwicGx1Z2luLmFwb2xsby5jYWNoZVwiLHtIdHRwTGlua30pO1xuXG5cdGV4cGVjdChIdHRwTGluaykudG9CZUNhbGxlZCgpO1xuXG59KTtcblxuXG5sZXQgY2xpZW50OmFueTtcbnRlc3QoJ1BsdWdpbiBhcG9sbG9Qcm92aWRlciB3b3JraW5nJywgYXN5bmMgKCkgPT4ge1xuXG5cdFx0IFdpdGhBcG9sbG9Qcm92aWRlcihjbGllbnQgYXMgYW55KTtcbn0pO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuLy8gY2xhc3MgTW9ja0NsYXNzIHtcbi8vIFx0Y29uc3RydWN0b3IocHVibGljIGlucHV0KSB7XG5cbi8vIFx0fVxuLy8gfVxuXG4vLyBpbnN0YW5jZW9mLmlucHV0ID09PSBcblxuLy8gbWlzZShyZXNvbHZlID0+IHJlc29sdmUoKSkpO1xuXG4vLyBcdGNvbnN0IHdyYXBwZXIgPSBtb3VudChcbi8vIFx0XHQ8Qmx1ZUJhc2VBcHAgcGx1Z2lucz17W1BsdWdpbl19IGNvbmZpZ3M9e3sgJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucyc6IHsgdXJpOiAnd3d3LmdcblxuXG59KTtcblxuIl19