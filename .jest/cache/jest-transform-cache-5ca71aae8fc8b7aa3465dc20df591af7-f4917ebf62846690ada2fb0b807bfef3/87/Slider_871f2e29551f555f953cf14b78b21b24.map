{"version":3,"sources":["Slider.js"],"names":["ReactNative","require","Platform","React","StyleSheet","requireNativeComponent","RCTSlider","Slider","props","forwardedRef","style","compose","styles","slider","onValueChange","event","userEvent","OS","nativeEvent","fromUser","value","onChange","onSlidingComplete","disabled","SliderWithRef","forwardRef","defaultProps","minimumValue","maximumValue","step","create","height","module","exports"],"mappings":"AAUA;;;;;;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AAEA,IAAMI,sBAAsB,GAAGJ,OAAO,CAAC,wBAAD,CAAtC;;AAOA,IAAMK,SAAS,GAAGD,sBAAsB,CAAC,WAAD,CAAxC;;AA2KA,IAAME,MAAM,GAAG,SAATA,MAAS,CACbC,KADa,EAEbC,YAFa,EAGV;AACH,MAAMC,KAAK,GAAGN,UAAU,CAACO,OAAX,CACZC,MAAM,CAACC,MADK,EAEZL,KAAK,CAACE,KAFM,CAAd;;AAKA,MAAMI,aAAa,GACjBN,KAAK,CAACM,aAAN,IACC,UAACC,KAAD,EAAkB;AACjB,QAAIC,SAAS,GAAG,IAAhB;;AACA,QAAId,QAAQ,CAACe,EAAT,KAAgB,SAApB,EAA+B;AAG7BD,MAAAA,SAAS,GAAGD,KAAK,CAACG,WAAN,CAAkBC,QAA9B;AACD;;AACDX,IAAAA,KAAK,CAACM,aAAN,IACEE,SADF,IAEER,KAAK,CAACM,aAAN,CAAoBC,KAAK,CAACG,WAAN,CAAkBE,KAAtC,CAFF;AAGD,GAZH;;AAcA,MAAMC,QAAQ,GAAGP,aAAjB;;AAEA,MAAMQ,iBAAiB,GACrBd,KAAK,CAACc,iBAAN,IACC,UAACP,KAAD,EAAkB;AACjBP,IAAAA,KAAK,CAACc,iBAAN,IACEd,KAAK,CAACc,iBAAN,CAAwBP,KAAK,CAACG,WAAN,CAAkBE,KAA1C,CADF;AAED,GALH;;AAOA,SACE,oBAAC,SAAD,6BACMZ,KADN;AAEE,IAAA,GAAG,EAAEC,YAFP;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,QAAQ,EAAEW,QAJZ;AAKE,IAAA,iBAAiB,EAAEC,iBALrB;AAME,IAAA,aAAa,EAAER,aANjB;AAOE,IAAA,OAAO,EAAE,CAACN,KAAK,CAACe,QAPlB;AAQE,IAAA,yBAAyB,EAAE;AAAA,aAAM,IAAN;AAAA,KAR7B;AASE,IAAA,6BAA6B,EAAE;AAAA,aAAM,KAAN;AAAA;AATjC,KADF;AAaD,CA7CD;;AAgDA,IAAMC,aAAa,GAAGrB,KAAK,CAACsB,UAAN,CAAiBlB,MAAjB,CAAtB;AAEAiB,aAAa,CAACE,YAAd,GAA6B;AAC3BH,EAAAA,QAAQ,EAAE,KADiB;AAE3BH,EAAAA,KAAK,EAAE,CAFoB;AAG3BO,EAAAA,YAAY,EAAE,CAHa;AAI3BC,EAAAA,YAAY,EAAE,CAJa;AAK3BC,EAAAA,IAAI,EAAE;AALqB,CAA7B;AAQA,IAAIjB,MAAJ;;AACA,IAAIV,QAAQ,CAACe,EAAT,KAAgB,KAApB,EAA2B;AACzBL,EAAAA,MAAM,GAAGR,UAAU,CAAC0B,MAAX,CAAkB;AACzBjB,IAAAA,MAAM,EAAE;AACNkB,MAAAA,MAAM,EAAE;AADF;AADiB,GAAlB,CAAT;AAKD,CAND,MAMO;AACLnB,EAAAA,MAAM,GAAGR,UAAU,CAAC0B,MAAX,CAAkB;AACzBjB,IAAAA,MAAM,EAAE;AADiB,GAAlB,CAAT;AAGD;;AAEDmB,MAAM,CAACC,OAAP,GAAkBT,aAAlB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst ReactNative = require('ReactNative');\nconst Platform = require('Platform');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\n\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type {ImageSource} from 'ImageSource';\nimport type {ViewStyleProp} from 'StyleSheet';\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {ViewProps} from 'ViewPropTypes';\n\nconst RCTSlider = requireNativeComponent('RCTSlider');\n\ntype Event = Object;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Assigns a single image for the track. Only static images are supported.\n   * The center pixel of the image will be stretched to fill the track.\n   */\n  trackImage?: ?ImageSource,\n\n  /**\n   * Assigns a minimum track image. Only static images are supported. The\n   * rightmost pixel of the image will be stretched to fill the track.\n   */\n  minimumTrackImage?: ?ImageSource,\n\n  /**\n   * Assigns a maximum track image. Only static images are supported. The\n   * leftmost pixel of the image will be stretched to fill the track.\n   */\n  maximumTrackImage?: ?ImageSource,\n\n  /**\n   * Sets an image for the thumb. Only static images are supported.\n   */\n  thumbImage?: ?ImageSource,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Color of the foreground switch grip.\n   * @platform android\n   */\n  thumbTintColor?: ?ColorValue,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Used to style and layout the `Slider`.  See `StyleSheet.js` and\n   * `ViewStylePropTypes.js` for more info.\n   */\n  style?: ?ViewStyleProp,\n\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, you don't need to update the\n   * value during dragging.\n   */\n  value?: ?number,\n\n  /**\n   * Step value of the slider. The value should be\n   * between 0 and (maximumValue - minimumValue).\n   * Default value is 0.\n   */\n  step?: ?number,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue?: ?number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue?: ?number,\n\n  /**\n   * The color used for the track to the left of the button.\n   * Overrides the default blue gradient image on iOS.\n   */\n  minimumTrackTintColor?: ?ColorValue,\n\n  /**\n   * The color used for the track to the right of the button.\n   * Overrides the default blue gradient image on iOS.\n   */\n  maximumTrackTintColor?: ?ColorValue,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange?: ?Function,\n\n  /**\n   * Callback that is called when the user releases the slider,\n   * regardless if the value has changed. The current value is passed\n   * as an argument to the callback handler.\n   */\n  onSlidingComplete?: ?Function,\n\n  /**\n   * Used to locate this view in UI automation tests.\n   */\n  testID?: ?string,\n|}>;\n\n/**\n * A component used to select a single value from a range of values.\n *\n * ### Usage\n *\n * The example below shows how to use `Slider` to change\n * a value used by `Text`. The value is stored using\n * the state of the root component (`App`). The same component\n * subscribes to the `onValueChange`  of `Slider` and changes\n * the value using `setState`.\n *\n *```\n * import React from 'react';\n * import { StyleSheet, Text, View, Slider } from 'react-native';\n *\n * export default class App extends React.Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       value: 50\n *     }\n *   }\n *\n *   change(value) {\n *     this.setState(() => {\n *       return {\n *         value: parseFloat(value)\n *       };\n *     });\n *   }\n *\n *   render() {\n *     const {value} = this.state;\n *     return (\n *       <View style={styles.container}>\n *         <Text style={styles.text}>{String(value)}</Text>\n *         <Slider\n *           step={1}\n *           maximumValue={100}\n *           onValueChange={this.change.bind(this)}\n *           value={value} />\n *       </View>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     flexDirection: 'column',\n *     justifyContent: 'center'\n *   },\n *   text: {\n *     fontSize: 50,\n *     textAlign: 'center'\n *   }\n * });\n *```\n *\n */\nconst Slider = (\n  props: Props,\n  forwardedRef?: ?React.Ref<'RCTActivityIndicatorView'>,\n) => {\n  const style = StyleSheet.compose(\n    styles.slider,\n    props.style,\n  );\n\n  const onValueChange =\n    props.onValueChange &&\n    ((event: Event) => {\n      let userEvent = true;\n      if (Platform.OS === 'android') {\n        // On Android there's a special flag telling us the user is\n        // dragging the slider.\n        userEvent = event.nativeEvent.fromUser;\n      }\n      props.onValueChange &&\n        userEvent &&\n        props.onValueChange(event.nativeEvent.value);\n    });\n\n  const onChange = onValueChange;\n\n  const onSlidingComplete =\n    props.onSlidingComplete &&\n    ((event: Event) => {\n      props.onSlidingComplete &&\n        props.onSlidingComplete(event.nativeEvent.value);\n    });\n\n  return (\n    <RCTSlider\n      {...props}\n      ref={forwardedRef}\n      style={style}\n      onChange={onChange}\n      onSlidingComplete={onSlidingComplete}\n      onValueChange={onValueChange}\n      enabled={!props.disabled}\n      onStartShouldSetResponder={() => true}\n      onResponderTerminationRequest={() => false}\n    />\n  );\n};\n\n// $FlowFixMe - TODO T29156721 `React.forwardRef` is not defined in Flow, yet.\nconst SliderWithRef = React.forwardRef(Slider);\n\nSliderWithRef.defaultProps = {\n  disabled: false,\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n};\n\nlet styles;\nif (Platform.OS === 'ios') {\n  styles = StyleSheet.create({\n    slider: {\n      height: 40,\n    },\n  });\n} else {\n  styles = StyleSheet.create({\n    slider: {},\n  });\n}\n\nmodule.exports = (SliderWithRef: Class<ReactNative.NativeComponent<Props>>);\n"]}