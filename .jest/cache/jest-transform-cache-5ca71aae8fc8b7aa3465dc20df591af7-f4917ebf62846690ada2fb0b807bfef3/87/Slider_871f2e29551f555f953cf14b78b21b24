26309f62bd83398192ca7b7ba0cb6e20
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var ReactNative = require('ReactNative');

var Platform = require('Platform');

var React = require('React');

var StyleSheet = require('StyleSheet');

var requireNativeComponent = require('requireNativeComponent');

var RCTSlider = requireNativeComponent('RCTSlider');

var Slider = function Slider(props, forwardedRef) {
  var style = StyleSheet.compose(styles.slider, props.style);

  var onValueChange = props.onValueChange && function (event) {
    var userEvent = true;

    if (Platform.OS === 'android') {
      userEvent = event.nativeEvent.fromUser;
    }

    props.onValueChange && userEvent && props.onValueChange(event.nativeEvent.value);
  };

  var onChange = onValueChange;

  var onSlidingComplete = props.onSlidingComplete && function (event) {
    props.onSlidingComplete && props.onSlidingComplete(event.nativeEvent.value);
  };

  return React.createElement(RCTSlider, (0, _extends2.default)({}, props, {
    ref: forwardedRef,
    style: style,
    onChange: onChange,
    onSlidingComplete: onSlidingComplete,
    onValueChange: onValueChange,
    enabled: !props.disabled,
    onStartShouldSetResponder: function onStartShouldSetResponder() {
      return true;
    },
    onResponderTerminationRequest: function onResponderTerminationRequest() {
      return false;
    }
  }));
};

var SliderWithRef = React.forwardRef(Slider);
SliderWithRef.defaultProps = {
  disabled: false,
  value: 0,
  minimumValue: 0,
  maximumValue: 1,
  step: 0
};
var styles;

if (Platform.OS === 'ios') {
  styles = StyleSheet.create({
    slider: {
      height: 40
    }
  });
} else {
  styles = StyleSheet.create({
    slider: {}
  });
}

module.exports = SliderWithRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,