76285ed024b5b2c7ed8447efcb3dd45c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../index"));

var withApolloProvider_1 = tslib_1.__importDefault(require("../withApolloProvider"));

test('Plugin correctly registered', function _callee() {
  var BB;
  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          expect(BB.Plugins.has('plugin-apollo')).toBeTruthy();

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('Plugin should throw error if httpLinkOptions config is not given', function _callee2() {
  var BB, _jest$mock, HttpLink;

  return _regenerator.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context2.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          _context2.prev = 3;
          _context2.next = 6;
          return _regenerator.default.awrap(BB.boot());

        case 6:
          _context2.next = 10;
          break;

        case 8:
          _context2.prev = 8;
          _context2.t0 = _context2["catch"](3);

        case 10:
          _jest$mock = jest.mock('apollo-link-http'), HttpLink = _jest$mock.HttpLink;
          BB.Filters.run("bluebase.boot.end", HttpLink);

        case 12:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[3, 8]]);
});
test('Plugin correctly registered', function _callee3() {
  var BB, _jest$mock2, HttpLink;

  return _regenerator.default.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          BB = new core_1.BlueBase();
          _jest$mock2 = jest.mock('apollo-link-http'), HttpLink = _jest$mock2.HttpLink;
          _context3.next = 4;
          return _regenerator.default.awrap(BB.Filters.run("bluebase.boot.end", HttpLink));

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  });
});
var client;
test('Plugin should be correctly registered', function _callee4() {
  return _regenerator.default.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          withApolloProvider_1.default(client);

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  });
});
describe('Apollo Plugin test', function () {
  it('Test with Apollo Config', function _callee5() {
    var BB, httpLinkOptions;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            BB = new core_1.BlueBase();
            _context5.next = 3;
            return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

          case 3:
            _context5.next = 5;
            return _regenerator.default.awrap(BB.Configs.setValue('plugins.apollo.httpLinkOptions', {
              uri: 'http://graphql'
            }));

          case 5:
            BB.boot();
            console.log('Plugins====>', BB.Configs.getValue('plugins.apollo.httpLinkOptions'));
            httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');
            expect(httpLinkOptions).toEqual({
              uri: 'http://graphql'
            });

          case 9:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvX190ZXN0c19fL2luZGV4LnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBLENBQUE7O0FBVUEsSUFBSSxDQUFDLDZCQUFELEVBQWdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUM3QixVQUFBLEVBRDZCLEdBQ3hCLElBQUksTUFBQSxDQUFBLFFBQUosRUFEd0I7QUFBQTtBQUFBLDRDQUU3QixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBQSxDQUFBLE9BQXBCLENBRjZCOztBQUFBO0FBS25DLFVBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLGVBQWYsQ0FBRCxDQUFOLENBQXdDLFVBQXhDOztBQUxtQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFoQyxDQUFKO0FBUUEsSUFBSSxDQUFDLGtFQUFELEVBQXFFO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFbEUsVUFBQSxFQUZrRSxHQUU3RCxJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRjZEO0FBQUE7QUFBQSw0Q0FJbEUsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUprRTs7QUFBQTtBQUFBO0FBQUE7QUFBQSw0Q0FRakUsRUFBRSxDQUFDLElBQUgsRUFSaUU7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLHVCQWFoRCxJQUFJLENBQUMsSUFBTCxDQUFVLGtCQUFWLENBYmdELEVBYWpFLFFBYmlFLGNBYWpFLFFBYmlFO0FBY3hFLFVBQUEsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsbUJBQWYsRUFBbUMsUUFBbkM7O0FBZHdFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQXJFLENBQUo7QUFvQkEsSUFBSSxDQUFDLDZCQUFELEVBQWdDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDN0IsVUFBQSxFQUQ2QixHQUN4QixJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRHdCO0FBQUEsd0JBRVgsSUFBSSxDQUFDLElBQUwsQ0FBVSxrQkFBVixDQUZXLEVBRTVCLFFBRjRCLGVBRTVCLFFBRjRCO0FBQUE7QUFBQSw0Q0FHN0IsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsbUJBQWYsRUFBbUMsUUFBbkMsQ0FINkI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBaEMsQ0FBSjtBQWlCQSxJQUFJLE1BQUo7QUFDQSxJQUFJLENBQUMsdUNBQUQsRUFBMEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUUzQyxVQUFBLG9CQUFBLENBQUEsT0FBQSxDQUFtQixNQUFuQjs7QUFGMkM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBMUMsQ0FBSjtBQVVBLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFLO0FBQ25DLEVBQUEsRUFBRSxDQUFDLHlCQUFELEVBQTRCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUV2QixZQUFBLEVBRnVCLEdBRWxCLElBQUksTUFBQSxDQUFBLFFBQUosRUFGa0I7QUFBQTtBQUFBLDhDQUd2QixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBQSxDQUFBLE9BQXBCLENBSHVCOztBQUFBO0FBQUE7QUFBQSw4Q0FNdkIsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLGdDQUFwQixFQUFzRDtBQUFFLGNBQUEsR0FBRyxFQUFFO0FBQVAsYUFBdEQsQ0FOdUI7O0FBQUE7QUFRN0IsWUFBQSxFQUFFLENBQUMsSUFBSDtBQUNBLFlBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxjQUFaLEVBQTRCLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixnQ0FBcEIsQ0FBNUI7QUFDTSxZQUFBLGVBVnVCLEdBVUwsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLGdDQUFwQixDQVZLO0FBVzdCLFlBQUEsTUFBTSxDQUFDLGVBQUQsQ0FBTixDQUF3QixPQUF4QixDQUFnQztBQUFDLGNBQUEsR0FBRyxFQUFFO0FBQU4sYUFBaEM7O0FBWDZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQTVCLENBQUY7QUFjQSxDQWZPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbHVlQmFzZSwgXG5cdC8vIEJsdWVCYXNlQXBwIFxufSBmcm9tICdAYmx1ZWJhc2UvY29yZSc7XG5pbXBvcnQgUGx1Z2luIGZyb20gJy4uL2luZGV4Jztcbi8vIGltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFdpdGhBcG9sbG9Qcm92aWRlciBmcm9tICcuLi93aXRoQXBvbGxvUHJvdmlkZXInO1xuLy8gaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8vIGltcG9ydCB7IG1vdW50IH0gZnJvbSAnZW56eW1lJztcbi8vIGltcG9ydCB7IHdhaXRGb3JFbGVtZW50IH0gZnJvbSAnZW56eW1lLWFzeW5jLWhlbHBlcnMnO1xuLy8gaW1wb3J0IHsgSHR0cExpbmsgfSBmcm9tICdhcG9sbG8tbGluay1odHRwJztcbi8vIGltcG9ydCB7IHNhbXBsZSB9IGZyb20gJy4uL19fbW9ja3NfXy9pbmRleCdcblxuXG4vLyBjb25zdCBDdXN0b21UZXh0ID0gKCkgPT4gPFRleHQ+RXZlcnl0aGluZyBpcyBvayE8L1RleHQ+O1xuXG50ZXN0KCdQbHVnaW4gY29ycmVjdGx5IHJlZ2lzdGVyZWQnLCBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdGF3YWl0IEJCLlBsdWdpbnMucmVnaXN0ZXIoUGx1Z2luKTtcblxuLy8gaW1wb3J0IHsgd2FpdEZvckVsZW1lbnQgfSBmcm9tICdlbnp5bWUtYXN5bmMtaGVscGVycyc7XG5cdGV4cGVjdChCQi5QbHVnaW5zLmhhcygncGx1Z2luLWFwb2xsbycpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxudGVzdCgnUGx1Z2luIHNob3VsZCB0aHJvdyBlcnJvciBpZiBodHRwTGlua09wdGlvbnMgY29uZmlnIGlzIG5vdCBnaXZlbicsIGFzeW5jICgpID0+IHtcblxuXHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRcblx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXHQvLyBsZXQgbWVzc2FnZTtcblxuXHR0cnkge1xuXHRcdGF3YWl0IEJCLmJvb3QoKTtcblxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuXHR9XG5cdGNvbnN0IHtIdHRwTGlua30gOmFueSA9IGplc3QubW9jaygnYXBvbGxvLWxpbmstaHR0cCcpO1xuXHRCQi5GaWx0ZXJzLnJ1bihcImJsdWViYXNlLmJvb3QuZW5kXCIsSHR0cExpbmspO1xuXG5cbi8vXHRleHBlY3QobWVzc2FnZSkudG9CZSgnSFRUUCBMaW5rIFVSSSBub3QgcHJvdmlkZWQgdG8gQXBvbGxvJyk7XG59KTtcblxudGVzdCgnUGx1Z2luIGNvcnJlY3RseSByZWdpc3RlcmVkJywgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRjb25zdCB7SHR0cExpbmt9IDphbnkgPSBqZXN0Lm1vY2soJ2Fwb2xsby1saW5rLWh0dHAnKTtcblx0YXdhaXQgQkIuRmlsdGVycy5ydW4oXCJibHVlYmFzZS5ib290LmVuZFwiLEh0dHBMaW5rKTtcblxuXHQvLyBleHBlY3QoKS50b0JlVHJ1dGh5KCk7XG5cbn0pO1xuXG4vLyBjbGFzcyBNb2NrQ2xhc3Mge1xuLy8gXHRjb25zdHJ1Y3RvcihwdWJsaWMgaW5wdXQpIHtcblxuLy8gXHR9XG4vLyB9XG5cbi8vIGluc3RhbmNlb2YuaW5wdXQgPT09IFxuXG5sZXQgY2xpZW50OmFueTtcbnRlc3QoJ1BsdWdpbiBzaG91bGQgYmUgY29ycmVjdGx5IHJlZ2lzdGVyZWQnLCBhc3luYyAoKSA9PiB7XG5cblx0XHQgV2l0aEFwb2xsb1Byb3ZpZGVyKGNsaWVudCBhcyBhbnkpO1xufSk7XG5cbi8vIG1pc2UocmVzb2x2ZSA9PiByZXNvbHZlKCkpKTtcblxuLy8gXHRjb25zdCB3cmFwcGVyID0gbW91bnQoXG4vLyBcdFx0PEJsdWVCYXNlQXBwIHBsdWdpbnM9e1tQbHVnaW5dfSBjb25maWdzPXt7ICdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnOiB7IHVyaTogJ3d3dy5nXG5cbmRlc2NyaWJlKCdBcG9sbG8gUGx1Z2luIHRlc3QnLCAoKSA9PiB7XG5cdGl0KCdUZXN0IHdpdGggQXBvbGxvIENvbmZpZycsIGFzeW5jICgpID0+IHtcblxuXHRcdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdFx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXHRcdC8vIEFwb2xsb1BsdWdpbi5nZXRDbGllbnQoKTtcblx0XHQvL2NvbnN0IFBsdWdpbnMgPSBhd2FpdCBCQi5QbHVnaW5zLmhhcyhQbHVnaW4pO1xuXHRcdGF3YWl0IEJCLkNvbmZpZ3Muc2V0VmFsdWUoJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucycsIHsgdXJpOiAnaHR0cDovL2dyYXBocWwnIH0pO1xuXG5cdFx0QkIuYm9vdCgpO1xuXHRcdGNvbnNvbGUubG9nKCdQbHVnaW5zPT09PT4nLCBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnKSk7XG5cdFx0Y29uc3QgaHR0cExpbmtPcHRpb25zID0gQkIuQ29uZmlncy5nZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJyk7XG5cdFx0ZXhwZWN0KGh0dHBMaW5rT3B0aW9ucykudG9FcXVhbCh7dXJpOiAnaHR0cDovL2dyYXBocWwnfSk7XG5cblx0fSk7XG59KTtcblxuIl19