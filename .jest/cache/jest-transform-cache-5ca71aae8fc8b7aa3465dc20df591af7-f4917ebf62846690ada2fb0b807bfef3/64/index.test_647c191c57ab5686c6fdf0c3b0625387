506687658d994df13e023409df33e2be
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../index"));

test('Plugin correctly registered', function _callee() {
  var BB;
  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          expect(BB.Plugins.has('plugin-apollo')).toBeTruthy();

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('Plugin should throw error if httpLinkOptions config is not given', function _callee2() {
  var BB, _jest$mock, HttpLink;

  return _regenerator.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context2.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          _jest$mock = jest.mock('apollo-link-http'), HttpLink = _jest$mock.HttpLink;
          BB.Filters.run("bluebase.boot.end", HttpLink);

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('Plugin correctly registered', function _callee3() {
  var BB, _jest$mock2, HttpLink;

  return _regenerator.default.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          BB = new core_1.BlueBase();
          _jest$mock2 = jest.mock('apollo-link-http'), HttpLink = _jest$mock2.HttpLink;
          _context3.next = 4;
          return _regenerator.default.awrap(BB.Filters.run("bluebase.boot.end", HttpLink));

        case 4:
          expect(HttpLink.uri).toBeCalled();

        case 5:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('Plugin correctly registered', function _callee4() {
  var BB;
  return _regenerator.default.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context4.next = 3;
          return _regenerator.default.awrap(BB.Filters.register({
            event: 'bluebase-boot-end',
            value: function value() {}
          }));

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvX190ZXN0c19fL2luZGV4LnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBOztBQVlBLElBQUksQ0FBQyw2QkFBRCxFQUFnQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDN0IsVUFBQSxFQUQ2QixHQUN4QixJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRHdCO0FBQUE7QUFBQSw0Q0FFN0IsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUY2Qjs7QUFBQTtBQUtuQyxVQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBSCxDQUFXLEdBQVgsQ0FBZSxlQUFmLENBQUQsQ0FBTixDQUF3QyxVQUF4Qzs7QUFMbUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBaEMsQ0FBSjtBQVFBLElBQUksQ0FBQyxrRUFBRCxFQUFxRTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWxFLFVBQUEsRUFGa0UsR0FFN0QsSUFBSSxNQUFBLENBQUEsUUFBSixFQUY2RDtBQUFBO0FBQUEsNENBSWxFLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixPQUFBLENBQUEsT0FBcEIsQ0FKa0U7O0FBQUE7QUFBQSx1QkFhaEQsSUFBSSxDQUFDLElBQUwsQ0FBVSxrQkFBVixDQWJnRCxFQWFqRSxRQWJpRSxjQWFqRSxRQWJpRTtBQWN4RSxVQUFBLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLG1CQUFmLEVBQW1DLFFBQW5DOztBQWR3RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFyRSxDQUFKO0FBb0JBLElBQUksQ0FBQyw2QkFBRCxFQUFnQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzdCLFVBQUEsRUFENkIsR0FDeEIsSUFBSSxNQUFBLENBQUEsUUFBSixFQUR3QjtBQUFBLHdCQUVYLElBQUksQ0FBQyxJQUFMLENBQVUsa0JBQVYsQ0FGVyxFQUU1QixRQUY0QixlQUU1QixRQUY0QjtBQUFBO0FBQUEsNENBRzdCLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLG1CQUFmLEVBQW1DLFFBQW5DLENBSDZCOztBQUFBO0FBS25DLFVBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFWLENBQU4sQ0FBcUIsVUFBckI7O0FBTG1DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQWhDLENBQUo7QUFTQSxJQUFJLENBQUMsNkJBQUQsRUFBZ0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzdCLFVBQUEsRUFENkIsR0FDeEIsSUFBSSxNQUFBLENBQUEsUUFBSixFQUR3QjtBQUFBO0FBQUEsNENBRTdCLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQjtBQUN6QixZQUFBLEtBQUssRUFBRSxtQkFEa0I7QUFFekIsWUFBQSxLQUFLLEVBQUUsaUJBQUssQ0FFWDtBQUp3QixXQUFwQixDQUY2Qjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFoQyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmx1ZUJhc2UsIFxuXHQvLyBCbHVlQmFzZUFwcCBcbn0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuaW1wb3J0IFBsdWdpbiBmcm9tICcuLi9pbmRleCc7XG4vLyBpbXBvcnQgeyBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbi8vIGltcG9ydCBXaXRoQXBvbGxvUHJvdmlkZXIgZnJvbSAnLi4vd2l0aEFwb2xsb1Byb3ZpZGVyJztcbi8vIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBtb3VudCB9IGZyb20gJ2VuenltZSc7XG4vLyBpbXBvcnQgeyB3YWl0Rm9yRWxlbWVudCB9IGZyb20gJ2VuenltZS1hc3luYy1oZWxwZXJzJztcbi8vIGltcG9ydCB7IEh0dHBMaW5rIH0gZnJvbSAnYXBvbGxvLWxpbmstaHR0cCc7XG4vLyBpbXBvcnQgeyBzYW1wbGUgfSBmcm9tICcuLi9fX21vY2tzX18vaW5kZXgnXG5cblxuLy8gY29uc3QgQ3VzdG9tVGV4dCA9ICgpID0+IDxUZXh0PkV2ZXJ5dGhpbmcgaXMgb2shPC9UZXh0PjtcblxudGVzdCgnUGx1Z2luIGNvcnJlY3RseSByZWdpc3RlcmVkJywgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG5cbi8vIGltcG9ydCB7IHdhaXRGb3JFbGVtZW50IH0gZnJvbSAnZW56eW1lLWFzeW5jLWhlbHBlcnMnO1xuXHRleHBlY3QoQkIuUGx1Z2lucy5oYXMoJ3BsdWdpbi1hcG9sbG8nKSkudG9CZVRydXRoeSgpO1xufSk7XG5cbnRlc3QoJ1BsdWdpbiBzaG91bGQgdGhyb3cgZXJyb3IgaWYgaHR0cExpbmtPcHRpb25zIGNvbmZpZyBpcyBub3QgZ2l2ZW4nLCBhc3luYyAoKSA9PiB7XG5cblx0Y29uc3QgQkIgPSBuZXcgQmx1ZUJhc2UoKTtcblx0XG5cdGF3YWl0IEJCLlBsdWdpbnMucmVnaXN0ZXIoUGx1Z2luKTtcblx0Ly9sZXQgbWVzc2FnZTtcblxuXHQvLyB0cnkge1xuXHQvLyBcdC8vYXdhaXQgQkIuYm9vdCgpO1xuXG5cdC8vIH0gY2F0Y2ggKGVycm9yKSB7XG5cdC8vIFx0Ly8vbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG5cdC8vIH1cblx0Y29uc3Qge0h0dHBMaW5rfSA6YW55ID0gamVzdC5tb2NrKCdhcG9sbG8tbGluay1odHRwJyk7XG5cdEJCLkZpbHRlcnMucnVuKFwiYmx1ZWJhc2UuYm9vdC5lbmRcIixIdHRwTGluayk7XG5cblxuLy9cdGV4cGVjdChtZXNzYWdlKS50b0JlKCdIVFRQIExpbmsgVVJJIG5vdCBwcm92aWRlZCB0byBBcG9sbG8nKTtcbn0pO1xuXG50ZXN0KCdQbHVnaW4gY29ycmVjdGx5IHJlZ2lzdGVyZWQnLCBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdGNvbnN0IHtIdHRwTGlua30gOmFueSA9IGplc3QubW9jaygnYXBvbGxvLWxpbmstaHR0cCcpO1xuXHRhd2FpdCBCQi5GaWx0ZXJzLnJ1bihcImJsdWViYXNlLmJvb3QuZW5kXCIsSHR0cExpbmspO1xuXG5cdGV4cGVjdChIdHRwTGluay51cmkpLnRvQmVDYWxsZWQoKTtcblxufSk7XG5cbnRlc3QoJ1BsdWdpbiBjb3JyZWN0bHkgcmVnaXN0ZXJlZCcsIGFzeW5jICgpID0+IHtcblx0Y29uc3QgQkIgPSBuZXcgQmx1ZUJhc2UoKTtcblx0YXdhaXQgQkIuRmlsdGVycy5yZWdpc3Rlcih7XG5cdFx0ZXZlbnQ6ICdibHVlYmFzZS1ib290LWVuZCcsXG5cdFx0dmFsdWU6ICgpID0+IHtcblxuXHRcdH1cblx0fSk7XG5cbn0pO1xuXG5cblxuXG5cblxuXG4vLyBjbGFzcyBNb2NrQ2xhc3Mge1xuLy8gXHRjb25zdHJ1Y3RvcihwdWJsaWMgaW5wdXQpIHtcblxuLy8gXHR9XG4vLyB9XG5cbi8vIGluc3RhbmNlb2YuaW5wdXQgPT09IFxuXG5cblxuLy8gLy8gbGV0IGNsaWVudDphbnk7XG4vLyAvLyB0ZXN0KCdQbHVnaW4gc2hvdWxkIGJlIGNvcnJlY3RseSByZWdpc3RlcmVkJywgYXN5bmMgKCkgPT4ge1xuXG4vLyAvLyBcdFx0IFdpdGhBcG9sbG9Qcm92aWRlcihjbGllbnQgYXMgYW55KTtcbi8vIC8vIH0pO1xuXG4vLyBtaXNlKHJlc29sdmUgPT4gcmVzb2x2ZSgpKSk7XG5cbi8vIFx0Y29uc3Qgd3JhcHBlciA9IG1vdW50KFxuLy8gXHRcdDxCbHVlQmFzZUFwcCBwbHVnaW5zPXtbUGx1Z2luXX0gY29uZmlncz17eyAncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJzogeyB1cmk6ICd3d3cuZ1xuXG5cblxuLy8gZGVzY3JpYmUoJ0Fwb2xsbyBQbHVnaW4gdGVzdCcsICgpID0+IHtcbi8vIFx0aXQoJ1Rlc3Qgd2l0aCBBcG9sbG8gQ29uZmlnJywgYXN5bmMgKCkgPT4ge1xuXG4vLyBcdFx0Y29uc3QgQkIgPSBuZXcgQmx1ZUJhc2UoKTtcbi8vIFx0XHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG4vLyBcdFx0Ly8gQXBvbGxvUGx1Z2luLmdldENsaWVudCgpO1xuLy8gXHRcdGNvbnN0IFBsdWdpbnMgPSBhd2FpdCBCQi5QbHVnaW5zLmhhcyhQbHVnaW4pO1xuLy8gXHRcdGF3YWl0IEJCLkNvbmZpZ3Muc2V0VmFsdWUoJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucycsIHsgdXJpOiAnaHR0cDovL2dyYXBocWwnIH0pO1xuXG4vLyBcdFx0Ly8gcmVuZGVyZXIuY3JlYXRlIChcbi8vIFx0XHQvLyBcdDxCQi5Db21wb25lbnRzLlF1ZXJ5Pilcbi8vIFx0XHQvLyA8L0JCLkNvbXBvbmVudHMuUXVlcnk+XG5cbi8vIFx0XHRCQi5ib290KCk7XG4vLyBcdFx0Y29uc29sZS5sb2coJ1BsdWdpbnM9PT09PicsIEJCLkNvbmZpZ3MuZ2V0VmFsdWUoJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucycpKTtcbi8vIFx0XHRjb25zdCBodHRwTGlua09wdGlvbnMgPSBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnKTtcbi8vIFx0XHRleHBlY3QoaHR0cExpbmtPcHRpb25zKS50b0VxdWFsKHt1cmk6ICdodHRwOi8vZ3JhcGhxbCd9KTtcblxuLy8gXHR9KTtcbi8vIH0pO1xuXG4iXX0=