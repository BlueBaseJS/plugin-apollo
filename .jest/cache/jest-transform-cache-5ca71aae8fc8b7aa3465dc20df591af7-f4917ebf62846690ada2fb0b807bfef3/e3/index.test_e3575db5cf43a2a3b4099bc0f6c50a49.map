{"version":3,"sources":["/home/muzzamil/Documents/apollo/plugin-apollo/src/__tests__/index.test.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAGA,IAAI,CAAC,6BAAD,EAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7B,UAAA,EAD6B,GACxB,IAAI,MAAA,CAAA,QAAJ,EADwB;AAAA;AAAA,4CAE7B,EAAE,CAAC,OAAH,CAAW,QAAX,CAAoB,OAAA,CAAA,OAApB,CAF6B;;AAAA;AAInC,UAAA,MAAM,CAAC,EAAE,CAAC,OAAH,CAAW,GAAX,CAAe,yBAAf,CAAD,CAAN,CAAkD,UAAlD;;AAJmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC,CAAJ","sourcesContent":["import { BlueBase } from '@bluebase/core';\nimport Plugin from '../index';\n// import WithApolloProvider from '../withApolloProvider';\n  \ntest('Plugin correctly registered', async () => {\n\tconst BB = new BlueBase();\n\tawait BB.Plugins.register(Plugin);\n\n\texpect(BB.Plugins.has('@bluebase/plugin-apollo')).toBeTruthy();\n});\n\n// let client:any;\n// test('Plugin should be correctly registered', async () => {\n\t \n// \t\t WithApolloProvider(client as any);\n// });\n\n\n\n\n\n\n// describe('Apollo Plugin test', () => {\n// \tit('Test with Apollo Config', async () => {\n\t\t\n// \t\tconst BB = new BlueBase();\n// \t\tawait BB.Plugins.register(Plugin);\n// \t\t// ApolloPlugin.getClient();\n// \t\tconst Plugins = await BB.Plugins.has(Plugin);\n// \t\tawait BB.Configs.setValue('plugins.apollo.httpLinkOptions', { uri: 'http://graphql' });\n\n// \t\t// renderer.create (\n// \t\t// \t<BB.Components.Query>)\n// \t\t// </BB.Components.Query>\n\n// \t\tBB.boot();\n// \t\tconsole.log('Plugins====>', BB.Configs.getValue('plugins.apollo.httpLinkOptions'));\n// \t\tconst httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');\n// \t\texpect(httpLinkOptions).toEqual({uri: 'http://graphql'});\n\t\t\n// \t});\n// });\n\n"]}