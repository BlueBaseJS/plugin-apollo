{"version":3,"sources":["/home/muzzamil/Documents/apollo/plugin-apollo/src/__tests__/index.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { BlueBase, \n\t// BlueBaseApp \n} from '@bluebase/core';\nimport Plugin from '../index';\n// import { Text } from 'react-native';\n// import WithApolloProvider from '../withApolloProvider';\n// import React from 'react';\n// import { mount } from 'enzyme';\n// import { waitForElement } from 'enzyme-async-helpers';\n  import { HttpLink } from 'apollo-link-http';\n// import { sample } from '../__mocks__/index'\n// import { waitForElement } from 'enzyme-async-helpers';\n\n\n// const CustomText = () => <Text>Everything is ok!</Text>;\n\n//working and testing\ntest('Plugin correctly registered', async () => {\n\tconst BB = new BlueBase();\n\tawait BB.Plugins.register(Plugin);\n\t\n\tconsole.log('imported{}===>',{HttpLink})\n\tconsole.log('imported===>',HttpLink)\n\n\texpect(BB.Plugins.has('plugin-apollo')).toBeTruthy();\n});\n\n//working httplink options\ndescribe('Apollo Plugin test', () => {\n\n\tit('Test with Apollo Config', async () => {\n\n\t\tconst BB = new BlueBase();\n\t\tawait BB.Plugins.register(Plugin);\n\t\tawait BB.Configs.setValue('plugins.apollo.httpLinkOptions', { uri: 'http://graphql' });\n\n\t\tBB.boot();\n\t\tconsole.log('Plugins====>', BB.Configs.getValue('plugins.apollo.httpLinkOptions'));\n\t\tconst httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');\n\t\texpect(httpLinkOptions).toEqual({uri: 'http://graphql'});\n\n\t});\n\n//working and testing\ntest('Plugin should throw error if httpLinkOptions config is not given', async () => {\n\n\tconst BB = new BlueBase();\n\t\n\tawait BB.Plugins.register(Plugin);\n\tlet message;\n\ttry {\n\t\tawait BB.boot();\n\n\t} catch (error) {\n\t\tmessage = error.message;\n\t}\n\n\n\texpect(message).toBe('HTTP Link URI not provided to Apollo');\n\n});\n\n\ntest('Mocking', async () => {\n\tconst BB = new BlueBase();\n\tconst {HttpLink}:any  = jest.mock('apollo-link-http');\n\n\tconsole.log(\"mocked httplink====> \",{HttpLink})\n\t\n\tawait BB.Filters.run(\"bluebase.boot.end\",{HttpLink});\n\n\texpect(HttpLink).toBeCalled();\n\n});\n\n\n// let client:any;\n// test('Plugin apolloProvider working', async () => {\n\n// \t\t WithApolloProvider(client as any);\n// });\n\n\n\n\n\n\n\n\n\n\n\n\n// class MockClass {\n// \tconstructor(public input) {\n\n// \t}\n// }\n\n// instanceof.input === \n\n// mise(resolve => resolve()));\n\n// \tconst wrapper = mount(\n// \t\t<BlueBaseApp plugins={[Plugin]} configs={{ 'plugins.apollo.httpLinkOptions': { uri: 'www.g\n\n\n});\n\n"]}