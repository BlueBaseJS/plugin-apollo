6ba8fd4b7117dad432b675f5aede3ef5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var ImageProps = require('ImageProps');

var NativeModules = require('NativeModules');

var React = require('React');

var ReactNative = require('ReactNative');

var StyleSheet = require('StyleSheet');

var flattenStyle = require('flattenStyle');

var requireNativeComponent = require('requireNativeComponent');

var resolveAssetSource = require('resolveAssetSource');

var ImageViewManager = NativeModules.ImageViewManager;
var RCTImageView = requireNativeComponent('RCTImageView');

function getSize(uri, success, failure) {
  ImageViewManager.getSize(uri, success, failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}

function prefetch(url) {
  return ImageViewManager.prefetchImage(url);
}

var Image = function Image(props, forwardedRef) {
  var source = resolveAssetSource(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined
  };
  var sources;
  var style;

  if (Array.isArray(source)) {
    style = flattenStyle([styles.base, props.style]) || {};
    sources = source;
  } else {
    var _width = source.width,
        _height = source.height,
        uri = source.uri;
    style = flattenStyle([{
      width: _width,
      height: _height
    }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn('The <Image> component requires a `source` property rather than `src`.');
  }

  if (props.children != null) {
    throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
  }

  return React.createElement(RCTImageView, (0, _extends2.default)({}, props, {
    ref: forwardedRef,
    style: style,
    resizeMode: resizeMode,
    tintColor: tintColor,
    source: sources
  }));
};

Image = React.forwardRef(Image);
Image.getSize = getSize;
Image.prefetch = prefetch;
Image.resolveAssetSource = resolveAssetSource;
Image.propTypes = ImageProps;
var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  }
});
module.exports = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlLmlvcy5qcyJdLCJuYW1lcyI6WyJJbWFnZVByb3BzIiwicmVxdWlyZSIsIk5hdGl2ZU1vZHVsZXMiLCJSZWFjdCIsIlJlYWN0TmF0aXZlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW5TdHlsZSIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJJbWFnZVZpZXdNYW5hZ2VyIiwiUkNUSW1hZ2VWaWV3IiwiZ2V0U2l6ZSIsInVyaSIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwiY29uc29sZSIsIndhcm4iLCJwcmVmZXRjaCIsInVybCIsInByZWZldGNoSW1hZ2UiLCJJbWFnZSIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwic291cmNlIiwidW5kZWZpbmVkIiwid2lkdGgiLCJoZWlnaHQiLCJzb3VyY2VzIiwic3R5bGUiLCJBcnJheSIsImlzQXJyYXkiLCJzdHlsZXMiLCJiYXNlIiwicmVzaXplTW9kZSIsInRpbnRDb2xvciIsInNyYyIsImNoaWxkcmVuIiwiRXJyb3IiLCJmb3J3YXJkUmVmIiwicHJvcFR5cGVzIiwiY3JlYXRlIiwib3ZlcmZsb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFTQTs7Ozs7O0FBRUEsSUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUExQjs7QUFDQSxJQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBQyxlQUFELENBQTdCOztBQUNBLElBQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUcsV0FBVyxHQUFHSCxPQUFPLENBQUMsYUFBRCxDQUEzQjs7QUFDQSxJQUFNSSxVQUFVLEdBQUdKLE9BQU8sQ0FBQyxZQUFELENBQTFCOztBQUVBLElBQU1LLFlBQVksR0FBR0wsT0FBTyxDQUFDLGNBQUQsQ0FBNUI7O0FBQ0EsSUFBTU0sc0JBQXNCLEdBQUdOLE9BQU8sQ0FBQyx3QkFBRCxDQUF0Qzs7QUFDQSxJQUFNTyxrQkFBa0IsR0FBR1AsT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUVBLElBQU1RLGdCQUFnQixHQUFHUCxhQUFhLENBQUNPLGdCQUF2QztBQUVBLElBQU1DLFlBQVksR0FBR0gsc0JBQXNCLENBQUMsY0FBRCxDQUEzQzs7QUFJQSxTQUFTSSxPQUFULENBQ0VDLEdBREYsRUFFRUMsT0FGRixFQUdFQyxPQUhGLEVBSUU7QUFDQUwsRUFBQUEsZ0JBQWdCLENBQUNFLE9BQWpCLENBQ0VDLEdBREYsRUFFRUMsT0FGRixFQUdFQyxPQUFPLElBQ0wsWUFBVztBQUNUQyxJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxtQ0FBbUNKLEdBQWhEO0FBQ0QsR0FOTDtBQVFEOztBQUVELFNBQVNLLFFBQVQsQ0FBa0JDLEdBQWxCLEVBQStCO0FBQzdCLFNBQU9ULGdCQUFnQixDQUFDVSxhQUFqQixDQUErQkQsR0FBL0IsQ0FBUDtBQUNEOztBQWtCRCxJQUFJRSxLQUFLLEdBQUcsZUFDVkMsS0FEVSxFQUVWQyxZQUZVLEVBR1A7QUFDSCxNQUFNQyxNQUFNLEdBQUdmLGtCQUFrQixDQUFDYSxLQUFLLENBQUNFLE1BQVAsQ0FBbEIsSUFBb0M7QUFDakRYLElBQUFBLEdBQUcsRUFBRVksU0FENEM7QUFFakRDLElBQUFBLEtBQUssRUFBRUQsU0FGMEM7QUFHakRFLElBQUFBLE1BQU0sRUFBRUY7QUFIeUMsR0FBbkQ7QUFNQSxNQUFJRyxPQUFKO0FBQ0EsTUFBSUMsS0FBSjs7QUFDQSxNQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY1AsTUFBZCxDQUFKLEVBQTJCO0FBQ3pCSyxJQUFBQSxLQUFLLEdBQUd0QixZQUFZLENBQUMsQ0FBQ3lCLE1BQU0sQ0FBQ0MsSUFBUixFQUFjWCxLQUFLLENBQUNPLEtBQXBCLENBQUQsQ0FBWixJQUE0QyxFQUFwRDtBQUNBRCxJQUFBQSxPQUFPLEdBQUdKLE1BQVY7QUFDRCxHQUhELE1BR087QUFBQSxRQUNFRSxNQURGLEdBQ3dCRixNQUR4QixDQUNFRSxLQURGO0FBQUEsUUFDU0MsT0FEVCxHQUN3QkgsTUFEeEIsQ0FDU0csTUFEVDtBQUFBLFFBQ2lCZCxHQURqQixHQUN3QlcsTUFEeEIsQ0FDaUJYLEdBRGpCO0FBRUxnQixJQUFBQSxLQUFLLEdBQUd0QixZQUFZLENBQUMsQ0FBQztBQUFDbUIsTUFBQUEsS0FBSyxFQUFMQSxNQUFEO0FBQVFDLE1BQUFBLE1BQU0sRUFBTkE7QUFBUixLQUFELEVBQWtCSyxNQUFNLENBQUNDLElBQXpCLEVBQStCWCxLQUFLLENBQUNPLEtBQXJDLENBQUQsQ0FBWixJQUE2RCxFQUFyRTtBQUNBRCxJQUFBQSxPQUFPLEdBQUcsQ0FBQ0osTUFBRCxDQUFWOztBQUVBLFFBQUlYLEdBQUcsS0FBSyxFQUFaLEVBQWdCO0FBQ2RHLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLDBDQUFiO0FBQ0Q7QUFDRjs7QUFFRCxNQUFNaUIsVUFBVSxHQUFHWixLQUFLLENBQUNZLFVBQU4sSUFBb0JMLEtBQUssQ0FBQ0ssVUFBMUIsSUFBd0MsT0FBM0Q7QUFDQSxNQUFNQyxTQUFTLEdBQUdOLEtBQUssQ0FBQ00sU0FBeEI7O0FBRUEsTUFBSWIsS0FBSyxDQUFDYyxHQUFOLElBQWEsSUFBakIsRUFBdUI7QUFDckJwQixJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRSx1RUFERjtBQUdEOztBQUVELE1BQUlLLEtBQUssQ0FBQ2UsUUFBTixJQUFrQixJQUF0QixFQUE0QjtBQUMxQixVQUFNLElBQUlDLEtBQUosQ0FDSiwyS0FESSxDQUFOO0FBR0Q7O0FBRUQsU0FDRSxvQkFBQyxZQUFELDZCQUNNaEIsS0FETjtBQUVFLElBQUEsR0FBRyxFQUFFQyxZQUZQO0FBR0UsSUFBQSxLQUFLLEVBQUVNLEtBSFQ7QUFJRSxJQUFBLFVBQVUsRUFBRUssVUFKZDtBQUtFLElBQUEsU0FBUyxFQUFFQyxTQUxiO0FBTUUsSUFBQSxNQUFNLEVBQUVQO0FBTlYsS0FERjtBQVVELENBbEREOztBQXFEQVAsS0FBSyxHQUFHakIsS0FBSyxDQUFDbUMsVUFBTixDQUFpQmxCLEtBQWpCLENBQVI7QUFPQUEsS0FBSyxDQUFDVCxPQUFOLEdBQWdCQSxPQUFoQjtBQVFBUyxLQUFLLENBQUNILFFBQU4sR0FBaUJBLFFBQWpCO0FBT0FHLEtBQUssQ0FBQ1osa0JBQU4sR0FBMkJBLGtCQUEzQjtBQUVBWSxLQUFLLENBQUNtQixTQUFOLEdBQWtCdkMsVUFBbEI7QUFFQSxJQUFNK0IsTUFBTSxHQUFHMUIsVUFBVSxDQUFDbUMsTUFBWCxDQUFrQjtBQUMvQlIsRUFBQUEsSUFBSSxFQUFFO0FBQ0pTLElBQUFBLFFBQVEsRUFBRTtBQUROO0FBRHlCLENBQWxCLENBQWY7QUFNQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWtCdkIsS0FBbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgSW1hZ2VQcm9wcyA9IHJlcXVpcmUoJ0ltYWdlUHJvcHMnKTtcbmNvbnN0IE5hdGl2ZU1vZHVsZXMgPSByZXF1aXJlKCdOYXRpdmVNb2R1bGVzJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ1JlYWN0Jyk7XG5jb25zdCBSZWFjdE5hdGl2ZSA9IHJlcXVpcmUoJ1JlYWN0TmF0aXZlJyk7XG5jb25zdCBTdHlsZVNoZWV0ID0gcmVxdWlyZSgnU3R5bGVTaGVldCcpO1xuXG5jb25zdCBmbGF0dGVuU3R5bGUgPSByZXF1aXJlKCdmbGF0dGVuU3R5bGUnKTtcbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKCdyZXF1aXJlTmF0aXZlQ29tcG9uZW50Jyk7XG5jb25zdCByZXNvbHZlQXNzZXRTb3VyY2UgPSByZXF1aXJlKCdyZXNvbHZlQXNzZXRTb3VyY2UnKTtcblxuY29uc3QgSW1hZ2VWaWV3TWFuYWdlciA9IE5hdGl2ZU1vZHVsZXMuSW1hZ2VWaWV3TWFuYWdlcjtcblxuY29uc3QgUkNUSW1hZ2VWaWV3ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUSW1hZ2VWaWV3Jyk7XG5cbmltcG9ydCB0eXBlIHtJbWFnZVByb3BzIGFzIEltYWdlUHJvcHNUeXBlfSBmcm9tICdJbWFnZVByb3BzJztcblxuZnVuY3Rpb24gZ2V0U2l6ZShcbiAgdXJpOiBzdHJpbmcsXG4gIHN1Y2Nlc3M6ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZCxcbiAgZmFpbHVyZT86IChlcnJvcjogYW55KSA9PiB2b2lkLFxuKSB7XG4gIEltYWdlVmlld01hbmFnZXIuZ2V0U2l6ZShcbiAgICB1cmksXG4gICAgc3VjY2VzcyxcbiAgICBmYWlsdXJlIHx8XG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gZ2V0IHNpemUgZm9yIGltYWdlOiAnICsgdXJpKTtcbiAgICAgIH0sXG4gICk7XG59XG5cbmZ1bmN0aW9uIHByZWZldGNoKHVybDogc3RyaW5nKSB7XG4gIHJldHVybiBJbWFnZVZpZXdNYW5hZ2VyLnByZWZldGNoSW1hZ2UodXJsKTtcbn1cblxuZGVjbGFyZSBjbGFzcyBJbWFnZUNvbXBvbmVudFR5cGUgZXh0ZW5kcyBSZWFjdE5hdGl2ZS5OYXRpdmVDb21wb25lbnQ8XG4gIEltYWdlUHJvcHNUeXBlLFxuPiB7XG4gIHN0YXRpYyBnZXRTaXplOiB0eXBlb2YgZ2V0U2l6ZTtcbiAgc3RhdGljIHByZWZldGNoOiB0eXBlb2YgcHJlZmV0Y2g7XG4gIHN0YXRpYyByZXNvbHZlQXNzZXRTb3VyY2U6IHR5cGVvZiByZXNvbHZlQXNzZXRTb3VyY2U7XG4gIHN0YXRpYyBwcm9wVHlwZXM6IHR5cGVvZiBJbWFnZVByb3BzO1xufVxuXG4vKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IGZvciBkaXNwbGF5aW5nIGRpZmZlcmVudCB0eXBlcyBvZiBpbWFnZXMsXG4gKiBpbmNsdWRpbmcgbmV0d29yayBpbWFnZXMsIHN0YXRpYyByZXNvdXJjZXMsIHRlbXBvcmFyeSBsb2NhbCBpbWFnZXMsIGFuZFxuICogaW1hZ2VzIGZyb20gbG9jYWwgZGlzaywgc3VjaCBhcyB0aGUgY2FtZXJhIHJvbGwuXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL2ltYWdlLmh0bWxcbiAqL1xubGV0IEltYWdlID0gKFxuICBwcm9wczogSW1hZ2VQcm9wc1R5cGUsXG4gIGZvcndhcmRlZFJlZjogP1JlYWN0LlJlZjwnUkNUSW1hZ2VWaWV3Jz4sXG4pID0+IHtcbiAgY29uc3Qgc291cmNlID0gcmVzb2x2ZUFzc2V0U291cmNlKHByb3BzLnNvdXJjZSkgfHwge1xuICAgIHVyaTogdW5kZWZpbmVkLFxuICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gIH07XG5cbiAgbGV0IHNvdXJjZXM7XG4gIGxldCBzdHlsZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgIHN0eWxlID0gZmxhdHRlblN0eWxlKFtzdHlsZXMuYmFzZSwgcHJvcHMuc3R5bGVdKSB8fCB7fTtcbiAgICBzb3VyY2VzID0gc291cmNlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0LCB1cml9ID0gc291cmNlO1xuICAgIHN0eWxlID0gZmxhdHRlblN0eWxlKFt7d2lkdGgsIGhlaWdodH0sIHN0eWxlcy5iYXNlLCBwcm9wcy5zdHlsZV0pIHx8IHt9O1xuICAgIHNvdXJjZXMgPSBbc291cmNlXTtcblxuICAgIGlmICh1cmkgPT09ICcnKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ3NvdXJjZS51cmkgc2hvdWxkIG5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCByZXNpemVNb2RlID0gcHJvcHMucmVzaXplTW9kZSB8fCBzdHlsZS5yZXNpemVNb2RlIHx8ICdjb3Zlcic7XG4gIGNvbnN0IHRpbnRDb2xvciA9IHN0eWxlLnRpbnRDb2xvcjtcblxuICBpZiAocHJvcHMuc3JjICE9IG51bGwpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnVGhlIDxJbWFnZT4gY29tcG9uZW50IHJlcXVpcmVzIGEgYHNvdXJjZWAgcHJvcGVydHkgcmF0aGVyIHRoYW4gYHNyY2AuJyxcbiAgICApO1xuICB9XG5cbiAgaWYgKHByb3BzLmNoaWxkcmVuICE9IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnVGhlIDxJbWFnZT4gY29tcG9uZW50IGNhbm5vdCBjb250YWluIGNoaWxkcmVuLiBJZiB5b3Ugd2FudCB0byByZW5kZXIgY29udGVudCBvbiB0b3Agb2YgdGhlIGltYWdlLCBjb25zaWRlciB1c2luZyB0aGUgPEltYWdlQmFja2dyb3VuZD4gY29tcG9uZW50IG9yIGFic29sdXRlIHBvc2l0aW9uaW5nLicsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJDVEltYWdlVmlld1xuICAgICAgey4uLnByb3BzfVxuICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgICByZXNpemVNb2RlPXtyZXNpemVNb2RlfVxuICAgICAgdGludENvbG9yPXt0aW50Q29sb3J9XG4gICAgICBzb3VyY2U9e3NvdXJjZXN9XG4gICAgLz5cbiAgKTtcbn07XG5cbi8vICRGbG93Rml4TWUgLSBUT0RPIFQyOTE1NjcyMSBgUmVhY3QuZm9yd2FyZFJlZmAgaXMgbm90IGRlZmluZWQgaW4gRmxvdywgeWV0LlxuSW1hZ2UgPSBSZWFjdC5mb3J3YXJkUmVmKEltYWdlKTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgd2lkdGggYW5kIGhlaWdodCAoaW4gcGl4ZWxzKSBvZiBhbiBpbWFnZSBwcmlvciB0byBkaXNwbGF5aW5nIGl0LlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy9pbWFnZS5odG1sI2dldHNpemVcbiAqL1xuSW1hZ2UuZ2V0U2l6ZSA9IGdldFNpemU7XG5cbi8qKlxuICogUHJlZmV0Y2hlcyBhIHJlbW90ZSBpbWFnZSBmb3IgbGF0ZXIgdXNlIGJ5IGRvd25sb2FkaW5nIGl0IHRvIHRoZSBkaXNrXG4gKiBjYWNoZS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvaW1hZ2UuaHRtbCNwcmVmZXRjaFxuICovXG5JbWFnZS5wcmVmZXRjaCA9IHByZWZldGNoO1xuXG4vKipcbiAqIFJlc29sdmVzIGFuIGFzc2V0IHJlZmVyZW5jZSBpbnRvIGFuIG9iamVjdC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3MvaW1hZ2UuaHRtbCNyZXNvbHZlYXNzZXRzb3VyY2VcbiAqL1xuSW1hZ2UucmVzb2x2ZUFzc2V0U291cmNlID0gcmVzb2x2ZUFzc2V0U291cmNlO1xuXG5JbWFnZS5wcm9wVHlwZXMgPSBJbWFnZVByb3BzO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJhc2U6IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSAoSW1hZ2U6IENsYXNzPEltYWdlQ29tcG9uZW50VHlwZT4pO1xuIl19