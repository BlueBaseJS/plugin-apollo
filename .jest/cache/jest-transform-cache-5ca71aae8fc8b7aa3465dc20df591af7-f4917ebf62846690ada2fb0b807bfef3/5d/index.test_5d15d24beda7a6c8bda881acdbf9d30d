2182acc44f4b17495801328745c467d3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../index"));

var withApolloProvider_1 = tslib_1.__importDefault(require("../withApolloProvider"));

var apollo_link_http_1 = require("apollo-link-http");

test('Plugin correctly registered', function _callee() {
  var BB;
  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          console.log('nice', apollo_link_http_1.HttpLink);
          expect(BB.Plugins.has('plugin-apollo')).toBeTruthy();

        case 5:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('Plugin should throw error if httpLinkOptions config is not given', function _callee2() {
  var BB, message, _jest$mock, HttpLink;

  return _regenerator.default.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context2.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          _context2.prev = 3;
          _context2.next = 6;
          return _regenerator.default.awrap(BB.boot());

        case 6:
          _context2.next = 11;
          break;

        case 8:
          _context2.prev = 8;
          _context2.t0 = _context2["catch"](3);
          message = _context2.t0.message;

        case 11:
          _jest$mock = jest.mock('apollo-link-http'), HttpLink = _jest$mock.HttpLink;
          BB.Filters.run("bluebase.boot.end", HttpLink);
          expect(message).toBe('HTTP Link URI not provided to Apollo');

        case 14:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[3, 8]]);
});
test('Mocking', function _callee3() {
  var BB, _jest$mock2, HttpLink;

  return _regenerator.default.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          BB = new core_1.BlueBase();
          _jest$mock2 = jest.mock('apollo-link-http'), HttpLink = _jest$mock2.HttpLink;
          console.log("mocked httplink ", HttpLink);
          _context3.next = 5;
          return _regenerator.default.awrap(BB.Filters.run("bluebase.boot.end", {
            HttpLink: HttpLink
          }));

        case 5:
          expect(HttpLink).toBeCalled();

        case 6:
        case "end":
          return _context3.stop();
      }
    }
  });
});
var client;
test('Plugin apolloProvider working', function _callee4() {
  return _regenerator.default.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          withApolloProvider_1.default(client);

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  });
});
describe('Apollo Plugin test', function () {
  it('Test with Apollo Config', function _callee5() {
    var BB, httpLinkOptions;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            BB = new core_1.BlueBase();
            _context5.next = 3;
            return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

          case 3:
            _context5.next = 5;
            return _regenerator.default.awrap(BB.Configs.setValue('plugins.apollo.httpLinkOptions', {
              uri: 'http://graphql'
            }));

          case 5:
            BB.boot();
            console.log('Plugins====>', BB.Configs.getValue('plugins.apollo.httpLinkOptions'));
            httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');
            expect(httpLinkOptions).toEqual({
              uri: 'http://graphql'
            });

          case 9:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvX190ZXN0c19fL2luZGV4LnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUdBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBLENBQUE7O0FBSUUsSUFBQSxrQkFBQSxHQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBOztBQVNGLElBQUksQ0FBQyw2QkFBRCxFQUFnQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDN0IsVUFBQSxFQUQ2QixHQUN4QixJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRHdCO0FBQUE7QUFBQSw0Q0FFN0IsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUY2Qjs7QUFBQTtBQUluQyxVQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksTUFBWixFQUFtQixrQkFBQSxDQUFBLFFBQW5CO0FBQ0EsVUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUsZUFBZixDQUFELENBQU4sQ0FBd0MsVUFBeEM7O0FBTG1DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQWhDLENBQUo7QUFTQSxJQUFJLENBQUMsa0VBQUQsRUFBcUU7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVsRSxVQUFBLEVBRmtFLEdBRTdELElBQUksTUFBQSxDQUFBLFFBQUosRUFGNkQ7QUFBQTtBQUFBLDRDQUlsRSxFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBQSxDQUFBLE9BQXBCLENBSmtFOztBQUFBO0FBQUE7QUFBQTtBQUFBLDRDQVFqRSxFQUFFLENBQUMsSUFBSCxFQVJpRTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBV3ZFLFVBQUEsT0FBTyxHQUFHLGFBQU0sT0FBaEI7O0FBWHVFO0FBQUEsdUJBY2hELElBQUksQ0FBQyxJQUFMLENBQVUsa0JBQVYsQ0FkZ0QsRUFjakUsUUFkaUUsY0FjakUsUUFkaUU7QUFldkUsVUFBQSxFQUFFLENBQUMsT0FBSCxDQUFXLEdBQVgsQ0FBZSxtQkFBZixFQUFtQyxRQUFuQztBQUVELFVBQUEsTUFBTSxDQUFDLE9BQUQsQ0FBTixDQUFnQixJQUFoQixDQUFxQixzQ0FBckI7O0FBakJ3RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFyRSxDQUFKO0FBc0JBLElBQUksQ0FBQyxTQUFELEVBQVk7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNULFVBQUEsRUFEUyxHQUNKLElBQUksTUFBQSxDQUFBLFFBQUosRUFESTtBQUFBLHdCQUVTLElBQUksQ0FBQyxJQUFMLENBQVUsa0JBQVYsQ0FGVCxFQUVSLFFBRlEsZUFFUixRQUZRO0FBR2YsVUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLGtCQUFaLEVBQStCLFFBQS9CO0FBSGU7QUFBQSw0Q0FJVCxFQUFFLENBQUMsT0FBSCxDQUFXLEdBQVgsQ0FBZSxtQkFBZixFQUFtQztBQUFDLFlBQUEsUUFBUSxFQUFSO0FBQUQsV0FBbkMsQ0FKUzs7QUFBQTtBQU1mLFVBQUEsTUFBTSxDQUFDLFFBQUQsQ0FBTixDQUFpQixVQUFqQjs7QUFOZTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFaLENBQUo7QUFXQSxJQUFJLE1BQUo7QUFDQSxJQUFJLENBQUMsK0JBQUQsRUFBa0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVuQyxVQUFBLG9CQUFBLENBQUEsT0FBQSxDQUFtQixNQUFuQjs7QUFGbUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBbEMsQ0FBSjtBQTZCQSxRQUFRLENBQUMsb0JBQUQsRUFBdUIsWUFBSztBQUVuQyxFQUFBLEVBQUUsQ0FBQyx5QkFBRCxFQUE0QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFdkIsWUFBQSxFQUZ1QixHQUVsQixJQUFJLE1BQUEsQ0FBQSxRQUFKLEVBRmtCO0FBQUE7QUFBQSw4Q0FHdkIsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLE9BQUEsQ0FBQSxPQUFwQixDQUh1Qjs7QUFBQTtBQUFBO0FBQUEsOENBTXZCLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixnQ0FBcEIsRUFBc0Q7QUFBRSxjQUFBLEdBQUcsRUFBRTtBQUFQLGFBQXRELENBTnVCOztBQUFBO0FBUTdCLFlBQUEsRUFBRSxDQUFDLElBQUg7QUFDQSxZQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksY0FBWixFQUE0QixFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsZ0NBQXBCLENBQTVCO0FBQ00sWUFBQSxlQVZ1QixHQVVMLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixnQ0FBcEIsQ0FWSztBQVc3QixZQUFBLE1BQU0sQ0FBQyxlQUFELENBQU4sQ0FBd0IsT0FBeEIsQ0FBZ0M7QUFBQyxjQUFBLEdBQUcsRUFBRTtBQUFOLGFBQWhDOztBQVg2QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUE1QixDQUFGO0FBY0EsQ0FoQk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsdWVCYXNlLCBcblx0Ly8gQmx1ZUJhc2VBcHAgXG59IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCBQbHVnaW4gZnJvbSAnLi4vaW5kZXgnO1xuLy8gaW1wb3J0IHsgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgV2l0aEFwb2xsb1Byb3ZpZGVyIGZyb20gJy4uL3dpdGhBcG9sbG9Qcm92aWRlcic7XG4vLyBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuLy8gaW1wb3J0IHsgd2FpdEZvckVsZW1lbnQgfSBmcm9tICdlbnp5bWUtYXN5bmMtaGVscGVycyc7XG4gIGltcG9ydCB7IEh0dHBMaW5rIH0gZnJvbSAnYXBvbGxvLWxpbmstaHR0cCc7XG4vLyBpbXBvcnQgeyBzYW1wbGUgfSBmcm9tICcuLi9fX21vY2tzX18vaW5kZXgnXG4vLyBpbXBvcnQgeyB3YWl0Rm9yRWxlbWVudCB9IGZyb20gJ2VuenltZS1hc3luYy1oZWxwZXJzJztcblxuXG5cbi8vIGNvbnN0IEN1c3RvbVRleHQgPSAoKSA9PiA8VGV4dD5FdmVyeXRoaW5nIGlzIG9rITwvVGV4dD47XG5cbi8vd29ya2luZyBhbmQgdGVzdGluZ1xudGVzdCgnUGx1Z2luIGNvcnJlY3RseSByZWdpc3RlcmVkJywgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG5cdFxuXHRjb25zb2xlLmxvZygnbmljZScsSHR0cExpbmspXG5cdGV4cGVjdChCQi5QbHVnaW5zLmhhcygncGx1Z2luLWFwb2xsbycpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuLy93b3JraW5nIGFuZCB0ZXN0aW5nXG50ZXN0KCdQbHVnaW4gc2hvdWxkIHRocm93IGVycm9yIGlmIGh0dHBMaW5rT3B0aW9ucyBjb25maWcgaXMgbm90IGdpdmVuJywgYXN5bmMgKCkgPT4ge1xuXG5cdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdFxuXHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG5cdGxldCBtZXNzYWdlO1xuXG5cdHRyeSB7XG5cdFx0YXdhaXQgQkIuYm9vdCgpO1xuXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0bWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG5cdH1cblxuXHRjb25zdCB7SHR0cExpbmt9IDphbnkgPSBqZXN0Lm1vY2soJ2Fwb2xsby1saW5rLWh0dHAnKTtcblx0XHRCQi5GaWx0ZXJzLnJ1bihcImJsdWViYXNlLmJvb3QuZW5kXCIsSHR0cExpbmspO1xuXG5cdGV4cGVjdChtZXNzYWdlKS50b0JlKCdIVFRQIExpbmsgVVJJIG5vdCBwcm92aWRlZCB0byBBcG9sbG8nKTtcblxufSk7XG5cblxudGVzdCgnTW9ja2luZycsIGFzeW5jICgpID0+IHtcblx0Y29uc3QgQkIgPSBuZXcgQmx1ZUJhc2UoKTtcblx0Y29uc3Qge0h0dHBMaW5rfTphbnkgID0gamVzdC5tb2NrKCdhcG9sbG8tbGluay1odHRwJyk7XG5cdGNvbnNvbGUubG9nKFwibW9ja2VkIGh0dHBsaW5rIFwiLEh0dHBMaW5rKVxuXHRhd2FpdCBCQi5GaWx0ZXJzLnJ1bihcImJsdWViYXNlLmJvb3QuZW5kXCIse0h0dHBMaW5rfSk7XG5cblx0ZXhwZWN0KEh0dHBMaW5rKS50b0JlQ2FsbGVkKCk7XG5cbn0pO1xuXG5cbmxldCBjbGllbnQ6YW55O1xudGVzdCgnUGx1Z2luIGFwb2xsb1Byb3ZpZGVyIHdvcmtpbmcnLCBhc3luYyAoKSA9PiB7XG5cblx0XHQgV2l0aEFwb2xsb1Byb3ZpZGVyKGNsaWVudCBhcyBhbnkpO1xufSk7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vLyBjbGFzcyBNb2NrQ2xhc3Mge1xuLy8gXHRjb25zdHJ1Y3RvcihwdWJsaWMgaW5wdXQpIHtcblxuLy8gXHR9XG4vLyB9XG5cbi8vIGluc3RhbmNlb2YuaW5wdXQgPT09IFxuXG4vLyBtaXNlKHJlc29sdmUgPT4gcmVzb2x2ZSgpKSk7XG5cbi8vIFx0Y29uc3Qgd3JhcHBlciA9IG1vdW50KFxuLy8gXHRcdDxCbHVlQmFzZUFwcCBwbHVnaW5zPXtbUGx1Z2luXX0gY29uZmlncz17eyAncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJzogeyB1cmk6ICd3d3cuZ1xuXG5kZXNjcmliZSgnQXBvbGxvIFBsdWdpbiB0ZXN0JywgKCkgPT4ge1xuXG5cdGl0KCdUZXN0IHdpdGggQXBvbGxvIENvbmZpZycsIGFzeW5jICgpID0+IHtcblxuXHRcdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdFx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXHRcdC8vIEFwb2xsb1BsdWdpbi5nZXRDbGllbnQoKTtcblx0XHQvL2NvbnN0IFBsdWdpbnMgPSBhd2FpdCBCQi5QbHVnaW5zLmhhcyhQbHVnaW4pO1xuXHRcdGF3YWl0IEJCLkNvbmZpZ3Muc2V0VmFsdWUoJ3BsdWdpbnMuYXBvbGxvLmh0dHBMaW5rT3B0aW9ucycsIHsgdXJpOiAnaHR0cDovL2dyYXBocWwnIH0pO1xuXG5cdFx0QkIuYm9vdCgpO1xuXHRcdGNvbnNvbGUubG9nKCdQbHVnaW5zPT09PT4nLCBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnKSk7XG5cdFx0Y29uc3QgaHR0cExpbmtPcHRpb25zID0gQkIuQ29uZmlncy5nZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJyk7XG5cdFx0ZXhwZWN0KGh0dHBMaW5rT3B0aW9ucykudG9FcXVhbCh7dXJpOiAnaHR0cDovL2dyYXBocWwnfSk7XG5cblx0fSk7XG59KTtcblxuIl19