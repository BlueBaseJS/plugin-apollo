9793fc9790d658c84a1a45dcc0b3cc2d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var react_apollo_1 = require("react-apollo");

var core_1 = require("@bluebase/core");

var apollo_client_1 = require("apollo-client");

var apollo_link_1 = require("apollo-link");

var apollo_link_http_1 = require("apollo-link-http");

var apollo_cache_inmemory_1 = require("apollo-cache-inmemory");

var withApolloProvider_1 = tslib_1.__importDefault(require("./withApolloProvider"));

exports.default = core_1.createPlugin({
  description: 'üåç A BlueBase Plugin that integrates Apollo GraphQL Client',
  key: 'plugin-apollo',
  name: 'Apollo Plugin',
  version: '1.0.0',
  components: {
    ApolloConsumer: react_apollo_1.ApolloConsumer,
    GraphqlMutation: react_apollo_1.Mutation,
    GraphqlQuery: react_apollo_1.Query,
    GraphqlSubscription: react_apollo_1.Subscription
  },
  defaultConfigs: {
    'plugin.apollo.clientOptions': {},
    'plugin.apollo.httpLinkOptions': {}
  },
  filters: {
    'bluebase.boot.end': function bluebaseBootEnd(bootOptions, _ctx, BB) {
      var httpLinkOptions, clientOptions, httpLink, links, cache, client;
      return _regenerator.default.async(function bluebaseBootEnd$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');
              clientOptions = BB.Configs.getValue('plugins.apollo.clientOptions');

              if (httpLinkOptions) {
                _context.next = 4;
                break;
              }

              throw new Error('HTTP Link URI not provided to Apollo');

            case 4:
              console.log("httlinloptions", httpLinkOptions);
              httpLink = new apollo_link_http_1.HttpLink(httpLinkOptions);
              _context.next = 8;
              return _regenerator.default.awrap(BB.Filters.run('plugin.apollo.links', [httpLink]));

            case 8:
              links = _context.sent;
              _context.next = 11;
              return _regenerator.default.awrap(BB.Filters.run('plugin.apollo.cache', new apollo_cache_inmemory_1.InMemoryCache()));

            case 11:
              cache = _context.sent;
              console.log("clientoptionssss", httpLinkOptions);
              client = new apollo_client_1.ApolloClient((0, _extends2.default)({
                cache: cache,
                link: apollo_link_1.ApolloLink.from(links)
              }, clientOptions));
              BB.Components.addHocs('BlueBaseContent', withApolloProvider_1.default(client));
              return _context.abrupt("return", bootOptions);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLGNBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUVBLElBQUEsZUFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUE7O0FBQ0EsSUFBQSxhQUFBLEdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQTs7QUFDQSxJQUFBLGtCQUFBLEdBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUE7O0FBQ0EsSUFBQSx1QkFBQSxHQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBOztBQUNBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBLENBQUE7O0FBRUEsT0FBQSxDQUFBLE9BQUEsR0FBZSxNQUFBLENBQUEsWUFBQSxDQUFhO0FBQzNCLEVBQUEsV0FBVyxFQUFFLDREQURjO0FBRTNCLEVBQUEsR0FBRyxFQUFFLGVBRnNCO0FBRzNCLEVBQUEsSUFBSSxFQUFFLGVBSHFCO0FBSTNCLEVBQUEsT0FBTyxFQUFFLE9BSmtCO0FBTTNCLEVBQUEsVUFBVSxFQUFFO0FBQ1gsSUFBQSxjQUFjLEVBQWQsY0FBQSxDQUFBLGNBRFc7QUFFWCxJQUFBLGVBQWUsRUFBRSxjQUFBLENBQUEsUUFGTjtBQUdYLElBQUEsWUFBWSxFQUFFLGNBQUEsQ0FBQSxLQUhIO0FBSVgsSUFBQSxtQkFBbUIsRUFBRSxjQUFBLENBQUE7QUFKVixHQU5lO0FBWTNCLEVBQUEsY0FBYyxFQUFFO0FBQ2YsbUNBQStCLEVBRGhCO0FBRWYscUNBQWlDO0FBRmxCLEdBWlc7QUFnQjNCLEVBQUEsT0FBTyxFQUFFO0FBQ1IseUJBQXFCLHlCQUFPLFdBQVAsRUFBaUMsSUFBakMsRUFBNEMsRUFBNUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2QsY0FBQSxlQURjLEdBQ0ksRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLGdDQUFwQixDQURKO0FBRWQsY0FBQSxhQUZjLEdBRUUsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLDhCQUFwQixDQUZGOztBQUFBLGtCQUdmLGVBSGU7QUFBQTtBQUFBO0FBQUE7O0FBQUEsb0JBSWIsSUFBSSxLQUFKLENBQVUsc0NBQVYsQ0FKYTs7QUFBQTtBQU9wQixjQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksZ0JBQVosRUFBNkIsZUFBN0I7QUFDTSxjQUFBLFFBUmMsR0FRSCxJQUFJLGtCQUFBLENBQUEsUUFBSixDQUFhLGVBQWIsQ0FSRztBQUFBO0FBQUEsZ0RBU0EsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUscUJBQWYsRUFBc0MsQ0FBQyxRQUFELENBQXRDLENBVEE7O0FBQUE7QUFTZCxjQUFBLEtBVGM7QUFBQTtBQUFBLGdEQVVBLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLHFCQUFmLEVBQXNDLElBQUksdUJBQUEsQ0FBQSxhQUFKLEVBQXRDLENBVkE7O0FBQUE7QUFVZCxjQUFBLEtBVmM7QUFXcEIsY0FBQSxPQUFPLENBQUMsR0FBUixDQUFZLGtCQUFaLEVBQStCLGVBQS9CO0FBR00sY0FBQSxNQWRjLEdBY2EsSUFBSSxlQUFBLENBQUEsWUFBSixDQUFnQix1QkFBQTtBQUNoRCxnQkFBQSxLQUFLLEVBQUwsS0FEZ0Q7QUFFaEQsZ0JBQUEsSUFBSSxFQUFFLGFBQUEsQ0FBQSxVQUFBLENBQVcsSUFBWCxDQUFnQixLQUFoQjtBQUYwQyxlQUFBLEVBRzdDLGFBSDZDLENBQWhCLENBZGI7QUFvQnBCLGNBQUEsRUFBRSxDQUFDLFVBQUgsQ0FBYyxPQUFkLENBQXNCLGlCQUF0QixFQUF5QyxvQkFBQSxDQUFBLE9BQUEsQ0FBbUIsTUFBbkIsQ0FBekM7QUFwQm9CLCtDQXFCYixXQXJCYTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURiO0FBaEJrQixDQUFiLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9Db25zdW1lciwgTXV0YXRpb24sIFF1ZXJ5LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyZWFjdC1hcG9sbG8nO1xuaW1wb3J0IHsgQmx1ZUJhc2UsIEJvb3RPcHRpb25zLCBjcmVhdGVQbHVnaW4gfSBmcm9tICdAYmx1ZWJhc2UvY29yZSc7XG5cbmltcG9ydCB7IEFwb2xsb0NsaWVudCB9IGZyb20gJ2Fwb2xsby1jbGllbnQnO1xuaW1wb3J0IHsgQXBvbGxvTGluayB9IGZyb20gJ2Fwb2xsby1saW5rJztcbmltcG9ydCB7IEh0dHBMaW5rIH0gZnJvbSAnYXBvbGxvLWxpbmstaHR0cCc7XG5pbXBvcnQgeyBJbk1lbW9yeUNhY2hlIH0gZnJvbSAnYXBvbGxvLWNhY2hlLWlubWVtb3J5JztcbmltcG9ydCB3aXRoQXBvbGxvUHJvdmlkZXIgZnJvbSAnLi93aXRoQXBvbGxvUHJvdmlkZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQbHVnaW4oe1xuXHRkZXNjcmlwdGlvbjogJ/CfjI0gQSBCbHVlQmFzZSBQbHVnaW4gdGhhdCBpbnRlZ3JhdGVzIEFwb2xsbyBHcmFwaFFMIENsaWVudCcsXG5cdGtleTogJ3BsdWdpbi1hcG9sbG8nLFxuXHRuYW1lOiAnQXBvbGxvIFBsdWdpbicsXG5cdHZlcnNpb246ICcxLjAuMCcsXG5cblx0Y29tcG9uZW50czoge1xuXHRcdEFwb2xsb0NvbnN1bWVyLFxuXHRcdEdyYXBocWxNdXRhdGlvbjogTXV0YXRpb24sXG5cdFx0R3JhcGhxbFF1ZXJ5OiBRdWVyeSxcblx0XHRHcmFwaHFsU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25cblx0fSxcblx0ZGVmYXVsdENvbmZpZ3M6IHtcblx0XHQncGx1Z2luLmFwb2xsby5jbGllbnRPcHRpb25zJzoge30sXG5cdFx0J3BsdWdpbi5hcG9sbG8uaHR0cExpbmtPcHRpb25zJzoge31cblx0fSxcblx0ZmlsdGVyczoge1xuXHRcdCdibHVlYmFzZS5ib290LmVuZCc6IGFzeW5jIChib290T3B0aW9uczogQm9vdE9wdGlvbnMsIF9jdHg6IGFueSwgQkI6IEJsdWVCYXNlKSA9PiB7XG5cdFx0XHRjb25zdCBodHRwTGlua09wdGlvbnMgPSBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5odHRwTGlua09wdGlvbnMnKTtcblx0XHRcdGNvbnN0IGNsaWVudE9wdGlvbnMgPSBCQi5Db25maWdzLmdldFZhbHVlKCdwbHVnaW5zLmFwb2xsby5jbGllbnRPcHRpb25zJyk7XG5cdFx0XHRpZiAoIWh0dHBMaW5rT3B0aW9ucykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0hUVFAgTGluayBVUkkgbm90IHByb3ZpZGVkIHRvIEFwb2xsbycpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zb2xlLmxvZyhcImh0dGxpbmxvcHRpb25zXCIsaHR0cExpbmtPcHRpb25zKTtcblx0XHRcdGNvbnN0IGh0dHBMaW5rID0gbmV3IEh0dHBMaW5rKGh0dHBMaW5rT3B0aW9ucyk7XG5cdFx0XHRjb25zdCBsaW5rcyA9IGF3YWl0IEJCLkZpbHRlcnMucnVuKCdwbHVnaW4uYXBvbGxvLmxpbmtzJywgW2h0dHBMaW5rXSk7XG5cdFx0XHRjb25zdCBjYWNoZSA9IGF3YWl0IEJCLkZpbHRlcnMucnVuKCdwbHVnaW4uYXBvbGxvLmNhY2hlJywgbmV3IEluTWVtb3J5Q2FjaGUoKSk7XG5cdFx0XHRjb25zb2xlLmxvZyhcImNsaWVudG9wdGlvbnNzc3NcIixodHRwTGlua09wdGlvbnMpO1xuXG5cblx0XHRcdGNvbnN0IGNsaWVudDogQXBvbGxvQ2xpZW50PHt9PiA9IG5ldyBBcG9sbG9DbGllbnQoe1xuXHRcdFx0XHRjYWNoZSxcblx0XHRcdFx0bGluazogQXBvbGxvTGluay5mcm9tKGxpbmtzKSxcblx0XHRcdFx0Li4uY2xpZW50T3B0aW9uc1xuXHRcdFx0fSk7XG5cblx0XHRcdEJCLkNvbXBvbmVudHMuYWRkSG9jcygnQmx1ZUJhc2VDb250ZW50Jywgd2l0aEFwb2xsb1Byb3ZpZGVyKGNsaWVudCkpO1xuXHRcdFx0cmV0dXJuIGJvb3RPcHRpb25zO1xuXHRcdH0sXG5cdH1cbn0pO1xuIl19