fae072c710c3844109576e15f640b871
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var react_apollo_1 = require("react-apollo");

var core_1 = require("@bluebase/core");

var apollo_client_1 = require("apollo-client");

var apollo_link_1 = require("apollo-link");

var apollo_link_http_1 = require("apollo-link-http");

var apollo_cache_inmemory_1 = require("apollo-cache-inmemory");

var withApolloProvider_1 = tslib_1.__importDefault(require("./withApolloProvider"));

exports.default = core_1.createPlugin({
  description: 'üåç A BlueBase Plugin that integrates Apollo GraphQL Client',
  key: 'plugin-apollo',
  name: 'Apollo Plugin',
  version: '1.0.0',
  components: {
    ApolloConsumer: react_apollo_1.ApolloConsumer,
    GraphqlMutation: react_apollo_1.Mutation,
    GraphqlQuery: react_apollo_1.Query,
    GraphqlSubscription: react_apollo_1.Subscription
  },
  defaultConfigs: {
    'plugin.apollo.clientOptions': {},
    'plugin.apollo.httpLinkOptions': {}
  },
  filters: {
    'bluebase.boot.end': function bluebaseBootEnd(bootOptions, _ctx, BB) {
      var httpLinkOptions, clientOptions, httpLink, links, cache, client;
      return _regenerator.default.async(function bluebaseBootEnd$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              httpLinkOptions = BB.Configs.getValue('plugins.apollo.httpLinkOptions');
              clientOptions = BB.Configs.getValue('plugins.apollo.clientOptions');

              if (httpLinkOptions) {
                _context.next = 4;
                break;
              }

              throw new Error('HTTP Link URI not provided to Apollo');

            case 4:
              httpLink = new apollo_link_http_1.HttpLink(httpLinkOptions);
              _context.next = 7;
              return _regenerator.default.awrap(BB.Filters.run('plugin.apollo.links', [httpLink]));

            case 7:
              links = _context.sent;
              _context.next = 10;
              return _regenerator.default.awrap(BB.Filters.run('plugin.apollo.cache', new apollo_cache_inmemory_1.InMemoryCache()));

            case 10:
              cache = _context.sent;
              client = new apollo_client_1.ApolloClient((0, _extends2.default)({
                cache: cache,
                link: apollo_link_1.ApolloLink.from(links)
              }, clientOptions));
              BB.Components.addHocs('BlueBaseContent', withApolloProvider_1.default(client));
              return _context.abrupt("return", bootOptions);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9hcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLGNBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUVBLElBQUEsZUFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUE7O0FBQ0EsSUFBQSxhQUFBLEdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQTs7QUFDQSxJQUFBLGtCQUFBLEdBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUE7O0FBQ0EsSUFBQSx1QkFBQSxHQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBOztBQUNBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBLENBQUE7O0FBRUEsT0FBQSxDQUFBLE9BQUEsR0FBZSxNQUFBLENBQUEsWUFBQSxDQUFhO0FBQzNCLEVBQUEsV0FBVyxFQUFFLDREQURjO0FBRTNCLEVBQUEsR0FBRyxFQUFFLGVBRnNCO0FBRzNCLEVBQUEsSUFBSSxFQUFFLGVBSHFCO0FBSTNCLEVBQUEsT0FBTyxFQUFFLE9BSmtCO0FBTTNCLEVBQUEsVUFBVSxFQUFFO0FBQ1gsSUFBQSxjQUFjLEVBQWQsY0FBQSxDQUFBLGNBRFc7QUFFWCxJQUFBLGVBQWUsRUFBRSxjQUFBLENBQUEsUUFGTjtBQUdYLElBQUEsWUFBWSxFQUFFLGNBQUEsQ0FBQSxLQUhIO0FBSVgsSUFBQSxtQkFBbUIsRUFBRSxjQUFBLENBQUE7QUFKVixHQU5lO0FBWTNCLEVBQUEsY0FBYyxFQUFFO0FBQ2YsbUNBQStCLEVBRGhCO0FBRWYscUNBQWlDO0FBRmxCLEdBWlc7QUFnQjNCLEVBQUEsT0FBTyxFQUFFO0FBQ1IseUJBQXFCLHlCQUFPLFdBQVAsRUFBaUMsSUFBakMsRUFBNEMsRUFBNUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2QsY0FBQSxlQURjLEdBQ0ksRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLGdDQUFwQixDQURKO0FBRWQsY0FBQSxhQUZjLEdBRUUsRUFBRSxDQUFDLE9BQUgsQ0FBVyxRQUFYLENBQW9CLDhCQUFwQixDQUZGOztBQUFBLGtCQUdmLGVBSGU7QUFBQTtBQUFBO0FBQUE7O0FBQUEsb0JBSWIsSUFBSSxLQUFKLENBQVUsc0NBQVYsQ0FKYTs7QUFBQTtBQU9kLGNBQUEsUUFQYyxHQU9ILElBQUksa0JBQUEsQ0FBQSxRQUFKLENBQWEsZUFBYixDQVBHO0FBQUE7QUFBQSxnREFRQSxFQUFFLENBQUMsT0FBSCxDQUFXLEdBQVgsQ0FBZSxxQkFBZixFQUFzQyxDQUFDLFFBQUQsQ0FBdEMsQ0FSQTs7QUFBQTtBQVFkLGNBQUEsS0FSYztBQUFBO0FBQUEsZ0RBU0EsRUFBRSxDQUFDLE9BQUgsQ0FBVyxHQUFYLENBQWUscUJBQWYsRUFBc0MsSUFBSSx1QkFBQSxDQUFBLGFBQUosRUFBdEMsQ0FUQTs7QUFBQTtBQVNkLGNBQUEsS0FUYztBQVdkLGNBQUEsTUFYYyxHQVdhLElBQUksZUFBQSxDQUFBLFlBQUosQ0FBZ0IsdUJBQUE7QUFDaEQsZ0JBQUEsS0FBSyxFQUFMLEtBRGdEO0FBRWhELGdCQUFBLElBQUksRUFBRSxhQUFBLENBQUEsVUFBQSxDQUFXLElBQVgsQ0FBZ0IsS0FBaEI7QUFGMEMsZUFBQSxFQUc3QyxhQUg2QyxDQUFoQixDQVhiO0FBaUJwQixjQUFBLEVBQUUsQ0FBQyxVQUFILENBQWMsT0FBZCxDQUFzQixpQkFBdEIsRUFBeUMsb0JBQUEsQ0FBQSxPQUFBLENBQW1CLE1BQW5CLENBQXpDO0FBakJvQiwrQ0FrQmIsV0FsQmE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFEYjtBQWhCa0IsQ0FBYixDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBvbGxvQ29uc3VtZXIsIE11dGF0aW9uLCBRdWVyeSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncmVhY3QtYXBvbGxvJztcbmltcG9ydCB7IEJsdWVCYXNlLCBCb290T3B0aW9ucywgY3JlYXRlUGx1Z2luIH0gZnJvbSAnQGJsdWViYXNlL2NvcmUnO1xuXG5pbXBvcnQgeyBBcG9sbG9DbGllbnQgfSBmcm9tICdhcG9sbG8tY2xpZW50JztcbmltcG9ydCB7IEFwb2xsb0xpbmsgfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQgeyBIdHRwTGluayB9IGZyb20gJ2Fwb2xsby1saW5rLWh0dHAnO1xuaW1wb3J0IHsgSW5NZW1vcnlDYWNoZSB9IGZyb20gJ2Fwb2xsby1jYWNoZS1pbm1lbW9yeSc7XG5pbXBvcnQgd2l0aEFwb2xsb1Byb3ZpZGVyIGZyb20gJy4vd2l0aEFwb2xsb1Byb3ZpZGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUGx1Z2luKHtcblx0ZGVzY3JpcHRpb246ICfwn4yNIEEgQmx1ZUJhc2UgUGx1Z2luIHRoYXQgaW50ZWdyYXRlcyBBcG9sbG8gR3JhcGhRTCBDbGllbnQnLFxuXHRrZXk6ICdwbHVnaW4tYXBvbGxvJyxcblx0bmFtZTogJ0Fwb2xsbyBQbHVnaW4nLFxuXHR2ZXJzaW9uOiAnMS4wLjAnLFxuXG5cdGNvbXBvbmVudHM6IHtcblx0XHRBcG9sbG9Db25zdW1lcixcblx0XHRHcmFwaHFsTXV0YXRpb246IE11dGF0aW9uLFxuXHRcdEdyYXBocWxRdWVyeTogUXVlcnksXG5cdFx0R3JhcGhxbFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uXG5cdH0sXG5cdGRlZmF1bHRDb25maWdzOiB7XG5cdFx0J3BsdWdpbi5hcG9sbG8uY2xpZW50T3B0aW9ucyc6IHt9LFxuXHRcdCdwbHVnaW4uYXBvbGxvLmh0dHBMaW5rT3B0aW9ucyc6IHt9XG5cdH0sXG5cdGZpbHRlcnM6IHtcblx0XHQnYmx1ZWJhc2UuYm9vdC5lbmQnOiBhc3luYyAoYm9vdE9wdGlvbnM6IEJvb3RPcHRpb25zLCBfY3R4OiBhbnksIEJCOiBCbHVlQmFzZSkgPT4ge1xuXHRcdFx0Y29uc3QgaHR0cExpbmtPcHRpb25zID0gQkIuQ29uZmlncy5nZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8uaHR0cExpbmtPcHRpb25zJyk7XG5cdFx0XHRjb25zdCBjbGllbnRPcHRpb25zID0gQkIuQ29uZmlncy5nZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8uY2xpZW50T3B0aW9ucycpO1xuXHRcdFx0aWYgKCFodHRwTGlua09wdGlvbnMpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdIVFRQIExpbmsgVVJJIG5vdCBwcm92aWRlZCB0byBBcG9sbG8nKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgaHR0cExpbmsgPSBuZXcgSHR0cExpbmsoaHR0cExpbmtPcHRpb25zKTtcblx0XHRcdGNvbnN0IGxpbmtzID0gYXdhaXQgQkIuRmlsdGVycy5ydW4oJ3BsdWdpbi5hcG9sbG8ubGlua3MnLCBbaHR0cExpbmtdKTtcblx0XHRcdGNvbnN0IGNhY2hlID0gYXdhaXQgQkIuRmlsdGVycy5ydW4oJ3BsdWdpbi5hcG9sbG8uY2FjaGUnLCBuZXcgSW5NZW1vcnlDYWNoZSgpKTtcblxuXHRcdFx0Y29uc3QgY2xpZW50OiBBcG9sbG9DbGllbnQ8e30+ID0gbmV3IEFwb2xsb0NsaWVudCh7XG5cdFx0XHRcdGNhY2hlLFxuXHRcdFx0XHRsaW5rOiBBcG9sbG9MaW5rLmZyb20obGlua3MpLFxuXHRcdFx0XHQuLi5jbGllbnRPcHRpb25zXG5cdFx0XHR9KTtcblxuXHRcdFx0QkIuQ29tcG9uZW50cy5hZGRIb2NzKCdCbHVlQmFzZUNvbnRlbnQnLCB3aXRoQXBvbGxvUHJvdmlkZXIoY2xpZW50KSk7XG5cdFx0XHRyZXR1cm4gYm9vdE9wdGlvbnM7XG5cdFx0fSxcblx0fVxufSk7XG4iXX0=