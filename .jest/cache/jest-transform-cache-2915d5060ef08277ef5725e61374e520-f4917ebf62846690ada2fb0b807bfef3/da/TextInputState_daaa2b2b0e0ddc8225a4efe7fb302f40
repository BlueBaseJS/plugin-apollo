bc6efb9b21106c24fa052caa95b1825f
'use strict';

var Platform = require('Platform');

var UIManager = require('UIManager');

var currentlyFocusedID = null;
var inputs = new Set();

function currentlyFocusedField() {
  return currentlyFocusedID;
}

function focusTextInput(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {
    currentlyFocusedID = textFieldID;

    if (Platform.OS === 'ios') {
      UIManager.focus(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
    }
  }
}

function blurTextInput(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID !== null) {
    currentlyFocusedID = null;

    if (Platform.OS === 'ios') {
      UIManager.blur(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
    }
  }
}

function registerInput(textFieldID) {
  inputs.add(textFieldID);
}

function unregisterInput(textFieldID) {
  inputs.delete(textFieldID);
}

function isTextInput(textFieldID) {
  return inputs.has(textFieldID);
}

module.exports = {
  currentlyFocusedField: currentlyFocusedField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImN1cnJlbnRseUZvY3VzZWRJRCIsImlucHV0cyIsIlNldCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzVGV4dElucHV0IiwidGV4dEZpZWxkSUQiLCJPUyIsImZvY3VzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJBbmRyb2lkVGV4dElucHV0IiwiQ29tbWFuZHMiLCJibHVyVGV4dElucHV0IiwiYmx1ciIsInJlZ2lzdGVySW5wdXQiLCJhZGQiLCJ1bnJlZ2lzdGVySW5wdXQiLCJkZWxldGUiLCJpc1RleHRJbnB1dCIsImhhcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQWVBOztBQUVBLElBQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBeEI7O0FBQ0EsSUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFFQSxJQUFJRSxrQkFBMkIsR0FBRyxJQUFsQztBQUNBLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxHQUFKLEVBQWY7O0FBTUEsU0FBU0MscUJBQVQsR0FBMEM7QUFDeEMsU0FBT0gsa0JBQVA7QUFDRDs7QUFPRCxTQUFTSSxjQUFULENBQXdCQyxXQUF4QixFQUE4QztBQUM1QyxNQUFJTCxrQkFBa0IsS0FBS0ssV0FBdkIsSUFBc0NBLFdBQVcsS0FBSyxJQUExRCxFQUFnRTtBQUM5REwsSUFBQUEsa0JBQWtCLEdBQUdLLFdBQXJCOztBQUNBLFFBQUlSLFFBQVEsQ0FBQ1MsRUFBVCxLQUFnQixLQUFwQixFQUEyQjtBQUN6QlAsTUFBQUEsU0FBUyxDQUFDUSxLQUFWLENBQWdCRixXQUFoQjtBQUNELEtBRkQsTUFFTyxJQUFJUixRQUFRLENBQUNTLEVBQVQsS0FBZ0IsU0FBcEIsRUFBK0I7QUFDcENQLE1BQUFBLFNBQVMsQ0FBQ1MsMEJBQVYsQ0FDRUgsV0FERixFQUVFTixTQUFTLENBQUNVLGdCQUFWLENBQTJCQyxRQUEzQixDQUFvQ04sY0FGdEMsRUFHRSxJQUhGO0FBS0Q7QUFDRjtBQUNGOztBQU9ELFNBQVNPLGFBQVQsQ0FBdUJOLFdBQXZCLEVBQTZDO0FBQzNDLE1BQUlMLGtCQUFrQixLQUFLSyxXQUF2QixJQUFzQ0EsV0FBVyxLQUFLLElBQTFELEVBQWdFO0FBQzlETCxJQUFBQSxrQkFBa0IsR0FBRyxJQUFyQjs7QUFDQSxRQUFJSCxRQUFRLENBQUNTLEVBQVQsS0FBZ0IsS0FBcEIsRUFBMkI7QUFDekJQLE1BQUFBLFNBQVMsQ0FBQ2EsSUFBVixDQUFlUCxXQUFmO0FBQ0QsS0FGRCxNQUVPLElBQUlSLFFBQVEsQ0FBQ1MsRUFBVCxLQUFnQixTQUFwQixFQUErQjtBQUNwQ1AsTUFBQUEsU0FBUyxDQUFDUywwQkFBVixDQUNFSCxXQURGLEVBRUVOLFNBQVMsQ0FBQ1UsZ0JBQVYsQ0FBMkJDLFFBQTNCLENBQW9DQyxhQUZ0QyxFQUdFLElBSEY7QUFLRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBU0UsYUFBVCxDQUF1QlIsV0FBdkIsRUFBNEM7QUFDMUNKLEVBQUFBLE1BQU0sQ0FBQ2EsR0FBUCxDQUFXVCxXQUFYO0FBQ0Q7O0FBRUQsU0FBU1UsZUFBVCxDQUF5QlYsV0FBekIsRUFBOEM7QUFDNUNKLEVBQUFBLE1BQU0sQ0FBQ2UsTUFBUCxDQUFjWCxXQUFkO0FBQ0Q7O0FBRUQsU0FBU1ksV0FBVCxDQUFxQlosV0FBckIsRUFBMEM7QUFDeEMsU0FBT0osTUFBTSxDQUFDaUIsR0FBUCxDQUFXYixXQUFYLENBQVA7QUFDRDs7QUFFRGMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZqQixFQUFBQSxxQkFBcUIsRUFBckJBLHFCQURlO0FBRWZDLEVBQUFBLGNBQWMsRUFBZEEsY0FGZTtBQUdmTyxFQUFBQSxhQUFhLEVBQWJBLGFBSGU7QUFJZkUsRUFBQUEsYUFBYSxFQUFiQSxhQUplO0FBS2ZFLEVBQUFBLGVBQWUsRUFBZkEsZUFMZTtBQU1mRSxFQUFBQSxXQUFXLEVBQVhBO0FBTmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqXG4gKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBjb29yZGluYXRpbmcgdGhlIFwiZm9jdXNlZFwiXG4gKiBzdGF0ZSBmb3IgVGV4dElucHV0cy4gQWxsIGNhbGxzIHJlbGF0aW5nIHRvIHRoZSBrZXlib2FyZFxuICogc2hvdWxkIGJlIGZ1bm5lbGVkIHRocm91Z2ggaGVyZVxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCdQbGF0Zm9ybScpO1xuY29uc3QgVUlNYW5hZ2VyID0gcmVxdWlyZSgnVUlNYW5hZ2VyJyk7XG5cbmxldCBjdXJyZW50bHlGb2N1c2VkSUQ6ID9udW1iZXIgPSBudWxsO1xuY29uc3QgaW5wdXRzID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIElEIG9mIHRoZSBjdXJyZW50bHkgZm9jdXNlZCB0ZXh0IGZpZWxkLCBpZiBvbmUgZXhpc3RzXG4gKiBJZiBubyB0ZXh0IGZpZWxkIGlzIGZvY3VzZWQgaXQgcmV0dXJucyBudWxsXG4gKi9cbmZ1bmN0aW9uIGN1cnJlbnRseUZvY3VzZWRGaWVsZCgpOiA/bnVtYmVyIHtcbiAgcmV0dXJuIGN1cnJlbnRseUZvY3VzZWRJRDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gVGV4dElucHV0SUQgaWQgb2YgdGhlIHRleHQgZmllbGQgdG8gZm9jdXNcbiAqIEZvY3VzZXMgdGhlIHNwZWNpZmllZCB0ZXh0IGZpZWxkXG4gKiBub29wIGlmIHRoZSB0ZXh0IGZpZWxkIHdhcyBhbHJlYWR5IGZvY3VzZWRcbiAqL1xuZnVuY3Rpb24gZm9jdXNUZXh0SW5wdXQodGV4dEZpZWxkSUQ6ID9udW1iZXIpIHtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJRCAhPT0gdGV4dEZpZWxkSUQgJiYgdGV4dEZpZWxkSUQgIT09IG51bGwpIHtcbiAgICBjdXJyZW50bHlGb2N1c2VkSUQgPSB0ZXh0RmllbGRJRDtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICBVSU1hbmFnZXIuZm9jdXModGV4dEZpZWxkSUQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICB0ZXh0RmllbGRJRCxcbiAgICAgICAgVUlNYW5hZ2VyLkFuZHJvaWRUZXh0SW5wdXQuQ29tbWFuZHMuZm9jdXNUZXh0SW5wdXQsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0RmllbGRJRCBpZCBvZiB0aGUgdGV4dCBmaWVsZCB0byB1bmZvY3VzXG4gKiBVbmZvY3VzZXMgdGhlIHNwZWNpZmllZCB0ZXh0IGZpZWxkXG4gKiBub29wIGlmIGl0IHdhc24ndCBmb2N1c2VkXG4gKi9cbmZ1bmN0aW9uIGJsdXJUZXh0SW5wdXQodGV4dEZpZWxkSUQ6ID9udW1iZXIpIHtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJRCA9PT0gdGV4dEZpZWxkSUQgJiYgdGV4dEZpZWxkSUQgIT09IG51bGwpIHtcbiAgICBjdXJyZW50bHlGb2N1c2VkSUQgPSBudWxsO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIFVJTWFuYWdlci5ibHVyKHRleHRGaWVsZElEKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIFVJTWFuYWdlci5kaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZChcbiAgICAgICAgdGV4dEZpZWxkSUQsXG4gICAgICAgIFVJTWFuYWdlci5BbmRyb2lkVGV4dElucHV0LkNvbW1hbmRzLmJsdXJUZXh0SW5wdXQsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZWdpc3RlcklucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgaW5wdXRzLmFkZCh0ZXh0RmllbGRJRCk7XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJJbnB1dCh0ZXh0RmllbGRJRDogbnVtYmVyKSB7XG4gIGlucHV0cy5kZWxldGUodGV4dEZpZWxkSUQpO1xufVxuXG5mdW5jdGlvbiBpc1RleHRJbnB1dCh0ZXh0RmllbGRJRDogbnVtYmVyKSB7XG4gIHJldHVybiBpbnB1dHMuaGFzKHRleHRGaWVsZElEKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGN1cnJlbnRseUZvY3VzZWRGaWVsZCxcbiAgZm9jdXNUZXh0SW5wdXQsXG4gIGJsdXJUZXh0SW5wdXQsXG4gIHJlZ2lzdGVySW5wdXQsXG4gIHVucmVnaXN0ZXJJbnB1dCxcbiAgaXNUZXh0SW5wdXQsXG59O1xuIl19