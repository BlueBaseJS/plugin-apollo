b53f10cfe164343d38303b8e2f4fa317
'use strict';

var ReactPropTypes = require('prop-types');

var deprecatedPropType = require('deprecatedPropType');

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var TransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
    perspective: ReactPropTypes.number
  }), ReactPropTypes.shape({
    rotate: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateY: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateZ: ReactPropTypes.string
  }), ReactPropTypes.shape({
    scale: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    skewX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    skewY: ReactPropTypes.string
  })])),
  transformMatrix: TransformMatrixPropType,
  decomposedMatrix: DecomposedMatrixPropType,
  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};
module.exports = TransformPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYW5zZm9ybVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJSZWFjdFByb3BUeXBlcyIsInJlcXVpcmUiLCJkZXByZWNhdGVkUHJvcFR5cGUiLCJUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiRXJyb3IiLCJEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUiLCJUcmFuc2Zvcm1Qcm9wVHlwZXMiLCJ0cmFuc2Zvcm0iLCJhcnJheU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJwZXJzcGVjdGl2ZSIsIm51bWJlciIsInJvdGF0ZSIsInN0cmluZyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJza2V3WCIsInNrZXdZIiwidHJhbnNmb3JtTWF0cml4IiwiZGVjb21wb3NlZE1hdHJpeCIsInJvdGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBTUEsY0FBYyxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUE5Qjs7QUFFQSxJQUFNQyxrQkFBa0IsR0FBR0QsT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUVBLElBQU1FLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsQ0FDOUJDLEtBRDhCLEVBRTlCQyxRQUY4QixFQUc5QkMsYUFIOEIsRUFJdEI7QUFDUixNQUFJRixLQUFLLENBQUNDLFFBQUQsQ0FBVCxFQUFxQjtBQUNuQixXQUFPLElBQUlFLEtBQUosQ0FDTCx1REFDRSw2Q0FGRyxDQUFQO0FBSUQ7QUFDRixDQVhEOztBQWFBLElBQU1DLHdCQUF3QixHQUFHLFNBQTNCQSx3QkFBMkIsQ0FDL0JKLEtBRCtCLEVBRS9CQyxRQUYrQixFQUcvQkMsYUFIK0IsRUFJdkI7QUFDUixNQUFJRixLQUFLLENBQUNDLFFBQUQsQ0FBVCxFQUFxQjtBQUNuQixXQUFPLElBQUlFLEtBQUosQ0FDTCx3REFDRSxpQ0FGRyxDQUFQO0FBSUQ7QUFDRixDQVhEOztBQWFBLElBQU1FLGtCQUFrQixHQUFHO0FBaUJ6QkMsRUFBQUEsU0FBUyxFQUFFVixjQUFjLENBQUNXLE9BQWYsQ0FDVFgsY0FBYyxDQUFDWSxTQUFmLENBQXlCLENBQ3ZCWixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ0MsSUFBQUEsV0FBVyxFQUFFZCxjQUFjLENBQUNlO0FBQTdCLEdBQXJCLENBRHVCLEVBRXZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ0csSUFBQUEsTUFBTSxFQUFFaEIsY0FBYyxDQUFDaUI7QUFBeEIsR0FBckIsQ0FGdUIsRUFHdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ0ssSUFBQUEsT0FBTyxFQUFFbEIsY0FBYyxDQUFDaUI7QUFBekIsR0FBckIsQ0FIdUIsRUFJdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ00sSUFBQUEsT0FBTyxFQUFFbkIsY0FBYyxDQUFDaUI7QUFBekIsR0FBckIsQ0FKdUIsRUFLdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ08sSUFBQUEsT0FBTyxFQUFFcEIsY0FBYyxDQUFDaUI7QUFBekIsR0FBckIsQ0FMdUIsRUFNdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ1EsSUFBQUEsS0FBSyxFQUFFckIsY0FBYyxDQUFDZTtBQUF2QixHQUFyQixDQU51QixFQU92QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNTLElBQUFBLE1BQU0sRUFBRXRCLGNBQWMsQ0FBQ2U7QUFBeEIsR0FBckIsQ0FQdUIsRUFRdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDVSxJQUFBQSxNQUFNLEVBQUV2QixjQUFjLENBQUNlO0FBQXhCLEdBQXJCLENBUnVCLEVBU3ZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ1csSUFBQUEsVUFBVSxFQUFFeEIsY0FBYyxDQUFDZTtBQUE1QixHQUFyQixDQVR1QixFQVV2QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNZLElBQUFBLFVBQVUsRUFBRXpCLGNBQWMsQ0FBQ2U7QUFBNUIsR0FBckIsQ0FWdUIsRUFXdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDYSxJQUFBQSxLQUFLLEVBQUUxQixjQUFjLENBQUNpQjtBQUF2QixHQUFyQixDQVh1QixFQVl2QmpCLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDYyxJQUFBQSxLQUFLLEVBQUUzQixjQUFjLENBQUNpQjtBQUF2QixHQUFyQixDQVp1QixDQUF6QixDQURTLENBakJjO0FBcUN6QlcsRUFBQUEsZUFBZSxFQUFFekIsdUJBckNRO0FBeUN6QjBCLEVBQUFBLGdCQUFnQixFQUFFckIsd0JBekNPO0FBNEN6QmMsRUFBQUEsTUFBTSxFQUFFcEIsa0JBQWtCLENBQ3hCRixjQUFjLENBQUNlLE1BRFMsRUFFeEIsaUNBRndCLENBNUNEO0FBZ0R6QlEsRUFBQUEsTUFBTSxFQUFFckIsa0JBQWtCLENBQ3hCRixjQUFjLENBQUNlLE1BRFMsRUFFeEIsaUNBRndCLENBaEREO0FBb0R6QmUsRUFBQUEsUUFBUSxFQUFFNUIsa0JBQWtCLENBQzFCRixjQUFjLENBQUNlLE1BRFcsRUFFMUIsaUNBRjBCLENBcERIO0FBd0R6QlMsRUFBQUEsVUFBVSxFQUFFdEIsa0JBQWtCLENBQzVCRixjQUFjLENBQUNlLE1BRGEsRUFFNUIsaUNBRjRCLENBeERMO0FBNER6QlUsRUFBQUEsVUFBVSxFQUFFdkIsa0JBQWtCLENBQzVCRixjQUFjLENBQUNlLE1BRGEsRUFFNUIsaUNBRjRCO0FBNURMLENBQTNCO0FBa0VBZ0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkIsa0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRQcm9wVHlwZSA9IHJlcXVpcmUoJ2RlcHJlY2F0ZWRQcm9wVHlwZScpO1xuXG5jb25zdCBUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSA9IGZ1bmN0aW9uKFxuICBwcm9wczogT2JqZWN0LFxuICBwcm9wTmFtZTogc3RyaW5nLFxuICBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4pOiA/RXJyb3Ige1xuICBpZiAocHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICdUaGUgdHJhbnNmb3JtTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIGB0cmFuc2Zvcm06IFt7IG1hdHJpeDogLi4uIH1dYCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3QgRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlID0gZnVuY3Rpb24oXG4gIHByb3BzOiBPYmplY3QsXG4gIHByb3BOYW1lOiBzdHJpbmcsXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbik6ID9FcnJvciB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgJ1RoZSBkZWNvbXBvc2VkTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIGB0cmFuc2Zvcm06IFsuLi5dYCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3QgVHJhbnNmb3JtUHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogYHRyYW5zZm9ybWAgYWNjZXB0cyBhbiBhcnJheSBvZiB0cmFuc2Zvcm1hdGlvbiBvYmplY3RzLiBFYWNoIG9iamVjdCBzcGVjaWZpZXNcbiAgICogdGhlIHByb3BlcnR5IHRoYXQgd2lsbCBiZSB0cmFuc2Zvcm1lZCBhcyB0aGUga2V5LCBhbmQgdGhlIHZhbHVlIHRvIHVzZSBpbiB0aGVcbiAgICogdHJhbnNmb3JtYXRpb24uIE9iamVjdHMgc2hvdWxkIG5vdCBiZSBjb21iaW5lZC4gVXNlIGEgc2luZ2xlIGtleS92YWx1ZSBwYWlyXG4gICAqIHBlciBvYmplY3QuXG4gICAqXG4gICAqIFRoZSByb3RhdGUgdHJhbnNmb3JtYXRpb25zIHJlcXVpcmUgYSBzdHJpbmcgc28gdGhhdCB0aGUgdHJhbnNmb3JtIG1heSBiZVxuICAgKiBleHByZXNzZWQgaW4gZGVncmVlcyAoZGVnKSBvciByYWRpYW5zIChyYWQpLiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogYHRyYW5zZm9ybShbeyByb3RhdGVYOiAnNDVkZWcnIH0sIHsgcm90YXRlWjogJzAuNzg1Mzk4cmFkJyB9XSlgXG4gICAqXG4gICAqIFRoZSBza2V3IHRyYW5zZm9ybWF0aW9ucyByZXF1aXJlIGEgc3RyaW5nIHNvIHRoYXQgdGhlIHRyYW5zZm9ybSBtYXkgYmVcbiAgICogZXhwcmVzc2VkIGluIGRlZ3JlZXMgKGRlZykuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgdHJhbnNmb3JtKFt7IHNrZXdYOiAnNDVkZWcnIH1dKWBcbiAgICovXG4gIHRyYW5zZm9ybTogUmVhY3RQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3BlcnNwZWN0aXZlOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGU6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZVg6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZVk6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZVo6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NjYWxlOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtzY2FsZVg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NjYWxlWTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7dHJhbnNsYXRlWDogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7dHJhbnNsYXRlWTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2tld1g6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NrZXdZOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICBdKSxcbiAgKSxcblxuICAvKipcbiAgICogRGVwcmVjYXRlZC4gVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLlxuICAgKi9cbiAgdHJhbnNmb3JtTWF0cml4OiBUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSxcbiAgLyoqXG4gICAqIERlcHJlY2F0ZWQuIFVzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC5cbiAgICovXG4gIGRlY29tcG9zZWRNYXRyaXg6IERlY29tcG9zZWRNYXRyaXhQcm9wVHlwZSxcblxuICAvKiBEZXByZWNhdGVkIHRyYW5zZm9ybSBwcm9wcyB1c2VkIG9uIEFuZHJvaWQgb25seSAqL1xuICBzY2FsZVg6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxuICBzY2FsZVk6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxuICByb3RhdGlvbjogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHRyYW5zbGF0ZVg6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxuICB0cmFuc2xhdGVZOiBkZXByZWNhdGVkUHJvcFR5cGUoXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgICdVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuJyxcbiAgKSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtUHJvcFR5cGVzO1xuIl19