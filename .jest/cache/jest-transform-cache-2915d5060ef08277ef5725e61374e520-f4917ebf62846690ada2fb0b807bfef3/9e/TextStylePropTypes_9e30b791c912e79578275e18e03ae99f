ec0cda850b049169b3752c558704e7b4
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var ColorPropType = require('ColorPropType');

var ReactPropTypes = require('prop-types');

var ViewStylePropTypes = require('ViewStylePropTypes');

var TextStylePropTypes = (0, _objectSpread2.default)({}, ViewStylePropTypes, {
  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,
  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,
  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
  textDecorationColor: ColorPropType,
  textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});
module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIlJlYWN0UHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiY29sb3IiLCJmb250RmFtaWx5Iiwic3RyaW5nIiwiZm9udFNpemUiLCJudW1iZXIiLCJmb250U3R5bGUiLCJvbmVPZiIsImZvbnRXZWlnaHQiLCJmb250VmFyaWFudCIsImFycmF5T2YiLCJ0ZXh0U2hhZG93T2Zmc2V0Iiwic2hhcGUiLCJ3aWR0aCIsImhlaWdodCIsInRleHRTaGFkb3dSYWRpdXMiLCJ0ZXh0U2hhZG93Q29sb3IiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInRleHRBbGlnbiIsInRleHRBbGlnblZlcnRpY2FsIiwiaW5jbHVkZUZvbnRQYWRkaW5nIiwiYm9vbCIsInRleHREZWNvcmF0aW9uTGluZSIsInRleHREZWNvcmF0aW9uU3R5bGUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwidGV4dFRyYW5zZm9ybSIsIndyaXRpbmdEaXJlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUE3Qjs7QUFDQSxJQUFNQyxjQUFjLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQTlCOztBQUNBLElBQU1FLGtCQUFrQixHQUFHRixPQUFPLENBQUMsb0JBQUQsQ0FBbEM7O0FBRUEsSUFBTUcsa0JBQWtCLG1DQUNuQkQsa0JBRG1CO0FBR3RCRSxFQUFBQSxLQUFLLEVBQUVMLGFBSGU7QUFJdEJNLEVBQUFBLFVBQVUsRUFBRUosY0FBYyxDQUFDSyxNQUpMO0FBS3RCQyxFQUFBQSxRQUFRLEVBQUVOLGNBQWMsQ0FBQ08sTUFMSDtBQU10QkMsRUFBQUEsU0FBUyxFQUFFUixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUFyQixDQU5XO0FBWXRCQyxFQUFBQSxVQUFVLEVBQUVWLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUMvQixRQUQrQixFQUUvQixNQUYrQixFQUcvQixLQUgrQixFQUkvQixLQUorQixFQUsvQixLQUwrQixFQU0vQixLQU4rQixFQU8vQixLQVArQixFQVEvQixLQVIrQixFQVMvQixLQVQrQixFQVUvQixLQVYrQixFQVcvQixLQVgrQixDQUFyQixDQVpVO0FBNEJ0QkUsRUFBQUEsV0FBVyxFQUFFWCxjQUFjLENBQUNZLE9BQWYsQ0FDWFosY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ25CLFlBRG1CLEVBRW5CLGVBRm1CLEVBR25CLGFBSG1CLEVBSW5CLGNBSm1CLEVBS25CLG1CQUxtQixDQUFyQixDQURXLENBNUJTO0FBcUN0QkksRUFBQUEsZ0JBQWdCLEVBQUViLGNBQWMsQ0FBQ2MsS0FBZixDQUFxQjtBQUNyQ0MsSUFBQUEsS0FBSyxFQUFFZixjQUFjLENBQUNPLE1BRGU7QUFFckNTLElBQUFBLE1BQU0sRUFBRWhCLGNBQWMsQ0FBQ087QUFGYyxHQUFyQixDQXJDSTtBQXlDdEJVLEVBQUFBLGdCQUFnQixFQUFFakIsY0FBYyxDQUFDTyxNQXpDWDtBQTBDdEJXLEVBQUFBLGVBQWUsRUFBRXBCLGFBMUNLO0FBOEN0QnFCLEVBQUFBLGFBQWEsRUFBRW5CLGNBQWMsQ0FBQ08sTUE5Q1I7QUErQ3RCYSxFQUFBQSxVQUFVLEVBQUVwQixjQUFjLENBQUNPLE1BL0NMO0FBb0R0QmMsRUFBQUEsU0FBUyxFQUFFckIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQzlCLE1BRDhCLEVBRTlCLE1BRjhCLEVBRzlCLE9BSDhCLEVBSTlCLFFBSjhCLEVBSzlCLFNBTDhCLENBQXJCLENBcERXO0FBOER0QmEsRUFBQUEsaUJBQWlCLEVBQUV0QixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDdEMsTUFEc0MsRUFFdEMsS0FGc0MsRUFHdEMsUUFIc0MsRUFJdEMsUUFKc0MsQ0FBckIsQ0E5REc7QUEwRXRCYyxFQUFBQSxrQkFBa0IsRUFBRXZCLGNBQWMsQ0FBQ3dCLElBMUViO0FBMkV0QkMsRUFBQUEsa0JBQWtCLEVBQUV6QixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDdkMsTUFEdUMsRUFFdkMsV0FGdUMsRUFHdkMsY0FIdUMsRUFJdkMsd0JBSnVDLENBQXJCLENBM0VFO0FBb0Z0QmlCLEVBQUFBLG1CQUFtQixFQUFFMUIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ3hDLE9BRHdDLEVBRXhDLFFBRndDLEVBR3hDLFFBSHdDLEVBSXhDLFFBSndDLENBQXJCLENBcEZDO0FBNkZ0QmtCLEVBQUFBLG1CQUFtQixFQUFFN0IsYUE3RkM7QUE4RnRCOEIsRUFBQUEsYUFBYSxFQUFFNUIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ2xDLE1BRGtDLEVBRWxDLFlBRmtDLEVBR2xDLFdBSGtDLEVBSWxDLFdBSmtDLENBQXJCLENBOUZPO0FBdUd0Qm9CLEVBQUFBLGdCQUFnQixFQUFFN0IsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQUMsTUFBRCxFQUFxQixLQUFyQixFQUE0QixLQUE1QixDQUFyQjtBQXZHSSxFQUF4QjtBQTBHQXFCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjdCLGtCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbG9yUHJvcFR5cGUgPSByZXF1aXJlKCdDb2xvclByb3BUeXBlJyk7XG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbmNvbnN0IFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJ1ZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSB7XG4gIC4uLlZpZXdTdHlsZVByb3BUeXBlcyxcblxuICBjb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgZm9udEZhbWlseTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBmb250U2l6ZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBmb250U3R5bGU6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFsnbm9ybWFsJywgJ2l0YWxpYyddKSxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBmb250IHdlaWdodC4gVGhlIHZhbHVlcyAnbm9ybWFsJyBhbmQgJ2JvbGQnIGFyZSBzdXBwb3J0ZWQgZm9yXG4gICAqIG1vc3QgZm9udHMuIE5vdCBhbGwgZm9udHMgaGF2ZSBhIHZhcmlhbnQgZm9yIGVhY2ggb2YgdGhlIG51bWVyaWMgdmFsdWVzLFxuICAgKiBpbiB0aGF0IGNhc2UgdGhlIGNsb3Nlc3Qgb25lIGlzIGNob3Nlbi5cbiAgICovXG4gIGZvbnRXZWlnaHQ6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9ybWFsJyAvKmRlZmF1bHQqLyxcbiAgICAnYm9sZCcsXG4gICAgJzEwMCcsXG4gICAgJzIwMCcsXG4gICAgJzMwMCcsXG4gICAgJzQwMCcsXG4gICAgJzUwMCcsXG4gICAgJzYwMCcsXG4gICAgJzcwMCcsXG4gICAgJzgwMCcsXG4gICAgJzkwMCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgZm9udFZhcmlhbnQ6IFJlYWN0UHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICAgJ3NtYWxsLWNhcHMnLFxuICAgICAgJ29sZHN0eWxlLW51bXMnLFxuICAgICAgJ2xpbmluZy1udW1zJyxcbiAgICAgICd0YWJ1bGFyLW51bXMnLFxuICAgICAgJ3Byb3BvcnRpb25hbC1udW1zJyxcbiAgICBdKSxcbiAgKSxcbiAgdGV4dFNoYWRvd09mZnNldDogUmVhY3RQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHdpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgaGVpZ2h0OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIH0pLFxuICB0ZXh0U2hhZG93UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIHRleHRTaGFkb3dDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGxldHRlclNwYWNpbmc6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgbGluZUhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRleHQgYWxpZ25tZW50LiBUaGUgdmFsdWUgJ2p1c3RpZnknIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGlPUyBhbmRcbiAgICogZmFsbGJhY2tzIHRvIGBsZWZ0YCBvbiBBbmRyb2lkLlxuICAgKi9cbiAgdGV4dEFsaWduOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2F1dG8nIC8qZGVmYXVsdCovLFxuICAgICdsZWZ0JyxcbiAgICAncmlnaHQnLFxuICAgICdjZW50ZXInLFxuICAgICdqdXN0aWZ5JyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgdGV4dEFsaWduVmVydGljYWw6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnYXV0bycgLypkZWZhdWx0Ki8sXG4gICAgJ3RvcCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2NlbnRlcicsXG4gIF0pLFxuICAvKipcbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gcmVtb3ZlIGV4dHJhIGZvbnQgcGFkZGluZyBpbnRlbmRlZCB0byBtYWtlIHNwYWNlIGZvciBjZXJ0YWluIGFzY2VuZGVycyAvIGRlc2NlbmRlcnMuXG4gICAqIFdpdGggc29tZSBmb250cywgdGhpcyBwYWRkaW5nIGNhbiBtYWtlIHRleHQgbG9vayBzbGlnaHRseSBtaXNhbGlnbmVkIHdoZW4gY2VudGVyZWQgdmVydGljYWxseS5cbiAgICogRm9yIGJlc3QgcmVzdWx0cyBhbHNvIHNldCBgdGV4dEFsaWduVmVydGljYWxgIHRvIGBjZW50ZXJgLiBEZWZhdWx0IGlzIHRydWUuXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBpbmNsdWRlRm9udFBhZGRpbmc6IFJlYWN0UHJvcFR5cGVzLmJvb2wsXG4gIHRleHREZWNvcmF0aW9uTGluZTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub25lJyAvKmRlZmF1bHQqLyxcbiAgICAndW5kZXJsaW5lJyxcbiAgICAnbGluZS10aHJvdWdoJyxcbiAgICAndW5kZXJsaW5lIGxpbmUtdGhyb3VnaCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dERlY29yYXRpb25TdHlsZTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdzb2xpZCcgLypkZWZhdWx0Ki8sXG4gICAgJ2RvdWJsZScsXG4gICAgJ2RvdHRlZCcsXG4gICAgJ2Rhc2hlZCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dERlY29yYXRpb25Db2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgdGV4dFRyYW5zZm9ybTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub25lJyAvKmRlZmF1bHQqLyxcbiAgICAnY2FwaXRhbGl6ZScsXG4gICAgJ3VwcGVyY2FzZScsXG4gICAgJ2xvd2VyY2FzZScsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgd3JpdGluZ0RpcmVjdGlvbjogUmVhY3RQcm9wVHlwZXMub25lT2YoWydhdXRvJyAvKmRlZmF1bHQqLywgJ2x0cicsICdydGwnXSksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRTdHlsZVByb3BUeXBlcztcbiJdfQ==