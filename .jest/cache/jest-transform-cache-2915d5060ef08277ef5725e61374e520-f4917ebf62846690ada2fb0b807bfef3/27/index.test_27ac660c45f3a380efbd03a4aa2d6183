d1a63a067c1bd6e78b062917d4b0295a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../index"));

test('Plugin should be correctly registered', function _callee() {
  var BB;
  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          BB = new core_1.BlueBase();
          _context.next = 3;
          return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

        case 3:
          expect(BB.Plugins.has('@bluebase/plugin-apollo')).toBeTruthy();

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
describe('Apollo Plugin test', function () {
  it('Test with Apollo Config', function _callee2() {
    var Config, BB, Plugins;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            Config = {
              httpLinkOptions: {
                uri: 'http://graphql',
                fetch: fetch
              },
              clientOptions: {
                reconnect: true
              }
            };
            BB = new core_1.BlueBase();
            _context2.next = 4;
            return _regenerator.default.awrap(BB.Plugins.register(index_1.default));

          case 4:
            _context2.next = 6;
            return _regenerator.default.awrap(BB.Configs.setValue('plugins.apollo', Config));

          case 6:
            Plugins = _context2.sent;
            console.log('Plugins', Plugins);
            expect(Plugins).toBeTruthy();
            BB.boot();

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211enphbWlsL0RvY3VtZW50cy9ta2RpciBhcG9sbG8vcGx1Z2luLWFwb2xsby9zcmMvX190ZXN0c19fL2luZGV4LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLGdCQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBQUE7O0FBRUEsSUFBSSxDQUFDLHVDQUFELEVBQTBDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUN2QyxVQUFBLEVBRHVDLEdBQ2xDLElBQUksTUFBQSxDQUFBLFFBQUosRUFEa0M7QUFBQTtBQUFBLDRDQUV2QyxFQUFFLENBQUMsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBQSxDQUFBLE9BQXBCLENBRnVDOztBQUFBO0FBSTdDLFVBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFILENBQVcsR0FBWCxDQUFlLHlCQUFmLENBQUQsQ0FBTixDQUFrRCxVQUFsRDs7QUFKNkM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBMUMsQ0FBSjtBQU1BLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFLO0FBQ25DLEVBQUEsRUFBRSxDQUFDLHlCQUFELEVBQTRCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUN2QixZQUFBLE1BRHVCLEdBQ2Q7QUFDZCxjQUFBLGVBQWUsRUFBRTtBQUFFLGdCQUFBLEdBQUcsRUFBRSxnQkFBUDtBQUF5QixnQkFBQSxLQUFLLEVBQUU7QUFBaEMsZUFESDtBQUVkLGNBQUEsYUFBYSxFQUFFO0FBQUUsZ0JBQUEsU0FBUyxFQUFFO0FBQWI7QUFGRCxhQURjO0FBS3ZCLFlBQUEsRUFMdUIsR0FLbEIsSUFBSSxNQUFBLENBQUEsUUFBSixFQUxrQjtBQUFBO0FBQUEsOENBTXZCLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixPQUFBLENBQUEsT0FBcEIsQ0FOdUI7O0FBQUE7QUFBQTtBQUFBLDhDQVNQLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxDQUFvQixnQkFBcEIsRUFBc0MsTUFBdEMsQ0FUTzs7QUFBQTtBQVN2QixZQUFBLE9BVHVCO0FBVTdCLFlBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCLE9BQXZCO0FBQ0EsWUFBQSxNQUFNLENBQUMsT0FBRCxDQUFOLENBQWdCLFVBQWhCO0FBQ0EsWUFBQSxFQUFFLENBQUMsSUFBSDs7QUFaNkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBNUIsQ0FBRjtBQWVBLENBaEJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbHVlQmFzZSB9IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCBQbHVnaW4gZnJvbSAnLi4vaW5kZXgnO1xuXG50ZXN0KCdQbHVnaW4gc2hvdWxkIGJlIGNvcnJlY3RseSByZWdpc3RlcmVkJywgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBCQiA9IG5ldyBCbHVlQmFzZSgpO1xuXHRhd2FpdCBCQi5QbHVnaW5zLnJlZ2lzdGVyKFBsdWdpbik7XG5cblx0ZXhwZWN0KEJCLlBsdWdpbnMuaGFzKCdAYmx1ZWJhc2UvcGx1Z2luLWFwb2xsbycpKS50b0JlVHJ1dGh5KCk7XG59KTtcbmRlc2NyaWJlKCdBcG9sbG8gUGx1Z2luIHRlc3QnLCAoKSA9PiB7XG5cdGl0KCdUZXN0IHdpdGggQXBvbGxvIENvbmZpZycsIGFzeW5jICgpID0+IHtcblx0XHRjb25zdCBDb25maWcgPSB7XG5cdFx0XHRodHRwTGlua09wdGlvbnM6IHsgdXJpOiAnaHR0cDovL2dyYXBocWwnLCBmZXRjaDogZmV0Y2ggfSxcblx0XHRcdGNsaWVudE9wdGlvbnM6IHsgcmVjb25uZWN0OiB0cnVlIH1cblx0XHR9O1xuXHRcdGNvbnN0IEJCID0gbmV3IEJsdWVCYXNlKCk7XG5cdFx0YXdhaXQgQkIuUGx1Z2lucy5yZWdpc3RlcihQbHVnaW4pO1xuXHRcdC8vIEFwb2xsb1BsdWdpbi5nZXRDbGllbnQoKTtcblx0XHQvLyBjb25zdCBQbHVnaW5zID0gYXdhaXQgQkIuUGx1Z2lucy5oYXMoUGx1Z2luKTtcblx0XHRjb25zdCBQbHVnaW5zID0gYXdhaXQgQkIuQ29uZmlncy5zZXRWYWx1ZSgncGx1Z2lucy5hcG9sbG8nLCBDb25maWcpO1xuXHRcdGNvbnNvbGUubG9nKCdQbHVnaW5zJywgUGx1Z2lucyk7XG5cdFx0ZXhwZWN0KFBsdWdpbnMpLnRvQmVUcnV0aHkoKTtcblx0XHRCQi5ib290KCk7XG5cdFx0XG5cdH0pO1xufSk7XG4iXX0=