991ffc34128bd803e9ce81acaa6a653c
'use strict';

function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return object;
    }

    var keys = Object.keys(object);
    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (_hasOwnProperty.call(object, key)) {
        Object.defineProperty(object, key, {
          get: identity.bind(null, object[key])
        });
        Object.defineProperty(object, key, {
          set: throwOnImmutableMutation.bind(null, key)
        });
      }
    }

    Object.freeze(object);
    Object.seal(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (_hasOwnProperty.call(object, key)) {
        deepFreezeAndThrowOnMutationInDev(object[key]);
      }
    }
  }

  return object;
}

function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}

function identity(value) {
  return value;
}

module.exports = deepFreezeAndThrowOnMutationInDev;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldi5qcyJdLCJuYW1lcyI6WyJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJvYmplY3QiLCJfX0RFVl9fIiwiT2JqZWN0IiwiaXNGcm96ZW4iLCJpc1NlYWxlZCIsImtleXMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvdHlwZSIsImkiLCJsZW5ndGgiLCJrZXkiLCJjYWxsIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJpZGVudGl0eSIsImJpbmQiLCJzZXQiLCJ0aHJvd09uSW1tdXRhYmxlTXV0YXRpb24iLCJmcmVlemUiLCJzZWFsIiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFtQkEsU0FBU0EsaUNBQVQsQ0FBc0RDLE1BQXRELEVBQW9FO0FBQ2xFLE1BQUlDLE9BQUosRUFBYTtBQUNYLFFBQ0UsT0FBT0QsTUFBUCxLQUFrQixRQUFsQixJQUNBQSxNQUFNLEtBQUssSUFEWCxJQUVBRSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JILE1BQWhCLENBRkEsSUFHQUUsTUFBTSxDQUFDRSxRQUFQLENBQWdCSixNQUFoQixDQUpGLEVBS0U7QUFDQSxhQUFPQSxNQUFQO0FBQ0Q7O0FBRUQsUUFBTUssSUFBSSxHQUFHSCxNQUFNLENBQUNHLElBQVAsQ0FBWUwsTUFBWixDQUFiO0FBQ0EsUUFBTU0sZUFBYyxHQUFHSixNQUFNLENBQUNLLFNBQVAsQ0FBaUJELGNBQXhDOztBQUVBLFNBQUssSUFBSUUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsSUFBSSxDQUFDSSxNQUF6QixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQyxVQUFJRSxHQUFHLEdBQUdMLElBQUksQ0FBQ0csQ0FBRCxDQUFkOztBQUNBLFVBQUlGLGVBQWMsQ0FBQ0ssSUFBZixDQUFvQlgsTUFBcEIsRUFBNEJVLEdBQTVCLENBQUosRUFBc0M7QUFDcENSLFFBQUFBLE1BQU0sQ0FBQ1UsY0FBUCxDQUFzQlosTUFBdEIsRUFBOEJVLEdBQTlCLEVBQW1DO0FBQ2pDRyxVQUFBQSxHQUFHLEVBQUVDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjLElBQWQsRUFBb0JmLE1BQU0sQ0FBQ1UsR0FBRCxDQUExQjtBQUQ0QixTQUFuQztBQUdBUixRQUFBQSxNQUFNLENBQUNVLGNBQVAsQ0FBc0JaLE1BQXRCLEVBQThCVSxHQUE5QixFQUFtQztBQUNqQ00sVUFBQUEsR0FBRyxFQUFFQyx3QkFBd0IsQ0FBQ0YsSUFBekIsQ0FBOEIsSUFBOUIsRUFBb0NMLEdBQXBDO0FBRDRCLFNBQW5DO0FBR0Q7QUFDRjs7QUFFRFIsSUFBQUEsTUFBTSxDQUFDZ0IsTUFBUCxDQUFjbEIsTUFBZDtBQUNBRSxJQUFBQSxNQUFNLENBQUNpQixJQUFQLENBQVluQixNQUFaOztBQUVBLFNBQUssSUFBSVEsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsSUFBSSxDQUFDSSxNQUF6QixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQyxVQUFJRSxHQUFHLEdBQUdMLElBQUksQ0FBQ0csQ0FBRCxDQUFkOztBQUNBLFVBQUlGLGVBQWMsQ0FBQ0ssSUFBZixDQUFvQlgsTUFBcEIsRUFBNEJVLEdBQTVCLENBQUosRUFBc0M7QUFDcENYLFFBQUFBLGlDQUFpQyxDQUFDQyxNQUFNLENBQUNVLEdBQUQsQ0FBUCxDQUFqQztBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxTQUFPVixNQUFQO0FBQ0Q7O0FBRUQsU0FBU2lCLHdCQUFULENBQWtDUCxHQUFsQyxFQUF1Q1UsS0FBdkMsRUFBOEM7QUFDNUMsUUFBTUMsS0FBSyxDQUNULG1DQUNFWCxHQURGLEdBRUUsb0JBRkYsR0FHRVksSUFBSSxDQUFDQyxTQUFMLENBQWVILEtBQWYsQ0FIRixHQUlFLCtDQUpGLEdBS0Usc0JBTk8sQ0FBWDtBQVFEOztBQUVELFNBQVNOLFFBQVQsQ0FBa0JNLEtBQWxCLEVBQXlCO0FBQ3ZCLFNBQU9BLEtBQVA7QUFDRDs7QUFFREksTUFBTSxDQUFDQyxPQUFQLEdBQWlCMUIsaUNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBJZiB5b3VyIGFwcGxpY2F0aW9uIGlzIGFjY2VwdGluZyBkaWZmZXJlbnQgdmFsdWVzIGZvciB0aGUgc2FtZSBmaWVsZCBvdmVyXG4gKiB0aW1lIGFuZCBpcyBkb2luZyBhIGRpZmYgb24gdGhlbSwgeW91IGNhbiBlaXRoZXIgKDEpIGNyZWF0ZSBhIGNvcHkgb3JcbiAqICgyKSBlbnN1cmUgdGhhdCB0aG9zZSB2YWx1ZXMgYXJlIG5vdCBtdXRhdGVkIGJlaGluZCB0d28gcGFzc2VzLlxuICogVGhpcyBmdW5jdGlvbiBoZWxwcyB5b3Ugd2l0aCAoMikgYnkgZnJlZXppbmcgdGhlIG9iamVjdCBhbmQgdGhyb3dpbmcgaWZcbiAqIHRoZSB1c2VyIHN1YnNlcXVlbnRseSBtb2RpZmllcyB0aGUgdmFsdWUuXG4gKlxuICogVGhlcmUgYXJlIHR3byBjYXZlYXRzIHdpdGggdGhpcyBmdW5jdGlvbjpcbiAqICAgLSBJZiB0aGUgY2FsbCBzaXRlIGlzIG5vdCBpbiBzdHJpY3QgbW9kZSwgaXQgd2lsbCBvbmx5IHRocm93IHdoZW5cbiAqICAgICBtdXRhdGluZyBleGlzdGluZyBmaWVsZHMsIGFkZGluZyBhIG5ldyBvbmVcbiAqICAgICB3aWxsIHVuZm9ydHVuYXRlbHkgZmFpbCBzaWxlbnRseSA6KFxuICogICAtIElmIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBmcm96ZW4gb3Igc2VhbGVkLCBpdCB3aWxsIG5vdCBjb250aW51ZSB0aGVcbiAqICAgICBkZWVwIHRyYXZlcnNhbCBhbmQgd2lsbCBsZWF2ZSBsZWFmIG5vZGVzIHVuZnJvemVuLlxuICpcbiAqIEZyZWV6aW5nIHRoZSBvYmplY3QgYW5kIGFkZGluZyB0aGUgdGhyb3cgbWVjaGFuaXNtIGlzIGV4cGVuc2l2ZSBhbmQgd2lsbFxuICogb25seSBiZSB1c2VkIGluIERFVi5cbiAqL1xuZnVuY3Rpb24gZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2PFQ6IE9iamVjdD4ob2JqZWN0OiBUKTogVCB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcgfHxcbiAgICAgIG9iamVjdCA9PT0gbnVsbCB8fFxuICAgICAgT2JqZWN0LmlzRnJvemVuKG9iamVjdCkgfHxcbiAgICAgIE9iamVjdC5pc1NlYWxlZChvYmplY3QpXG4gICAgKSB7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgIGNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgZ2V0OiBpZGVudGl0eS5iaW5kKG51bGwsIG9iamVjdFtrZXldKSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgIHNldDogdGhyb3dPbkltbXV0YWJsZU11dGF0aW9uLmJpbmQobnVsbCwga2V5KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmZyZWV6ZShvYmplY3QpO1xuICAgIE9iamVjdC5zZWFsKG9iamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldihvYmplY3Rba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIHRocm93T25JbW11dGFibGVNdXRhdGlvbihrZXksIHZhbHVlKSB7XG4gIHRocm93IEVycm9yKFxuICAgICdZb3UgYXR0ZW1wdGVkIHRvIHNldCB0aGUga2V5IGAnICtcbiAgICAgIGtleSArXG4gICAgICAnYCB3aXRoIHRoZSB2YWx1ZSBgJyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgK1xuICAgICAgJ2Agb24gYW4gb2JqZWN0IHRoYXQgaXMgbWVhbnQgdG8gYmUgaW1tdXRhYmxlICcgK1xuICAgICAgJ2FuZCBoYXMgYmVlbiBmcm96ZW4uJyxcbiAgKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldjtcbiJdfQ==