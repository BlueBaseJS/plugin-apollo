{"version":3,"sources":["PickerIOS.ios.js"],"names":["React","require","ReactNative","StyleSheet","View","processColor","requireNativeComponent","RCTPickerIOS","PickerIOSItem","props","PickerIOS","selectedIndex","items","event","onChange","onValueChange","nativeEvent","newValue","newIndex","_picker","state","setNativeProps","style","picker","styles","pickerIOS","itemStyle","_onChange","Children","toArray","children","forEach","child","index","value","selectedValue","push","label","textColor","color","Component","create","height","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * This is a controlled component version of RCTPickerIOS\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\nconst processColor = require('processColor');\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type {SyntheticEvent} from 'CoreEventTypes';\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {ViewProps} from 'ViewPropTypes';\nimport type {TextStyleProp} from 'StyleSheet';\n\ntype PickerIOSChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    newValue: any,\n    newIndex: number,\n  |}>,\n>;\n\ntype RCTPickerIOSItemType = $ReadOnly<{|\n  label: ?Label,\n  value: ?any,\n  textColor: ?number,\n|}>;\n\ntype RCTPickerIOSType = Class<\n  ReactNative.NativeComponent<\n    $ReadOnly<{|\n      items: $ReadOnlyArray<RCTPickerIOSItemType>,\n      onChange: (event: PickerIOSChangeEvent) => void,\n      onResponderTerminationRequest: () => boolean,\n      onStartShouldSetResponder: () => boolean,\n      selectedIndex: number,\n      style?: ?TextStyleProp,\n    |}>,\n  >,\n>;\n\nconst RCTPickerIOS: RCTPickerIOSType = (requireNativeComponent(\n  'RCTPicker',\n): any);\n\ntype Label = Stringish | number;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  children: React.ChildrenArray<React.Element<typeof PickerIOSItem>>,\n  itemStyle?: ?TextStyleProp,\n  onChange?: ?(event: PickerIOSChangeEvent) => mixed,\n  onValueChange?: ?(newValue: any, newIndex: number) => mixed,\n  selectedValue: any,\n|}>;\n\ntype State = {|\n  selectedIndex: number,\n  items: $ReadOnlyArray<RCTPickerIOSItemType>,\n|};\n\ntype ItemProps = $ReadOnly<{|\n  label: ?Label,\n  value?: ?any,\n  color?: ?ColorValue,\n|}>;\n\nconst PickerIOSItem = (props: ItemProps) => {\n  return null;\n};\n\nclass PickerIOS extends React.Component<Props, State> {\n  _picker: ?React.ElementRef<RCTPickerIOSType> = null;\n\n  state = {\n    selectedIndex: 0,\n    items: [],\n  };\n\n  static Item = PickerIOSItem;\n\n  static getDerivedStateFromProps(props: Props): State {\n    let selectedIndex = 0;\n    const items = [];\n    React.Children.toArray(props.children).forEach(function(child, index) {\n      if (child.props.value === props.selectedValue) {\n        selectedIndex = index;\n      }\n      items.push({\n        value: child.props.value,\n        label: child.props.label,\n        textColor: processColor(child.props.color),\n      });\n    });\n    return {selectedIndex, items};\n  }\n\n  render() {\n    return (\n      <View style={this.props.style}>\n        <RCTPickerIOS\n          ref={picker => {\n            this._picker = picker;\n          }}\n          style={[styles.pickerIOS, this.props.itemStyle]}\n          items={this.state.items}\n          selectedIndex={this.state.selectedIndex}\n          onChange={this._onChange}\n          onStartShouldSetResponder={() => true}\n          onResponderTerminationRequest={() => false}\n        />\n      </View>\n    );\n  }\n\n  _onChange = event => {\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n    if (this.props.onValueChange) {\n      this.props.onValueChange(\n        event.nativeEvent.newValue,\n        event.nativeEvent.newIndex,\n      );\n    }\n\n    // The picker is a controlled component. This means we expect the\n    // on*Change handlers to be in charge of updating our\n    // `selectedValue` prop. That way they can also\n    // disallow/undo/mutate the selection of certain values. In other\n    // words, the embedder of this component should be the source of\n    // truth, not the native component.\n    if (\n      this._picker &&\n      this.state.selectedIndex !== event.nativeEvent.newIndex\n    ) {\n      this._picker.setNativeProps({\n        selectedIndex: this.state.selectedIndex,\n      });\n    }\n  };\n}\n\nconst styles = StyleSheet.create({\n  pickerIOS: {\n    // The picker will conform to whatever width is given, but we do\n    // have to set the component's height explicitly on the\n    // surrounding view to ensure it gets rendered.\n    height: 216,\n  },\n});\n\nmodule.exports = PickerIOS;\n"]}