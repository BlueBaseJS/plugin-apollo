5d53a091ff61d8720b49edb244e2dcc6
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = require('React');

var ReactNative = require('ReactNative');

var StyleSheet = require('StyleSheet');

var View = require('View');

var processColor = require('processColor');

var requireNativeComponent = require('requireNativeComponent');

var RCTPickerIOS = requireNativeComponent('RCTPicker');

var PickerIOSItem = function PickerIOSItem(props) {
  return null;
};

var PickerIOS = function (_React$Component) {
  (0, _inherits2.default)(PickerIOS, _React$Component);

  function PickerIOS() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, PickerIOS);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PickerIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_picker", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      selectedIndex: 0,
      items: []
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_onChange", function (event) {
      if (_this.props.onChange) {
        _this.props.onChange(event);
      }

      if (_this.props.onValueChange) {
        _this.props.onValueChange(event.nativeEvent.newValue, event.nativeEvent.newIndex);
      }

      if (_this._picker && _this.state.selectedIndex !== event.nativeEvent.newIndex) {
        _this._picker.setNativeProps({
          selectedIndex: _this.state.selectedIndex
        });
      }
    });
    return _this;
  }

  (0, _createClass2.default)(PickerIOS, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return React.createElement(View, {
        style: this.props.style
      }, React.createElement(RCTPickerIOS, {
        ref: function ref(picker) {
          _this2._picker = picker;
        },
        style: [styles.pickerIOS, this.props.itemStyle],
        items: this.state.items,
        selectedIndex: this.state.selectedIndex,
        onChange: this._onChange,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        }
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props) {
      var selectedIndex = 0;
      var items = [];
      React.Children.toArray(props.children).forEach(function (child, index) {
        if (child.props.value === props.selectedValue) {
          selectedIndex = index;
        }

        items.push({
          value: child.props.value,
          label: child.props.label,
          textColor: processColor(child.props.color)
        });
      });
      return {
        selectedIndex: selectedIndex,
        items: items
      };
    }
  }]);
  return PickerIOS;
}(React.Component);

(0, _defineProperty2.default)(PickerIOS, "Item", PickerIOSItem);
var styles = StyleSheet.create({
  pickerIOS: {
    height: 216
  }
});
module.exports = PickerIOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,