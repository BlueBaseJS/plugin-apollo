{"version":3,"sources":["Image.ios.js"],"names":["ImageProps","require","NativeModules","React","ReactNative","StyleSheet","flattenStyle","requireNativeComponent","resolveAssetSource","ImageViewManager","RCTImageView","getSize","uri","success","failure","console","warn","prefetch","url","prefetchImage","Image","props","forwardedRef","source","undefined","width","height","sources","style","Array","isArray","styles","base","resizeMode","tintColor","src","children","Error","forwardRef","propTypes","create","overflow","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ImageProps = require('ImageProps');\nconst NativeModules = require('NativeModules');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\n\nconst flattenStyle = require('flattenStyle');\nconst requireNativeComponent = require('requireNativeComponent');\nconst resolveAssetSource = require('resolveAssetSource');\n\nconst ImageViewManager = NativeModules.ImageViewManager;\n\nconst RCTImageView = requireNativeComponent('RCTImageView');\n\nimport type {ImageProps as ImagePropsType} from 'ImageProps';\n\nfunction getSize(\n  uri: string,\n  success: (width: number, height: number) => void,\n  failure?: (error: any) => void,\n) {\n  ImageViewManager.getSize(\n    uri,\n    success,\n    failure ||\n      function() {\n        console.warn('Failed to get size for image: ' + uri);\n      },\n  );\n}\n\nfunction prefetch(url: string) {\n  return ImageViewManager.prefetchImage(url);\n}\n\ndeclare class ImageComponentType extends ReactNative.NativeComponent<\n  ImagePropsType,\n> {\n  static getSize: typeof getSize;\n  static prefetch: typeof prefetch;\n  static resolveAssetSource: typeof resolveAssetSource;\n  static propTypes: typeof ImageProps;\n}\n\n/**\n * A React component for displaying different types of images,\n * including network images, static resources, temporary local images, and\n * images from local disk, such as the camera roll.\n *\n * See https://facebook.github.io/react-native/docs/image.html\n */\nlet Image = (\n  props: ImagePropsType,\n  forwardedRef: ?React.Ref<'RCTImageView'>,\n) => {\n  const source = resolveAssetSource(props.source) || {\n    uri: undefined,\n    width: undefined,\n    height: undefined,\n  };\n\n  let sources;\n  let style;\n  if (Array.isArray(source)) {\n    style = flattenStyle([styles.base, props.style]) || {};\n    sources = source;\n  } else {\n    const {width, height, uri} = source;\n    style = flattenStyle([{width, height}, styles.base, props.style]) || {};\n    sources = [source];\n\n    if (uri === '') {\n      console.warn('source.uri should not be an empty string');\n    }\n  }\n\n  const resizeMode = props.resizeMode || style.resizeMode || 'cover';\n  const tintColor = style.tintColor;\n\n  if (props.src != null) {\n    console.warn(\n      'The <Image> component requires a `source` property rather than `src`.',\n    );\n  }\n\n  if (props.children != null) {\n    throw new Error(\n      'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.',\n    );\n  }\n\n  return (\n    <RCTImageView\n      {...props}\n      ref={forwardedRef}\n      style={style}\n      resizeMode={resizeMode}\n      tintColor={tintColor}\n      source={sources}\n    />\n  );\n};\n\n// $FlowFixMe - TODO T29156721 `React.forwardRef` is not defined in Flow, yet.\nImage = React.forwardRef(Image);\n\n/**\n * Retrieve the width and height (in pixels) of an image prior to displaying it.\n *\n * See https://facebook.github.io/react-native/docs/image.html#getsize\n */\nImage.getSize = getSize;\n\n/**\n * Prefetches a remote image for later use by downloading it to the disk\n * cache.\n *\n * See https://facebook.github.io/react-native/docs/image.html#prefetch\n */\nImage.prefetch = prefetch;\n\n/**\n * Resolves an asset reference into an object.\n *\n * See https://facebook.github.io/react-native/docs/image.html#resolveassetsource\n */\nImage.resolveAssetSource = resolveAssetSource;\n\nImage.propTypes = ImageProps;\n\nconst styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n});\n\nmodule.exports = (Image: Class<ImageComponentType>);\n"]}