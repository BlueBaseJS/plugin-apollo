7f0366f1f278208079de805307d2cedf
'use strict';

var ColorPropType = require('ColorPropType');

var ReactPropTypes = require('prop-types');

var ShadowPropTypesIOS = {
  shadowColor: ColorPropType,
  shadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  shadowOpacity: ReactPropTypes.number,
  shadowRadius: ReactPropTypes.number
};
module.exports = ShadowPropTypesIOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNoYWRvd1Byb3BUeXBlc0lPUy5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIlJlYWN0UHJvcFR5cGVzIiwiU2hhZG93UHJvcFR5cGVzSU9TIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJzaGFwZSIsIndpZHRoIiwibnVtYmVyIiwiaGVpZ2h0Iiwic2hhZG93T3BhY2l0eSIsInNoYWRvd1JhZGl1cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVNBOztBQUVBLElBQU1BLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0EsSUFBTUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsWUFBRCxDQUE5Qjs7QUFXQSxJQUFNRSxrQkFBa0IsR0FBRztBQUt6QkMsRUFBQUEsV0FBVyxFQUFFSixhQUxZO0FBVXpCSyxFQUFBQSxZQUFZLEVBQUVILGNBQWMsQ0FBQ0ksS0FBZixDQUFxQjtBQUNqQ0MsSUFBQUEsS0FBSyxFQUFFTCxjQUFjLENBQUNNLE1BRFc7QUFFakNDLElBQUFBLE1BQU0sRUFBRVAsY0FBYyxDQUFDTTtBQUZVLEdBQXJCLENBVlc7QUFrQnpCRSxFQUFBQSxhQUFhLEVBQUVSLGNBQWMsQ0FBQ00sTUFsQkw7QUF1QnpCRyxFQUFBQSxZQUFZLEVBQUVULGNBQWMsQ0FBQ007QUF2QkosQ0FBM0I7QUEwQkFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlYsa0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbG9yUHJvcFR5cGUgPSByZXF1aXJlKCdDb2xvclByb3BUeXBlJyk7XG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxuLyoqXG4gKiBUaGVzZSBwcm9wcyBjYW4gYmUgdXNlZCB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBzaGFkb3dzIG9uIHZpZXdzLCBpbWFnZXMsIHRleHQsIGV0Yy5cbiAqXG4gKiBCZWNhdXNlIHRoZXkgYXJlIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCwgdGhleSBtYXkgY2F1c2UgcGVyZm9ybWFuY2UgcmVncmVzc2lvbnMuIFN0YXRpY1xuICogc2hhZG93IGltYWdlIGFzc2V0IG1heSBiZSBhIGJldHRlciB3YXkgdG8gZ28gZm9yIG9wdGltYWwgcGVyZm9ybWFuY2UuXG4gKlxuICogVGhlc2UgcHJvcGVydGllcyBhcmUgaU9TIG9ubHkgLSBmb3Igc2ltaWxhciBmdW5jdGlvbmFsaXR5IG9uIEFuZHJvaWQsIHVzZSB0aGUgW2BlbGV2YXRpb25gXG4gKiBwcm9wZXJ0eV0oZG9jcy92aWV3c3R5bGVwcm9wdHlwZXMuaHRtbCNlbGV2YXRpb24pLlxuICovXG5jb25zdCBTaGFkb3dQcm9wVHlwZXNJT1MgPSB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkcm9wIHNoYWRvdyBjb2xvclxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzaGFkb3dDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgLyoqXG4gICAqIFNldHMgdGhlIGRyb3Agc2hhZG93IG9mZnNldFxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzaGFkb3dPZmZzZXQ6IFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtcbiAgICB3aWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIGhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICB9KSxcbiAgLyoqXG4gICAqIFNldHMgdGhlIGRyb3Agc2hhZG93IG9wYWNpdHkgKG11bHRpcGxpZWQgYnkgdGhlIGNvbG9yJ3MgYWxwaGEgY29tcG9uZW50KVxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzaGFkb3dPcGFjaXR5OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkcm9wIHNoYWRvdyBibHVyIHJhZGl1c1xuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzaGFkb3dSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhZG93UHJvcFR5cGVzSU9TO1xuIl19