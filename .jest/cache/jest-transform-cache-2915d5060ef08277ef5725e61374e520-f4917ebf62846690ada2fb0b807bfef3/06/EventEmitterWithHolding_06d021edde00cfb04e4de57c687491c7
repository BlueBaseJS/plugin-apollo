182ce5a204466eb9f5bdbbdc044ded50
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var EventEmitterWithHolding = function () {
  function EventEmitterWithHolding(emitter, holder) {
    (0, _classCallCheck2.default)(this, EventEmitterWithHolding);
    (0, _defineProperty2.default)(this, "_emitter", void 0);
    (0, _defineProperty2.default)(this, "_eventHolder", void 0);
    (0, _defineProperty2.default)(this, "_currentEventToken", void 0);
    (0, _defineProperty2.default)(this, "_emittingHeldEvents", void 0);
    this._emitter = emitter;
    this._eventHolder = holder;
    this._currentEventToken = null;
    this._emittingHeldEvents = false;
  }

  (0, _createClass2.default)(EventEmitterWithHolding, [{
    key: "addListener",
    value: function addListener(eventType, listener, context) {
      return this._emitter.addListener(eventType, listener, context);
    }
  }, {
    key: "once",
    value: function once(eventType, listener, context) {
      return this._emitter.once(eventType, listener, context);
    }
  }, {
    key: "addRetroactiveListener",
    value: function addRetroactiveListener(eventType, listener, context) {
      var subscription = this._emitter.addListener(eventType, listener, context);

      this._emittingHeldEvents = true;

      this._eventHolder.emitToListener(eventType, listener, context);

      this._emittingHeldEvents = false;
      return subscription;
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventType) {
      this._emitter.removeAllListeners(eventType);
    }
  }, {
    key: "removeCurrentListener",
    value: function removeCurrentListener() {
      this._emitter.removeCurrentListener();
    }
  }, {
    key: "listeners",
    value: function listeners(eventType) {
      return this._emitter.listeners(eventType);
    }
  }, {
    key: "emit",
    value: function emit(eventType) {
      var _this$_emitter;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_this$_emitter = this._emitter).emit.apply(_this$_emitter, [eventType].concat(args));
    }
  }, {
    key: "emitAndHold",
    value: function emitAndHold(eventType) {
      var _this$_eventHolder, _this$_emitter2;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      this._currentEventToken = (_this$_eventHolder = this._eventHolder).holdEvent.apply(_this$_eventHolder, [eventType].concat(args));

      (_this$_emitter2 = this._emitter).emit.apply(_this$_emitter2, [eventType].concat(args));

      this._currentEventToken = null;
    }
  }, {
    key: "releaseCurrentEvent",
    value: function releaseCurrentEvent() {
      if (this._currentEventToken) {
        this._eventHolder.releaseEvent(this._currentEventToken);
      } else if (this._emittingHeldEvents) {
        this._eventHolder.releaseCurrentEvent();
      }
    }
  }, {
    key: "releaseHeldEventType",
    value: function releaseHeldEventType(eventType) {
      this._eventHolder.releaseEventType(eventType);
    }
  }]);
  return EventEmitterWithHolding;
}();

module.exports = EventEmitterWithHolding;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,