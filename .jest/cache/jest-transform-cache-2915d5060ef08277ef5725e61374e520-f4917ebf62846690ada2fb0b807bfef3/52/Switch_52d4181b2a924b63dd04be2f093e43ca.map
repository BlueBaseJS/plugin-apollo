{"version":3,"sources":["Switch.js"],"names":["SwitchNativeComponent","require","Platform","React","StyleSheet","Switch","event","_nativeSwitchRef","value","props","OS","setNativeProps","on","onChange","onValueChange","nativeEvent","ref","disabled","ios_backgroundColor","style","thumbColor","trackColor","_thumbColor","_trackColorForFalse","false","_trackColorForTrue","true","thumbTintColor","tintColor","onTintColor","__DEV__","console","warn","platformProps","enabled","trackTintColor","compose","height","width","backgroundColor","borderRadius","accessibilityRole","_handleChange","returnsFalse","returnsTrue","_handleSwitchNativeComponentRef","Component","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst SwitchNativeComponent = require('SwitchNativeComponent');\nconst Platform = require('Platform');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\n\nimport type {SwitchChangeEvent} from 'CoreEventTypes';\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {ViewProps} from 'ViewPropTypes';\nimport type {NativeAndroidProps, NativeIOSProps} from 'SwitchNativeComponent';\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * Whether the switch is disabled. Defaults to false.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Boolean value of the switch. Defaults to false.\n   */\n  value?: ?boolean,\n\n  /**\n   * Custom color for the switch thumb.\n   */\n  thumbColor?: ?ColorValue,\n\n  /**\n   * Custom colors for the switch track.\n   *\n   * NOTE: On iOS when the switch value is false, the track shrinks into the\n   * border. If you want to change the color of the background exposed by the\n   * shrunken track, use `ios_backgroundColor`.\n   */\n  trackColor?: ?$ReadOnly<{|\n    false?: ?ColorValue,\n    true?: ?ColorValue,\n  |}>,\n\n  /**\n   * On iOS, custom color for the background. This background color can be seen\n   * either when the switch value is false or when the switch is disabled (and\n   * the switch is translucent).\n   */\n  ios_backgroundColor?: ?ColorValue,\n\n  /**\n   * Called when the user tries to change the value of the switch.\n   *\n   * Receives the change event as an argument. If you want to only receive the\n   * new value, use `onValueChange` instead.\n   */\n  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,\n\n  /**\n   * Called when the user tries to change the value of the switch.\n   *\n   * Receives the new value as an argument. If you want to instead receive an\n   * event, use `onChange`.\n   */\n  onValueChange?: ?(value: boolean) => Promise<void> | void,\n|}>;\n\n/**\n * A visual toggle between two mutually exclusive states.\n *\n * This is a controlled component that requires an `onValueChange` callback that\n * updates the `value` prop in order for the component to reflect user actions.\n * If the `value` prop is not updated, the component will continue to render the\n * supplied `value` prop instead of the expected result of any user actions.\n */\nclass Switch extends React.Component<Props> {\n  _nativeSwitchRef: ?React.ElementRef<typeof SwitchNativeComponent>;\n\n  render() {\n    const {\n      disabled,\n      ios_backgroundColor,\n      onChange,\n      onValueChange,\n      style,\n      thumbColor,\n      trackColor,\n      value,\n      ...props\n    } = this.props;\n\n    // Support deprecated color props.\n    let _thumbColor = thumbColor;\n    let _trackColorForFalse = trackColor?.false;\n    let _trackColorForTrue = trackColor?.true;\n\n    // TODO: Remove support for these props after a couple releases.\n    const {thumbTintColor, tintColor, onTintColor} = (props: $FlowFixMe);\n    if (thumbTintColor != null) {\n      _thumbColor = thumbTintColor;\n      if (__DEV__) {\n        console.warn(\n          'Switch: `thumbTintColor` is deprecated, use `thumbColor` instead.',\n        );\n      }\n    }\n    if (tintColor != null) {\n      _trackColorForFalse = tintColor;\n      if (__DEV__) {\n        console.warn(\n          'Switch: `tintColor` is deprecated, use `trackColor` instead.',\n        );\n      }\n    }\n    if (onTintColor != null) {\n      _trackColorForTrue = onTintColor;\n      if (__DEV__) {\n        console.warn(\n          'Switch: `onTintColor` is deprecated, use `trackColor` instead.',\n        );\n      }\n    }\n\n    const platformProps =\n      Platform.OS === 'android'\n        ? ({\n            enabled: disabled !== true,\n            on: value === true,\n            style,\n            thumbTintColor: _thumbColor,\n            trackTintColor:\n              value === true ? _trackColorForTrue : _trackColorForFalse,\n          }: NativeAndroidProps)\n        : ({\n            disabled,\n            onTintColor: _trackColorForTrue,\n            style: StyleSheet.compose(\n              {height: 31, width: 51},\n              StyleSheet.compose(\n                style,\n                ios_backgroundColor == null\n                  ? null\n                  : {\n                      backgroundColor: ios_backgroundColor,\n                      borderRadius: 16,\n                    },\n              ),\n            ),\n            thumbTintColor: _thumbColor,\n            tintColor: _trackColorForFalse,\n            value: value === true,\n          }: NativeIOSProps);\n\n    return (\n      <SwitchNativeComponent\n        {...props}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'button'}\n        onChange={this._handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={this._handleSwitchNativeComponentRef}\n      />\n    );\n  }\n\n  _handleChange = (event: SwitchChangeEvent) => {\n    if (this._nativeSwitchRef == null) {\n      return;\n    }\n\n    // Force value of native switch in order to control it.\n    const value = this.props.value === true;\n    if (Platform.OS === 'android') {\n      this._nativeSwitchRef.setNativeProps({on: value});\n    } else {\n      this._nativeSwitchRef.setNativeProps({value});\n    }\n\n    if (this.props.onChange != null) {\n      this.props.onChange(event);\n    }\n\n    if (this.props.onValueChange != null) {\n      this.props.onValueChange(event.nativeEvent.value);\n    }\n  };\n\n  _handleSwitchNativeComponentRef = (\n    ref: ?React.ElementRef<typeof SwitchNativeComponent>,\n  ) => {\n    this._nativeSwitchRef = ref;\n  };\n}\n\nconst returnsFalse = () => false;\nconst returnsTrue = () => true;\n\nmodule.exports = Switch;\n"]}