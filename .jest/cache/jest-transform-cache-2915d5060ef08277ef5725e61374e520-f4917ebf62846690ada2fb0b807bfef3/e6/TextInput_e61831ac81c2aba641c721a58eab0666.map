{"version":3,"sources":["TextInput.js"],"names":["ColorPropType","require","DocumentSelectionState","EventEmitter","NativeMethodsMixin","Platform","React","createReactClass","PropTypes","ReactNative","StyleSheet","Text","TextAncestor","TextInputState","TimerMixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","emptyFunction","invariant","requireNativeComponent","warning","AndroidTextInput","RCTMultilineTextInputView","RCTSinglelineTextInputView","OS","onlyMultiline","onTextInput","children","DataDetectorTypes","TextInput","displayName","statics","State","currentlyFocusedField","focusTextInput","blurTextInput","propTypes","autoCapitalize","oneOf","autoCorrect","bool","spellCheck","autoFocus","allowFontScaling","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","number","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","placeholderTextColor","scrollEnabled","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","dataDetectorTypes","oneOfType","arrayOf","caretHidden","contextMenuHidden","inputAccessoryViewID","textContentType","getDefaultProps","mixins","isFocused","findNodeHandle","_inputRef","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","componentDidMount","props","tag","registerInput","context","focusEmitter","addListener","el","requestAnimationFrame","focus","blur","onFocusRequested","componentWillUnmount","remove","unregisterInput","contextTypes","clear","setNativeProps","text","render","textInput","RCTVirtualText","_renderIOS","_renderIOSLegacy","_renderAndroid","_getText","_setNativeRef","ref","textContainer","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","thatReturnsTrue","childCount","Children","forEach","inputView","unshift","styles","multilineInput","_onTextInput","_onScroll","_onPress","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","nativeID","testID","RCTTextInputView","Constants","AutoCapitalizationType","event","mostRecentEventCount","nativeEvent","eventCount","forceUpdate","componentDidUpdate","nativeProps","Object","keys","length","update","InternalTextInputType","NativeComponent","TypedTextInput","create","paddingTop","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst DocumentSelectionState = require('DocumentSelectionState');\nconst EventEmitter = require('EventEmitter');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst createReactClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TextAncestor = require('TextAncestor');\nconst TextInputState = require('TextInputState');\nconst TimerMixin = require('react-timer-mixin');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {TextStyleProp} from 'StyleSheet';\nimport type {ViewProps} from 'ViewPropTypes';\n\nlet AndroidTextInput;\nlet RCTMultilineTextInputView;\nlet RCTSinglelineTextInputView;\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = requireNativeComponent('AndroidTextInput');\n} else if (Platform.OS === 'ios') {\n  RCTMultilineTextInputView = requireNativeComponent(\n    'RCTMultilineTextInputView',\n  );\n  RCTSinglelineTextInputView = requireNativeComponent(\n    'RCTSinglelineTextInputView',\n  );\n}\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\ntype Event = Object;\ntype Selection = {\n  start: number,\n  end?: number,\n};\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\ntype DataDetectorTypesType =\n  | 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'none'\n  | 'all';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';\n\ntype IOSProps = $ReadOnly<{|\n  spellCheck?: ?boolean,\n  keyboardAppearance?: ?('default' | 'light' | 'dark'),\n  enablesReturnKeyAutomatically?: ?boolean,\n  selectionState?: ?DocumentSelectionState,\n  clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),\n  clearTextOnFocus?: ?boolean,\n  dataDetectorTypes?:\n    | ?DataDetectorTypesType\n    | $ReadOnlyArray<DataDetectorTypesType>,\n  inputAccessoryViewID?: ?string,\n  textContentType?: ?(\n    | 'none'\n    | 'URL'\n    | 'addressCity'\n    | 'addressCityAndState'\n    | 'addressState'\n    | 'countryName'\n    | 'creditCardNumber'\n    | 'emailAddress'\n    | 'familyName'\n    | 'fullStreetAddress'\n    | 'givenName'\n    | 'jobTitle'\n    | 'location'\n    | 'middleName'\n    | 'name'\n    | 'namePrefix'\n    | 'nameSuffix'\n    | 'nickname'\n    | 'organizationName'\n    | 'postalCode'\n    | 'streetAddressLine1'\n    | 'streetAddressLine2'\n    | 'sublocality'\n    | 'telephoneNumber'\n    | 'username'\n    | 'password'\n    | 'newPassword'\n    | 'oneTimeCode'\n  ),\n  scrollEnabled?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  returnKeyLabel?: ?string,\n  numberOfLines?: ?number,\n  disableFullscreenUI?: ?boolean,\n  textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),\n  underlineColorAndroid?: ?ColorValue,\n  inlineImageLeft?: ?string,\n  inlineImagePadding?: ?number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n  autoCapitalize?: ?AutoCapitalize,\n  autoCorrect?: ?boolean,\n  autoFocus?: ?boolean,\n  allowFontScaling?: ?boolean,\n  editable?: ?boolean,\n  keyboardType?: ?KeyboardType,\n  returnKeyType?: ?ReturnKeyType,\n  maxLength?: ?number,\n  multiline?: ?boolean,\n  onBlur?: ?Function,\n  onFocus?: ?Function,\n  onChange?: ?Function,\n  onChangeText?: ?Function,\n  onContentSizeChange?: ?Function,\n  onTextInput?: ?Function,\n  onEndEditing?: ?Function,\n  onSelectionChange?: ?Function,\n  onSubmitEditing?: ?Function,\n  onKeyPress?: ?Function,\n  onScroll?: ?Function,\n  placeholder?: ?Stringish,\n  placeholderTextColor?: ?ColorValue,\n  secureTextEntry?: ?boolean,\n  selectionColor?: ?ColorValue,\n  selection?: ?$ReadOnly<{|\n    start: number,\n    end?: ?number,\n  |}>,\n  value?: ?Stringish,\n  defaultValue?: ?Stringish,\n  selectTextOnFocus?: ?boolean,\n  blurOnSubmit?: ?boolean,\n  style?: ?TextStyleProp,\n  caretHidden?: ?boolean,\n  contextMenuHidden?: ?boolean,\n|}>;\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    State: {\n      currentlyFocusedField: TextInputState.currentlyFocusedField,\n      focusTextInput: TextInputState.focusTextInput,\n      blurTextInput: TextInputState.blurTextInput,\n    },\n  },\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `number-pad`\n     * - `decimal-pad`\n     * - `email-address`\n     * - `phone-pad`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `ascii-capable`\n     * - `numbers-and-punctuation`\n     * - `url`\n     * - `name-phone-pad`\n     * - `twitter`\n     * - `web-search`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `visible-password`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      'number-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n      // Android-only\n      'visible-password',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    onTextInput: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: ColorPropType,\n    /**\n     * If `false`, scrolling of the text view will be disabled.\n     * The default value is `true`. Does only work with 'multiline={true}'.\n     * @platform ios\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n     * The highlight and cursor color of the text input.\n     */\n    selectionColor: ColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * This property is supported only for single-line TextInput component.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n     *\n     * - `borderLeftWidth`\n     * - `borderTopWidth`\n     * - `borderRightWidth`\n     * - `borderBottomWidth`\n     * - `borderTopLeftRadius`\n     * - `borderTopRightRadius`\n     * - `borderBottomRightRadius`\n     * - `borderBottomLeftRadius`\n     *\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: ColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n     * like\n     * ```\n     * <TextInput\n     *  inlineImageLeft='search_icon'\n     * />\n     * ```\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     * This property is supported only for single-line TextInput component on iOS.\n     */\n    caretHidden: PropTypes.bool,\n    /*\n     * If `true`, contextMenuHidden is hidden. The default value is `false`.\n     */\n    contextMenuHidden: PropTypes.bool,\n    /**\n     * An optional identifier which links a custom InputAccessoryView to\n     * this text input. The InputAccessoryView is rendered above the\n     * keyboard when this text input is focused.\n     * @platform ios\n     */\n    inputAccessoryViewID: PropTypes.string,\n    /**\n     * Give the keyboard and the system information about the\n     * expected semantic meaning for the content that users enter.\n     * @platform ios\n     */\n    textContentType: PropTypes.oneOf([\n      'none',\n      'URL',\n      'addressCity',\n      'addressCityAndState',\n      'addressState',\n      'countryName',\n      'creditCardNumber',\n      'emailAddress',\n      'familyName',\n      'fullStreetAddress',\n      'givenName',\n      'jobTitle',\n      'location',\n      'middleName',\n      'name',\n      'namePrefix',\n      'nameSuffix',\n      'nickname',\n      'organizationName',\n      'postalCode',\n      'streetAddressLine1',\n      'streetAddressLine2',\n      'sublocality',\n      'telephoneNumber',\n      'username',\n      'password',\n      'newPassword',\n      'oneTimeCode',\n    ]),\n  },\n  getDefaultProps(): Object {\n    return {\n      allowFontScaling: true,\n      underlineColorAndroid: 'transparent',\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin, TimerMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return (\n      TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef)\n    );\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      // tag is null only in unit tests\n      TextInputState.registerInput(tag);\n    }\n\n    if (this.context.focusEmitter) {\n      this._focusSubscription = this.context.focusEmitter.addListener(\n        'focus',\n        el => {\n          if (this === el) {\n            this.requestAnimationFrame(this.focus);\n          } else if (this.isFocused()) {\n            this.blur();\n          }\n        },\n      );\n      if (this.props.autoFocus) {\n        this.context.onFocusRequested(this);\n      }\n    } else {\n      if (this.props.autoFocus) {\n        this.requestAnimationFrame(this.focus);\n      }\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      TextInputState.unregisterInput(tag);\n    }\n  },\n\n  contextTypes: {\n    onFocusRequested: PropTypes.func,\n    focusEmitter: PropTypes.instanceOf(EventEmitter),\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    let textInput;\n    if (Platform.OS === 'ios') {\n      textInput = UIManager.RCTVirtualText\n        ? this._renderIOS()\n        : this._renderIOSLegacy();\n    } else if (Platform.OS === 'android') {\n      textInput = this._renderAndroid();\n    }\n    return (\n      <TextAncestor.Provider value={true}>{textInput}</TextAncestor.Provider>\n    );\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string'\n      ? this.props.value\n      : typeof this.props.defaultValue === 'string'\n        ? this.props.defaultValue\n        : '';\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOSLegacy: function() {\n    let textContainer;\n\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (const propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' +\n                propKey +\n                '` is only supported with multiline.',\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer = (\n        <RCTSinglelineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n        />\n      );\n    } else {\n      let children = props.children;\n      let childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.',\n      );\n      if (childCount >= 1) {\n        children = (\n          <Text style={props.style} allowFontScaling={props.allowFontScaling}>\n            {children}\n          </Text>\n        );\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer = (\n        <RCTMultilineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />\n      );\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderIOS: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const RCTTextInputView = props.multiline\n      ? RCTMultilineTextInputView\n      : RCTSinglelineTextInputView;\n\n    if (props.multiline) {\n      props.style.unshift(styles.multilineInput);\n    }\n\n    const textContainer = (\n      <RCTTextInputView\n        ref={this._setNativeRef}\n        {...props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n        text={this._getText()}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize =\n      UIManager.AndroidTextInput.Constants.AutoCapitalizationType[\n        props.autoCapitalize || 'sentences'\n      ];\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    let children = this.props.children;\n    let childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const textContainer = (\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: Event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: Event) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: Event) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef) {\n      this._inputRef.setNativeProps({\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    const text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: Event) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function() {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (\n      this._lastNativeText !== this.props.value &&\n      typeof this.props.value === 'string'\n    ) {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (\n      this._lastNativeSelection &&\n      selection &&\n      (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)\n    ) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (Object.keys(nativeProps).length > 0 && this._inputRef) {\n      this._inputRef.setNativeProps(nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: Event) {\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: Event) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: Event) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nclass InternalTextInputType extends ReactNative.NativeComponent<Props> {\n  clear() {}\n\n  // $FlowFixMe\n  isFocused(): boolean {}\n}\n\nconst TypedTextInput = ((TextInput: any): Class<InternalTextInputType>);\n\nconst styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TypedTextInput;\n"]}